<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % gnome-menus-C SYSTEM "../../../ubuntu/libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "&EnglishAmerican;">
<!ENTITY ubuntu '<phrase>Ubuntu</phrase>'>
]>
<chapter id="networking-related-applications" status="writing">
	<title>Networking Related Applications</title>
  <para>Networking Related Applications para ... </para>
	<sect1 id="network-configuration" status="help">
		<title>Network Configuration</title>
          <para>
            Network Configuration para ...
          </para>
      <sect2 id="ethernet" status="help">
        <title>Ethernet</title> 
          <para>
            Ethernet para ...
          </para>
          </sect2>
        <sect2 id="wireless" status="help">
          <title>Wireless</title>
            <para>
              Wireless para ...
            </para>
        </sect2>
        <sect2 id="managing-dns-entries" status="help">
          <title>Managing DNS Entries</title>
            <para>
              Managing DNS Entries para ...
            </para>
        </sect2>
        <sect2 id="managing-hosts" status="help">
          <title>Managing Hosts</title>
            <para>
              Managing Hosts para ...
            </para>
        </sect2>
    </sect1>
	<sect1 id="tcpip" status="review">
		<title>TCP/IP</title>
          <para>
            The Transmission Control Protocol and Internet Protocol (TCP/IP) are a standard set of protocols
            developed in the late 1970s by the Defense Advanced Research Projects Agency (DARPA) as a means
            of communication between different types of computers and computer networks. TCP/IP is the driving
            force of the Internet, and thus it is the most popular set of network protocols on Earth. 
          </para>
      <sect2 id="tcpip-introduction" status="review">
        <title>TCP/IP Introduction</title> 
          <para>
            The two protocol components of TCP/IP deal with different aspects of computer networking.
            <emphasis role="Italics">Internet Protocol</emphasis>, the "IP" of TCP/IP is a connectionless
            protocol which deals only with network packet routing using the 
            <emphasis role="italics">IP datagram</emphasis> as the basic unit of networking information.
            The IP datagram consists of a header, followed by a message.  
            The <emphasis role="italics">Transmission Control Protocol</emphasis> is the "TCP" of TCP/IP,
            and enables network hosts to establish connections which may be used to exchange data streams.
            TCP also guarantees that the data between connections is delivered, and arrives at one network 
            host in the same order as sent from another network host.
          </para>
          </sect2>
        <sect2 id="tcpip-configuration" status="review">
          <title>TCP/IP Configuration</title>
            <para>
            The TCP/IP protocol configuration consists of several elements which must be set by editing the
            appropriate configuration files, or deploying solutions such as the Dynamic Host Configuration
            Protocol (DHCP) server which in turn, can be configured to provide the proper TCP/IP configuration
            settings to network clients automatically. These configuration values must be set correctly in
            order to facilitate the proper network operation of your Ubuntu system.
            </para>
            <para>
            The common configuration elements of TCP/IP, and their purpose are as follows:
            <itemizedlist>
               <listitem>
                  <para>
                  <emphasis role="bold">IP Address</emphasis> The IP Address is a unique
                  identifying string expressed as four decimal numbers ranging from zero (0)
                  to two-hundred and fifty-five (255), separated by periods,
                  with each of the four numbers representing eight (8) bits of the address for a
                  total length of thirty-two (32) bits for the whole address. This format is called
                  <emphasis role="italics">dotted quad
                  notation</emphasis>.</para>
                     <para>
                     IP Addresses are defined in <emphasis role="italics">classes</emphasis> whereby the
                     bits making up an address correspond to network, and host ranges.  There are four
                     principal address classes: A, B, C, and D. Class A IP addresses would typically be
                     used in very large organizations, and have the format 
                     <emphasis role="italics">network.host.host.host</emphasis> whereas
                     the more common Class C address could be used in smaller organizations, and is
                     often used for individual host subscribers to Internet Service Providers. A Class
                     C address would resemble <emphasis role="italics">network.network.network.host</emphasis>
                     Class D addresses are special in that they are known as 
                     <emphasis role="italics">Multicast</emphasis> addresses.
                     Some examples of valid IP addresses are 127.0.0.1 and 82.211.81.166.
                     </para>
               </listitem>
               <listitem>
                  <para>
                  <emphasis role="bold">Netmask</emphasis> The Subnetwork Mask (or simply,
                  <emphasis role="italics">netmask</emphasis>) is a local bit mask, or set of flags
                  which separate the portions of an IP address significant to the network from the
                  bits significant to the <emphasis role="italics">subnetwork</emphasis>.  For example,
                  in a Class C network, the standard netmask is 255.255.255.0 which masks the first
                  three bytes of the IP Address, and allows the last byte of the IP Address to
                  remain available for specifying hosts on the subnetwork.
                  </para>
               </listitem>
               <listitem>
                  <para>
                  <emphasis role="bold">Network Address</emphasis> The Network Address represents the
                  bytes comprising the network portion of an IP address.  For example, the host 12.128.1.2
                  in a Class A network would use 12.0.0.0 as the network address, which uses twelve (12)
                  to represent the first byte of the IP address, (the network part) and zeroes (0) 
                  in all of the remaining three bytes to represent the potential host values.  Network
                  hosts using the very common private, and non-routable IP addresses such as 192.168.1.100
                  would in turn, use a Network Address of 192.168.1.0 which specifies the first three
                  bytes of the Class C 192.168.1 network, and a zero (0) for all the possible hosts on the
                  network.
                  </para>
               </listitem>
               <listitem>
                  <para>
                  <emphasis role="bold">Broadcast Address</emphasis> The Broadcast Address is an IP Address
                  which allows network data to be sent simultaneously to all hosts on a given subnetwork rather
                  than specifying a particular network host.  The standard general broadcast address for IP networks is
                  255.255.255.255, but this broadcast address cannot be used to send a broadcast message to
                  every host on the Internet because routers block it.  A more appropriate broadcast address
                  is set to match a specific subnetwork.  For example, on the popular, private Class C IP network
                  192.168.1.0, the broadcast address should be configured as 192.168.1.255. Broadcast messages are
                  typically produced by network protocols such as the Address Resolution Protocol (ARP) and the 
                  Routing Information Protocol (RIP).             
                  </para>
               </listitem>
               <listitem>
                  <para>
                  <emphasis role="bold">Gateway Address</emphasis> A Gateway Address is the IP Address through which
                  a particular network, or host on a network may be reached.  If one network host wishes to communicate
                  with another network host, and that host is not located on the same network, then a 
                  <emphasis role="italics">gateway</emphasis> must be used. In many cases, the Gateway Address will be that
                  of a router on the same network, which will in turn, pass traffic on to other networks, or hosts such as
                  Internet hosts.  The value of the Gateway Address setting must be correct, or your system will not be able
                  to reach any hosts beyond those on the same network.                  
                  </para>
               </listitem>
               <listitem>
                  <para>
                  <emphasis role="bold">Nameserver Address</emphasis> Nameserver Addresses represent the IP Addresses of
                  Domain Name Server (DNS) systems which resolve network hostnames into IP Addresses.  There are three levels of
                  Nameserver Addresses which may be specified in order of precedence, The 
                  <emphasis role="italics">Primary</emphasis>
                  Nameserver, the <emphasis role="italics">Secondary</emphasis> Nameserver, and the 
                  <emphasis role="italics">Tertiary</emphasis>
                  Nameserver. In order for your system to be able to resolve network hostnames into their
                  corresponding IP Addresses, you must specify valid Nameserver Addresses, which you are authorized to use
                  in your system's TCP/IP configuration.  In many cases these addresses can, and will be provided by your
                  network service provider, but many free, and publicly accessible Nameservers are available for use, such as
                  the Level3 (Verizon) servers with IP Addresses from
                  4.2.2.1 to 4.2.2.6. </para>
                     <tip>
                        <para>
                        The IP Address, Netmask, Network Address, Broadcast Address, and Gateway Address
                        are typically specified via the appropriate directives in the 
                        file <emphasis role="bold">/etc/network/interfaces</emphasis>. For more information, 
                        view the system manual page for interfaces with the command: 
                         <command>man interfaces</command>
                        </para>
                     </tip>
                     <tip>
                        <para>
                        The Nameserver Addresses are typically specified via 
                        <emphasis role="italics">nameserver</emphasis> directives in the 
                        file <emphasis role="bold">/etc/resolv.conf</emphasis>. For more information, 
                        view the system manual page for resolv.conf with the command: 
                         <command>man resolv.conf</command>
                        </para>
                     </tip>
               </listitem>
            </itemizedlist>
            </para>
        </sect2>
        <sect2 id="ip-routing" status="review">
          <title>IP Routing</title>
            <para>
              IP routing is a means of specifying, and discovering paths in a TCP/IP network along which
              network data may be sent.  Routing uses a set of <emphasis role="talics">routing tables</emphasis>
              to direct the forwarding of network data packets from their source to the destination, often
              via many intermediary network nodes known as <emphasis role="italics">routers</emphasis>.
              IP Routing is the principle mode of path discovery on the Internet.  There are two primary forms of
              IP Routing, <emphasis role="italics">Static Routing</emphasis>, and 
              <emphasis role="italics">Dynamic Routing.</emphasis>
            </para>
            <para>
            Static routing involves manually adding IP routes to the system's routing table, and this is usually
            done by manipulating the routing table with the <command>route</command> command. Static routing enjoys
            many advantages over dynamic routing, such as simplicity of implementation on smaller networks, 
            predictability, (the routing table is always computed in advance, and thus the route is precisely the 
            same each time it used) and low overhead on other routers and network links due to the lack of a
            dynamic routing protocol.  However, static routing does present some disadvantages as well.  For example,
            static routing is limited to small networks, and does not scale well.  Static routing also fails completely
            to adapt to network outages, and failures along the route due to the fixed nature of the route. 
            </para>
            <para>
            Dynamic Routing depends on large networks with multiple possible IP routes from a source to a destination,
            and makes use of special routing protocols, such as the Router Information Protocol (RIP) which handle
            the automatic adjustments in routing tables that make dynamic routing possible.  Dynamic routing
            has several advantages over static routing, such as superior scalability, and the ability to adapt
            to failures, and outages along network routes. Additionally, there is less manual configuration of the
            routing tables, since routers learn from one another about their existence and available routes. This trait
            also eliminates the possibility of introducing mistakes in the routing tables via human error.
            Dynamic routing is not perfect however, and presents disadvantages such as heightened complexity, and
            additional network overhead from router communications, which does not immediately benefit the end-users,
            but still consumes network bandwidth.
            </para>
        </sect2>
        <sect2 id="tcp-and-udp" status="review">
          <title>TCP and UDP</title>
            <para>
              TCP is a a connection-based protocol, offering error correction, and guaranteed delivery of
              data via what is known as <emphasis role="italics">flow control</emphasis>. Flow control
              determines when the flow of a data stream needs to be stopped, and previously sent data
              packets should to be re-sent due to problems, such as <emphasis role="italics">collisions</emphasis>,
              for example, thus ensuring complete, and accurate delivery of the data.  TCP is typically
              used in the exchange of important information such as database transactions. 
            </para>
            <para>
              The User Datagram Protocol (UDP) on the other hand, is a <emphasis role="italics">connectionless</emphasis>
              protocol which never deals with the transmission of important data because it lacks flow
              control, or any other method to assure reliable delivery of the data.  UDP is commonly used
              in such applications as audio, and video streaming, where it is considerably faster than
              TCP due to the lack of error correction, and flow control.
            </para>
        </sect2>
        <sect2 id="icmp" status="review">
          <title>ICMP</title>
            <para>
              The Internet Control Messaging Protocol (ICMP) is an extension to the Internet Protocol (IP) as defined
              in the Request For Comments (RFC) #792, and supports network packets containing control, error, and
              informational messages.  ICMP is used by such network applications as the <application>ping</application>
              utility, which can determine the availability of a network host, or device.  Examples of some error messages
              returned by ICMP which are useful to both network hosts, and devices such as routers, include 
              <emphasis role="italics">Destination Unreachable</emphasis>, and <emphasis role="italics">Time Exceeded</emphasis>.
            </para>
        </sect2>
        <sect2 id="daemons" status="review">
          <title>Daemons</title>
            <para>
              Daemons are special system applications which typically execute continuously, in the background, and
              await requests for the functions they provide from other applications.  Many daemons are network-centric; that is,
              a great deal of daemons executing in the background on an Ubuntu system may provide network-related functionality.
              Some examples of such network daemons include the <emphasis role="italics">Hyper Text Transport Protocol Daemon</emphasis> 
              (httpd) which provides web server functionality, the <emphasis role="italics">Secure SHell Daemon</emphasis> (sshd) which
              provides secure remote login shell, and file transfer capabilities, and  the <emphasis role="italics">Internet Message Access 
              Protocol Daemon</emphasis> (imapd) which provides E-Mail services.
            </para>
        </sect2>
    </sect1>
	<sect1 id="firewall-configuration" status="help">
		<title>Firewall Configuration</title>
          <para>
            Firewall Configuration para ...
          </para>
        <sect2 id="firewall-introduction" status="help">
          <title>Firewall Introduction</title>
            <para>
              Firewall Introduction para ...
            </para>
        </sect2>
        <sect2 id="ip-masquerading" status="help">
          <title>IP Masquerading</title>
            <para>
              IP Masquerading para ...
            </para>
        </sect2>
        <sect2 id="firewall-tools" status="help">
          <title>Tools</title>
            <para>
              Tools para ...
            </para>
        </sect2>
        <sect2 id="firewall-logs" status="help">
          <title>Logs</title>
            <para>
              Logs para ...
            </para>
        </sect2>
    </sect1>
	<sect1 id="openssh-server" status="review">
		<title>OpenSSH Server</title>
      <sect2 id="openssh-introduction" status="review">
        <title>Introduction</title> 
           <para>
            This section of the Ubuntu Server Starter Guide introduces a powerful collection of tools
            for the remote control of networked computers, and transfer of data between networked 
            computers called <emphasis role="italics">OpenSSH</emphasis>. You will also learn
            about some of the configuration settings possible with the OpenSSH server application, and
            how to change them on your Ubuntu system. 
          </para>
          <para>
            OpenSSH is a freely available version of the Secure Shell (SSH) protocol family of 
            tools for remotely controlling a computer, or transfer of files between computers.
            Traditional tools used to accomplish these functions such as <application>telnet</application>
            or <application>rcp</application> are insecure, and transmit the user's password in
            cleartext when used. OpenSSH provides a server daemon, and client tools to facilitate
            secure, encrypted remote control, and file transfer operations, effectively replacing
            the legacy tools.
          </para>
          <para>
            The OpenSSH server component, <application>sshd</application> listens continuously for
            client connections from any of the client tools. When a connection request occurs,
            <application>sshd</application> sets up the correct connection depending on the type
            of client tool connecting. For example, if the remote computer is connecting with the
            <application>ssh</application> client application, the OpenSSH server sets up a remote
            control session after authentication. If a remote user connects to an OpenSSH server with
            <application>scp</application>, the OpenSSH server daemon initiates a secure copy of files
            between the server and client after authentication. OpenSSH can use many authentication
            methods, including plain password, public key, and <application>Kerberos</application> tickets.
            </para>
          </sect2>
        <sect2 id="openssh-installation" status="review">
        <title>Installation</title>
        <para>
        Installation of the OpenSSH client, and server applications is simple, and straightforward process, using a 
        combination of the <application>sudo</application> utility to obtian root privileges, and the 
        <application>apt-get</application> application. To install the OpenSSH client applications on your Ubuntu system, 
        use this command at the prompt:
        </para>
           <para>
               <command>
               sudo apt-get install openssh-client
               </command>
           </para>
        <para>
        To install the OpenSSH server application, and related support files, use this command:
        </para>
           <para>
              <command>
              sudo apt-get install openssh-server
              </command>
           </para>
        </sect2>
        <sect2 id="openssh-configuration" status="review">
          <title>Configuration</title>
            <para>
              You may configure the default behavior of the OpenSSH server application, <application>sshd</application> 
              by editing the file /etc/ssh/sshd_config. For information about the configuration directives used in this file, you may
              view the appropriate manual page with the following command:
            </para>
               <para>
                  <command>
                  man sshd_config
                  </command>
               </para>
            <para>
            There are many directives in the <application>sshd</application> configuration file controlling such things as communications
            settings, and authentication modes. For example, you may change the default Transmission Control Protocol (TCP) port that your OpenSSH
            server listens for incoming connections on by editing the /etc/ssh/ssh_config file.
            </para>
            <tip>
               <para>Prior to editing the configuration file, you should make a copy of the original file, and protect it 
               from writing so you will have the original settings as a reference, and to re-use as necessary.
               </para>
            </tip>
           <para>
           Copy the /etc/ssh/sshd_config file, and protect it from writing with the commands:
           </para>
             <para>
                <command>sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.original</command>
             </para>
             <para>
                <command>sudo chmod a-w /etc/ssh/sshd_config.original</command>
             </para> 
            <para>
            Now edit the /etc/ssh/sshd_config file and set the value of the <emphasis role="italic">Port</emphasis> directive to the port number you wish the server
            to bind to, and listen on.  
            </para>
               <itemizedlist>
               <listitem>
               <para>
               To set your OpenSSH to listen on TCP port 2222 instead of the default TCP port 22, change
               the Port directive as such:
               </para>
               <para>
               Port 2222
               </para>
               </listitem>
               </itemizedlist>
            <para>
            After making changes to the /etc/ssh/sshd_config file, save the file, and restart the <application>sshd</application> 
            server application to effect the changes using the command:
            </para>
               <para>
                  <command>
                  sudo /etc/init.d/ssh restart
                  </command>
               </para>
            <para>
            Other examples of configuration directives you may change include configuring the <application>sshd</application> server
            application to accept public key-based login credentials, or having <application>sshd</application> display a pre-login
            banner, such as the contents of the /etc/issue, or /etc/issue.net file.  
            </para>
            <itemizedlist>
            <listitem>
            <para>
            To have <application>sshd</application> allow public key-based login credentials, simply add, or modify the line:
            </para>
               <para>
               RSAAuthentication yes
               </para>
            <para>
            in the /etc/ssh/sshd_config file.
            </para>
            </listitem>
            <listitem>
             <para>
             To make your OpenSSH server display the contents of the /etc/issue.net file as a pre-login
             banner, simply add, or modify the line:
             </para>
               <para>
               Banner  /etc/issue.net
               </para>
               <para>
               in the /etc/ssh/sshd_config file.
               </para>
             </listitem>
             </itemizedlist>
                        <warning>
                           <para>
                           Many other configuration directives for <application>sshd</application> are available for changing the server application's
                           behavior to fit your needs. Be advised however, if your only method of access to a server is <application>ssh</application>,
                           and you make a mistake in configuring <application>sshd</application> via the /etc/ssh/sshd_config file, you may find you
                           are locked out of the server upon restarting it, or that the <application>sshd</application> server refuses to start due
                           to an incorrect configuration directive, so be extra careful when editing this file on a remote server.
                           </para>
                        </warning>
        </sect2>
     </sect1>
	<sect1 id="ftp-server-introduction" status="review">
        <title>FTP Introduction</title> 
            <para>File Transfer Protocol (FTP) is a TCP protocol for uploading and downloading large
                files between computers. FTP works on a client/server model. The server component is
                called a <emphasis>FTP daemon</emphasis>. It continuously listens for FTP requests
                from remote clients. When a request is received it manages the the login and sets up
                the connection. For the duration of a session it executes any of commands sent by
                the FTP client.</para>
            <para>Access to an FTP server can be managed in two ways:</para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Anonymous</para>
                </listitem>
                <listitem>
                    <para>Authenticated</para>
                </listitem>
            </itemizedlist>
            <para>In the Anonymous mode, remote clients can access the FTP server by using the
                default user account called &apos;anonymous&quot; or &quot;ftp&quot; and
                sending their email address as the password. In the Authenticated mode a user must
                have an account and password. User access to the FTP server directories and files is
                dependant on the permissions defined for the account used at login. As a general
                rule the FTP daemon will hide the root directory of the FTP server and change it to
                the FTP Home directory. This hides the rest of the file system from remote
            sessions.</para>
            <sect2 id="vsftpd-ftp-server" status="review">
                <title>vsftpd - FTP Server</title>
                <procedure><step>
                    <para>vsftpd is a FTP daemon available in
                    Ubuntu Linux. It is easy to install, setup and
                    maintain.</para></step>
                </procedure>
            <variablelist>
                <varlistentry>
                    <term>Installation:</term>
                    <listitem>
                        <para>At the prompt enter the following command to install
                                <application>vsftpd</application>:</para>
                        <para>
                            <command>sudo apt-get install vsftpd</command>
                        </para>
                    </listitem>
                </varlistentry>
                </variablelist>
                <variablelist>
                <varlistentry>
                    <term>Configuration:</term>
                    <listitem>
                        <para>
                        You can edit the vsftpd configuration file,
                        /etc/vsftpd.conf to
                        change the default settings. More information about
                        each configuration parameter is available in
                        the configuration file.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Manage Service:</term>
                    <listitem>
                        <para> <command>sudo /etc/init.d/vsftpd start</command></para>
                        <para><command>sudo /etc/init.d/vsftpd stop</command> </para>
                    </listitem>
                </varlistentry>
            </variablelist>
                </sect2>
    </sect1>
	<sect1 id="network-file-system" status="writing">
		<title>Network File System (NFS)</title>
          <para>
            NFS para ...
          </para>
      <sect2 id="nfs-installation" status="writing">
        <title>Installation</title>
          <para>
            Installation para ...
          </para>
      </sect2>
      <sect2 id="nfs-configuration" status="writing">
        <title>Configuration</title>
          <para>
            Configuration para ...
          </para>
      </sect2>
      <sect2 id="nfs-references" status="writing">
        <title>References</title>
          <para>
            References para ...
          </para>
      </sect2>
    </sect1>
	<sect1 id="dhcp" status="review">
		<title>Dynamic Host Configuration Protocol (DHCP)</title>
            <para>Dynamic Host Configuration Protocol (DHCP) is a network service that enables hosts
                computers to be automatically assigned with settings from a server as apposed to
                manually configuring each network host. Computers configured to be DHCP clients have
                no control over the settings they receive from the DHCP server and the configuration
                is transparent to the computers' user.</para>
            <para>The most common settings provided by a DHCP server to DHCP clients, include:</para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>IP-Address and Netmask</para>
                </listitem>
                <listitem>
                    <para>DNS</para>
                </listitem>
                <listitem>
                    <para>WINS</para>
                </listitem>
            </itemizedlist>
            <para>However, a DHCP server can also supply configuration properties such as:</para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Host Name</para>
                </listitem>
                <listitem>
                    <para>Domain Name</para>
                </listitem>
                <listitem>
                    <para>Default Gateway</para>
                </listitem>
                <listitem>
                    <para>Time Server</para>
                </listitem>
                <listitem>
                    <para>Print Server</para>
                </listitem>
            </itemizedlist>
            <para>The advantage of using DHCP is that changes to the network, for example a change
                in the address of the DNS server, need only be changed at the DHCP server and all
                network hosts will be reconfigured the next time each of their DHCP clients poll the
                DHCP server. As an added advantage it is also easier to integrate new computers into
                the network as there is no need to check for the availability of an ip-address.
                Conflicts in ip-address allocation are also reduced.</para>
            <para>A DHCP server can provide configuration settings using two methods:</para>
            <variablelist>
                <varlistentry>
                    <term>MAC Address</term>
                    <listitem>
                        <para>This method entails using DHCP to identify the unique hardware address
                            of each network card connected to the network and then continuously
                            supply a constant configuration each time the DHCP client makes a
                            request from the DHCP server.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Address Pool</term>
                    <listitem>
                        <para>This method entails defining a pool (sometimes also called a range or
                            scope) of ip-addresses from which DHCP clients are supplied their
                            configuration properties dynamically and on a fist come first serve
                            basis. When a DHCP client is no longer on the network for a specified
                            period, the configuration is expired and released back to the address
                            pool for use by other DHCP Clients.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>Ubuntu is shipped with both DHCP server and client. The server is
                    <application>dhcpd</application> (dynamic host configuration protocol daemon).
                The client provided with Ubuntu is <application>???</application> and should be
                installed on all computers required to be automatically configured. Both programs
                are easy to install and configure and will be automatically started at system boot.</para>
      <sect2 id="dhcp-installation" status="review">
        <title>Installation</title>
          <para>At the prompt enter the following command to install
                  <application>dhcpd</application>:</para>
          <para>
              <command>sudo apt-get install dhcpd</command>
          </para>
          <para>You will see the following output, which explains what to do next:</para>
          <screen>
Please note that if you are installing the DHCP server for the first
time you need to configure it first. Please stop (/etc/init.d/dhcp
stop) the DHCP server daemon, edit /etc/dhcpd.conf to suit your needs
and particular configuration, and restart the DHCP server daemon
(/etc/init.d/dhcp start).

You also need to edit /etc/default/dhcp to specify the interfaces dhcpd
should listen to. By default it listens to eth0.

NOTE: dhcpd's messages are being sent to syslog. Look there for
diagnostics messages.

Starting DHCP server: dhcpd failed to start - check syslog for diagnostics.  </screen>
      </sect2>
      <sect2 id="dhcp-configuration" status="review">
        <title>Configuration</title>
            <para>The error-message the installation ends with might be a little confusing but the
                following steps will help you configuring the service:</para>
            <para>Most commonly what you want to do is assign IP addresses randomly. This can be
                done with settings as follows:</para>
            <screen>
# Sample /etc/dhcpd.conf
# (add your comments here) 
default-lease-time 600;
max-lease-time 7200;
option subnet-mask 255.255.255.0;
option broadcast-address 192.168.1.255;
option routers 192.168.1.254;
option domain-name-servers 192.168.1.1, 192.168.1.2;
option domain-name "mydomain.org";

subnet 192.168.1.0 netmask 255.255.255.0 {
range 192.168.1.10 192.168.1.100;
range 192.168.1.150 192.168.1.200;
} </screen>
            <para>This will result in DHCP server giving a client an IP address from the range
                192.168.1.10-192.168.1.100 or 192.168.1.150-192.168.1.200. It will lease an IP
                address for 600 seconds if the client doesn't ask for specific time frame. Otherwise
                the maximum (allowed) lease will be 7200 seconds. The server will also "advise" the
                client that it should use 255.255.255.0 as its subnet mask, 192.168.1.255 as its
                broadcast address, 192.168.1.254 as the router/gateway and 192.168.1.1 and
                192.168.1.2 as its DNS servers. </para>
            <para>If you need to specify a WINS server for your Windows clients you will need to
                include the netbios-name-servers option e.g.</para>
            <screen>
option netbios-name-servers 192.168.1.1; </screen>
            <para>Dhcpd configuration settings are taken from DHCP mini-HOWTO, which can be found
                    <ulink url="http://www.tldp.org/HOWTO/DHCP/index.html">here</ulink>. </para>
      </sect2>
      <sect2 id="dhcp-references" status="writing">
        <title>References</title>
          <para>
            References para ...
          </para>
      </sect2>
    </sect1>
	<sect1 id="dns" status="writing">
		<title>Domain Name Servers (DNS)</title>
            <para>Domain Name Server (DNS) is an Internet service that maps IP addresses and fully
                qualified domain names (FQDN) to one another. In this way DNS alleviates the need to
                remember IP addresses. Computers that run DNS are called
                <emphasis role="italics">name
                servers</emphasis>. Ubuntu ships with <application>BIND</application> (Berkley
                Internet Naming Daemon), one of the most common programs used for maintaining a name
                server on GNU/Linux.</para>
            <!-- things to do: IPv6-->
      <sect2 id="dns-installation" status="writing">
        <title>Installation</title>
          <para>
            Installation para ...
          </para>
      </sect2>
      <sect2 id="dns-configuration" status="writing">
        <title>Configuration</title>
          <para>
            Configuration para ...
          </para>
        <sect3 id="primary-dns" status="writing">
          <title>Primary DNS</title>
            <para>
              Primary DNS para ...
            </para>
        </sect3>
        <sect3 id="secondary-dns" status="writing">
          <title>Secondary DNS</title>
            <para>
              Secondary DNS para ...
            </para>
        </sect3>
      </sect2>
      <sect2 id="dns-references" status="writing">
        <title>References</title>
          <para>
            References para ...
          </para>
      </sect2>
    </sect1>
	<sect1 id="cups" status="help">
		<title>CUPS - Print Server</title>
          <para>
            CUPS para ...
          </para>
      <sect2 id="cups-installation" status="help">
        <title>Installation</title>
          <para>
            Installation para ...
          </para>
      </sect2>
      <sect2 id="cups-configuration" status="help">
        <title>Configuration</title>
          <para>
            Configuration para ...
          </para>
      </sect2>
    </sect1>
	<sect1 id="http" status="review">
		<title>HTTP - Apache2 Web Server</title>
      <para>Apache is the most commonly used Web Server on Linux systems. Web Servers are used
          to serve Web Pages requested by client computers. Clients typically request and view
          Web Pages using Web Browser applications such as <application>Firefox</application>,
              <application>Opera</application> or <application>Mozilla</application>.</para>
      <para>Users enter a Uniform Resource Locator (URL) to point to a Web server by means of
          its Fully Qualified Domain Name (FQDN) and a path to the required resource. For example, to view the home page of
          the <ulink url="&ubuntu-web;">Ubuntu Web site</ulink> a user will enter only the FQDN. To request specific information about 
              <ulink url="&ubuntu-paidsupport;">paid
              support</ulink> a user will enter the FQDN followed by a path.</para>
      <para>The most common protocol used to transfer Web pages is the Hyper Text Transfer
          Protocol (HTTP). Protocols such as Hyper Text Transfer Protocol over Secure Sockets Layer (HTTPS), and
          File Transfer Protocol (FTP), a protocol for uploading and downloading files, are also
          supported.</para>
      <para>Apache Web Servers are often used in combination with the <application>MySQL</application>
          database engine, the HyperText Preprocessor (<application>PHP</application>), 
          scripting language, and other popular scripting languages such as
              <application>Python</application> and <application>Perl</application>. This
          configuration is termed LAMP (Linux, Apache, MySQL and Perl/Python/PHP) and forms a
          powerful and robust platform for the development and deployment of Web-based
          applications.</para>
<sect2 id="http-installation" status="review">
  <title>Installation</title>
          <procedure><step>
                  <para>The Apache2 web server is available in Ubuntu
                  Linux. This section explains howto install
                  Apache2 in Ubuntu Linux.</para></step>
          </procedure>
      <variablelist>
          <varlistentry>
              <term>Packages:</term>
              <listitem>
                  <para><application>apache2</application></para>
                  <para><application>apache2-common</application></para>
              </listitem>
          </varlistentry>
          <varlistentry>
              <term>Installation:</term>
              <listitem>
                  <para>At the prompt enter the following command to install
                          <application>apache2</application> and
                          <application>apache2-common</application>:</para>
                  <para>
                      <command>sudo apt-get install apache2 apache2-common</command>
                  </para>
              </listitem>
          </varlistentry>
          
          </variablelist>
      </sect2>
      <sect2 id="http-configuration" status="review">
        <title>Configuration</title>
          <para>
          Apache is configured by placing directives in plain text
          configuration files. The main configuration file is usually
          called apache2.conf. The location of this file is set at
          compile-time, but may be overridden with the -f  command line
          flag. In addition, other configuration files may be added
          using the Include  directive, and wildcards can be used to
          include many configuration files. Any directive may be placed
          in any of these configuration files. Changes to the main
          configuration files are only recognized by Apache2 when it is
          started or restarted.</para>

          <para>The server also reads a file containing mime document types;
          the filename is set by the TypesConfig directive, and is
          mime.types by default.</para>

          <para>The default Apache2 configuration file is /etc/apache2/apache2.conf.
          You can edit this file to configure the Apache2 server. You can
          configure the port number, document root, modules, log files, 
          virutal hosts, etc.
          </para>
        <sect3 id="http-basic-settings" status="review">
          <title>Basic Settings</title>
            <para>
             This section explains Apache2 server essential configuration
             parameters. You must refer <ulink
             url="http://httpd.apache.org/docs/2.0/">Apache2
             Documentation</ulink> for more details.</para>

             <itemizedlist>

             <listitem><para>
             Enter a valid fully qualified domain name that you have the
             right to use in the Server Name text area. This option
             corresponds to the ServerName  directive in apache2.conf.
             The ServerName directive sets the hostname of the Web
             server.
            </para></listitem>

             <listitem><para>Enter the email address of the person who maintains the
             Web server in the Webmaster email address text area. This
             option corresponds to the ServerAdmin  directive in
             apache2.conf. If you configure the server's error pages to
             contain an email address, this email address will be used
             so that users can report a problem by sending email to the
             server's administrator. The default value is
             root@localhost.</para></listitem>

             <listitem><para>Enter the port number of Apache2 server. 
             This option corresponds to the Listen  directive in
             apache2.conf. The default value is 80. 
             </para></listitem>
            </itemizedlist>

            <tip>
            <para>
            If you set the server to listen to a port under 1024, you
            must be root to start it. For port 1024 and above,
            <application>apache2</application> can be started as a
            regular user.
            </para>
            </tip>
        </sect3>
        <sect3 id="default-settings" status="review">
          <title>Default Settings</title>
            <para>
             This section explains configuration of the Apache2 server
             default settings.  For example, if you add a virtual host, 
             the settings you configure for the virtual host take
             precedence for that virtual host. For a directive not
             defined within the virtual host settings, the default
             value is used.
            </para>

            <itemizedlist>
            <listitem>
            <para>
             The DirectoryIndex is the default page served by the
             server when a user requests an index of a directory by
             specifying a forward slash (/) at the end of the directory
             name.</para>

             <para>For example, when a user requests the page
             http://www.example.com/this_directory/, they are going to
             get either the DirectoryIndex page if it exists, or a
             server-generated directory list. The server will try to
             find one of the files listed in the DirectoryIndex
             directive and will return the first one it finds. If it
             does not find any of these files and if Options Indexes is
             set for that directory, the server will generate and
             return a list, in HTML format, of the subdirectories and
             files in the directory. 
            </para>
            </listitem>

            <listitem>
            <para>
             Use the Error Code section to configure Apache2 Server
             to redirect the client to a local or external URL in the
             event of a problem or error. This option corresponds to
             the ErrorDocument  directive.
            </para>
            </listitem>


            <listitem>
            <para>
             By default, the server writes the transfer log to the file
             /var/log/apache2/access.log. You can configure a custom
             log format. This option corresponds to LogFormat
             directive. The server writes the error log to the
             /var/log/apache2/error.log file. This option corresponds
             to the ErrorLog directive. The log level can be set using
             the LogLevel directive.
            </para>
            </listitem>

            <listitem>
            <para>
            You can configure the Default Directory Options for all
            directories. This option corresponds to Option directive
            within &lt;Directory&gt; directive. You can configure the
            following options:
            </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para><emphasis role="bold">ExecCGI</emphasis> - Allow
                    execution of CGI scripts. CGI scripts are not
                    executed if this option is not chosen.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Includes</emphasis> - Allow server-side includes.</para>
                </listitem>
                <listitem>
                    <para><emphasis
                    role="bold">IncludesNOEXEC</emphasis> - Allow server-side includes,
                    but disable the #exec and #include commands in CGI
                    scripts.</para>
                </listitem>
                <listitem>
                    <para>
                    <emphasis role="bold">Indexes</emphasis> - Display a formatted list of the
                    directory's contents, if no DirectoryIndex (such as
                    index.html) exists in the requested directory.
                    </para>
                </listitem>
                <listitem>
                    <para>
                    <emphasis role="bold">Multiview</emphasis> - Support content-negotiated multiviews;
                    this option is disabled by default.
                    </para>
                </listitem>
                <listitem>
                    <para>
                    <emphasis
                    role="bold">SymLinksIfOwnerMatch</emphasis> - Only follow symbolic links
                    if the target file or directory has the same owner
                      as the link.
                    </para>
                </listitem>
            </itemizedlist>

            </listitem>
            </itemizedlist>
        </sect3>
        <sect3 id="virtual-hosts-settings" status="review">
          <title>Virtual Hosts Settings</title>
            <para>
Virtual hosts allow you to run different servers for different IP addresses, different host names, or different ports on the same machine. For example, you can run the website for http://www.example.com and http://www.anotherexample.com on the same Web server using virtual hosts. This option corresponds to the &lt;VirtualHost&gt; directive for the default virtual host and IP based virtual hosts. It corresponds to the &lt;NameVirtualHost&gt;  directive for a name based virtual host.
</para>

<para>
The directives set for a virtual host only apply to that particular virtual host. If a directive is set server-wide and not defined within the virtual host settings, the default setting is used. For example, you can define a Webmaster email address and not define individual email addresses for each virtual host. 
    </para>
 <para>Edit the Document Root Directory value to the directory that contains the root document (such as index.html) for the virtual host. This option corresponds to the DocumentRoot  directive within the  &lt;VirtualHost&gt; directive. The default DocumentRoot is /var/www.</para>

 <para>The Webmaster email address corresponds to the ServerAdmin  directive within the VirtualHost  directive. This email address is used in the footer of error pages if you choose to show a footer with an email address on the error pages.</para>

        </sect3>
        <sect3 id="server-settings" status="review">
          <title>Server Settings</title>
            <para>
This section explains howto configure basic server settings.</para>
                    <para><emphasis role="bold">LockFile</emphasis> - The Lock File value corresponds to the LockFile  directive. This directive sets the path to the lockfile used when the server is compiled with either USE_FCNTL_SERIALIZED_ACCEPT or USE_FLOCK_SERIALIZED_ACCEPT. It must be stored on the local disk. It should be left to the default value unless the logs directory is located on an NFS share. If this is the case, the default value should be changed to a location on the local disk and to a directory that is readable only by root. </para>

<para><emphasis role="bold">PidFile</emphasis> - The PID File value corresponds to the PidFile directive. This directive sets the file in which the server records its process ID (pid). This file should only be readable by root. In most cases, it should be left to the default value.</para>

<para><emphasis role="bold">User</emphasis> - The User value corresponds to the User directive. It sets the userid used by the server to answer requests. This user settings determine the server's access. Any files inaccessible to this user will also be inaccessible to your website's visitors. The default for User is www-data.  </para>
            <warning>
            <para>
 Unless you know exactly what you are doing, do not set the User directive to root. Using root as the User will create large security holes for your Web server.  </para>
            </warning>
 <para>The Group value corresponds to the Group  directive. The Group directive is similar to the User directive. Group sets the group under which the server will answer requests. The default group is also www-data.</para>

        </sect3>
        <sect3 id="apache-modules" status="review">
          <title>Apache Modules</title>
              <para>

              Apache is a modular server. This implies that only the most
              basic functionality is included in the core server. Extended
              features are available through modules which can be loaded
              into Apache. By default, a base set of modules is included in
              the server at compile-time. If the server is compiled to use
              dynamically loaded  modules, then modules can be compiled
              separately, and added at any time using the LoadModule
              directive. Otherwise, Apache must be recompiled to add or
              remove modules. Configuration directives may be conditionally
	      included on the presence of a particular module by enclosing
              them in an &lt;IfModule&gt; block.

              You can install additional Apache2 modules, and use them
              with your web server. You can install Apache2
              modules using the <command>apt-get</command>
              command. For example, to install the Apache2 module
              for MYSQL authentication, you can run the
                following command:</para>
                
                <para>
                  <command>sudo apt-get install apache2 apache2-common</command>
                </para>
                <para>
                Once you install the module, the module will
                be available under
                /etc/apache2/mods-available directory. You can use
              the <command>a2enmod</command> command to
              enable a module. You can use
              the <command>a2dismod</command> command to
              disable a module. Once you enable the module,
              the module will be available under
              the /etc/apache2/mods-enabled directory.
              </para>
        </sect3>
      </sect2>
      <sect2 id="https-configuration" status="review">
        <title>HTTPS Configuration</title>
          <para>
           The <application>mod_ssl</application> module adds
           an important feature to the Apache2 server - the ability to
           encrypt communications.  Thus, when your browser is
           communicating using SSL encryption, the
           https:// prefix is used at the beginning of the Uniform
           Resource Locator (URL) in the browser navigation bar.
          </para>

          <para>
          The <application>mod_ssl</application> module is available in
          <application>apache2-common</application> package. If you have
          installed this package, you can run the following command to
          enable <application>mod_ssl</application> module:
          </para>

          <para>
            <command>sudo a2enmod ssl</command>
          </para>
        <sect3 id="certificates-and-security" status="review">
          <title>Certificates and Security</title>
            <para>
              To set up your secure server, use public cryptography to
              create a public and private key pair. In most cases, you
              send your certificate request (including your public key),
              proof of your company's identity, and payment to a
              Certificate Authority (CA). The
              CA verifies the certificate request and your identity, and
              then sends back a certificate for your secure server. 
            </para>
             <para>
             Alternatively, you can create your own self-signed
             certificate. Note, however, that self-signed certificates
             should not be used in most production environments.
             Self-signed certificates are not automatically accepted by
             a user's browser users are prompted by the browser to
             accept the certificate and create the secure connection.
             </para>

             <para>
              Once you have a self-signed certificate or a signed
              certificate from the CA of your choice, you need to
              install it on your secure server.
             </para>
        </sect3>
        <sect3 id="types-of-certificates" status="review">
          <title>Types of Certificates</title>
            <para>
             You need a key and a certificate to operate your secure
             server which means that you can either generate a
             self-signed certificate or purchase a CA-signed
             certificate.  A CA-signed certificate provides two important
              capabilities for your server:
            </para>

            <itemizedlist>
            <listitem>
            <para>
            Browsers (usually) automatically recognize the certificate
            and allow a secure connection to be made, without prompting
            the user.
            </para>
            </listitem>
            <listitem>
            <para>
             When a CA issues a signed certificate, they are
             guaranteeing the identity of the organization that is
             providing the webpages to the browser.
            </para>
            </listitem>
            </itemizedlist>

            <para>
             Most Web browsers that support SSL have a list of CAs whose
             certificates they automatically accept. If a browser
             encounters a certificate whose authorizing CA is not in the
             list, the browser asks the user to either accept or decline
             the connection.
            </para>
            <para>
             You can generate a self-signed certificate for your secure server, but
            be aware that a self-signed certificate does not provide the same
            functionality as a CA-signed certificate. A self-signed certificate is
            not automatically recognized by most Web browsers, and a self-signed
            certificate does not provide any guarantee concerning the identity of
            the organization that is providing the website. A CA-signed certificate
            provides both of these important capabilities for a secure server. 
            The process of getting a certificate from a CA is fairly
            easy. A quick overview is as follows:
            </para>

            <orderedlist>
            <listitem>
               <para>Create an encryption private and public key
                pair.</para>
            </listitem>
            <listitem>
                 <para>Create a certificate request based on the public key. The
              certificate request contains information about your server and the
              company hosting it.</para>
            </listitem>
            <listitem>
                 <para>Send the certificate request, along with documents proving your
              identity, to a CA. We cannot tell you which certificate authority to
              choose. Your decision may be based on your past experiences, or on the
              experiences of your friends or colleagues, or purely on monetary
              factors.</para>

                    <para>Once you have decided upon a CA, you need to follow the
              instructions they provide on how to obtain a certificate
              from them.</para>
            </listitem>
            <listitem>
               <para>When the CA is satisfied that you are indeed who you claim to be,
            they send you a digital certificate.</para>
            </listitem>
            <listitem>
               <para>Install this certificate on your secure server, and begin handling
            secure transactions. </para>
            </listitem>
            </orderedlist>

            <para>Whether you are getting a certificate from a CA or generating your own
            self-signed certificate, the first step is to generate a key.
            </para>
        </sect3>
        <sect3 id="generating-a-csr" status="review">
          <title>Generating a Certificate Signing Request (CSR)</title>
            <para>
            To generate the Certificate Signing Request (CSR), you should create your
            own key. You can run the following command to create the
            key:
            </para>

            <para><command>openssl genrsa -des3 -out server.key
            1024</command></para>

<programlisting>
Generating RSA private key, 1024 bit long modulus
.....................++++++
.................++++++
unable to write 'random state'
e is 65537 (0x10001)
Enter pass phrase for server.key:
</programlisting>

        <para>
        You can now enter your passphrase. For best security, it should
        atleast contain eight characters. It should include numbers
        and/or punctuation and not be a word in a dictionary. Also
        remember that your passphrase is case sensitive. 
        </para>

        <para>
        Re-type the passphrase to verify. Once you have re-typed it
        correctly, the server key is generated and stored in
        <command>server.key</command> file.
        </para>

        <warning>
        <para>
        You can also run your secure webserver without a passphrase.
        This is convenient because you will not need to enter the
        passphrase every time you start your sercure webserver. But, it
        is highly insecure and a compromise of the key means a
        compromise of the server as well.
        </para>
        </warning>

        <para>
        In any case, you can choose to run your secure webserver without
        a passphrase by leaving out the -des3 switch in the generated
        phase or by issuing the following command:
        </para>

        <para><command>openssl rsa -in server.key -out
        server.key.insecure</command></para>

        <para>
        Once you run the above command, the insecure key will be stored
        in <command>server.key.insecure</command> file. You can use this
        file to generate the CSR without passphrase.
        </para>

        <para>
        To create the CSR you can run the following command:
        </para>

        <para><command>openssl req -new -key server.key -out server.csr</command></para>

        <para>It will prompt you enter the passphrase. If you enter the
        correct passphrase, it will prompt you to enter Company Name,
        Site Name, Email Id, etc. Once you enter all these details, your
        CSR will be created and it will be stored in
        <command>server.csr</command> file. You can submit this CSR file
        to a CA for processing. The CAN will use this CSR file and issue
        the certificate. On the other hand, you can create self-signed
        certificate using this CSR.</para>

        </sect3>
        <sect3 id="creating-a-self-signed-certificate" status="review">
          <title>Creating a Self Signed Certificate</title>
            <para>
            To create the self signed cerficiate, you can run the
            following command:
            </para>

            <para>
            <command>openssl x509 -req -days 365 -in server.csr -signkey
            server.key -out server.crt</command>
            </para>

            <para>The above command will prompt you to enter the
            passphrase. Once you enter the correct passphrase, your
            certificate will be created and it will be stored in
            <command>server.crt</command> file.  </para>
        <warning>
        <para>
            If your secure server is to be used in a production environment, you
            probably need a CA-signed certificate.  You are not
            recommended to use self signed certificate.
        </para>
        </warning>
        </sect3>
        <sect3 id="installing-the-certificate" status="review">
          <title>Installing the Certificate</title>

            <para>You can install the key file
            <command>server.key</command> and certificate file
            <command>server.crt</command> or the certificate file issued
            by your CA by running following commands:
            </para>

            <para><command>sudo cp server.key /etc/apache2/ssl/</command></para>
            <para><command>sudo cp server.crt /etc/apache2/ssl/</command></para>
            <para><command>sudo chmod 400 /etc/apache2/ssl/server.key
            /etc/apache2/ssl/server.crt</command></para>

            <para>
            You should add the following four lines to
            <command>/etc/apache2/sites-available/default</command>
            file. You should place them in VirtualHost section. They
            should be placed under DocumentRoot line:
            </para>
<programlisting>
SSLEngine on

SSLOptions +FakeBasicAuth +ExportCertData +CompatEnvVars +StrictRequire

SSLCertificateFile /etc/apache2/ssl/server.crt
SSLCertificateKeyFile /etc/apache2/ssl/server.key
</programlisting>
          
            <para>
            HTTPS listens on port number 443. You should add the
            following line to <command>/etc/apache2/ports.conf</command>
            file:
            </para>
<programlisting>
Listen 443
</programlisting>

        </sect3>
        <sect3 id="accessing-the-server" status="review">
          <title>Accessing the Server</title>
            <para>
            Once you install your certificate, you should restart your
            webserver. You can run the following command to
            restart your webserver:
            </para>
            <para><command>sudo /etc/init.d/apache2
            restart</command></para>

        <note><para>
        You should remember and enter the passphrase every time you
        start your secure webserver.
        </para></note>

            <para>It will prompt you to enter the passphrase. Once you
            enter the correct passphrase, the secure webserver will be
            started. You can access the secure server pages by typing
            <command>https://your_hostname/url/</command> in your
            browser navigation bar.</para>

        </sect3>
      </sect2>
      <sect2 id="http-references" status="review">
        <title>References</title>
          <para>
          <ulink url="http://httpd.apache.org/docs/2.0/">Apache2
          Documentation</ulink>
          </para>
          <para>
          <ulink url="http://www.modssl.org/docs/">Mod SSL
          Documentation</ulink>
          </para>
      </sect2>
    </sect1>
	<sect1 id="squid" status="writing">
		<title>SQUID - Proxy Server</title>
          <para>
            SQUID para ...
          </para>
      <sect2 id="squid-installation" status="writing">
        <title>Installation</title>
          <para>
            Installation para ...
          </para>
      </sect2>
      <sect2 id="squid-configuration" status="writing">
        <title>Configuration</title>
          <para>
            Configuration para ...
          </para>
      </sect2>
    </sect1>
	<sect1 id="version-control-system" status="writing">
		<title>Version Control System</title>
          <para>
Version control is the art of managing changes to information. It has long been a critical tool for programmers, who typically spend their time making small changes to software and then undoing those changes the next day. But the usefulness of version control software extends far beyond the bounds of the software development world. Anywhere you can find people using computers to manage information that changes often, there is room for version control.</para>
<para>
          </para>
      <sect2 id="subversion" status="writing">
        <title>Subversion</title>
          <para>
Subversion is an open source version control system. Using Subversion, you can record the history of source files and documents. It manages files and directories over time. A tree of files is placed into a central repository. The repository is much like an ordinary file server, except that it remembers every change ever made to files and directories.
          </para>
        <sect3 id="subversion-installation" status="writing">
          <title>Installation</title>
            <para>
To access Subversion repository using HTTP protocol, you must install and configure web server. Apache2 is proven to work with Subversion. Please refer HTTP subsection in Apache2 section to install and configure Apache2 web server.  To access Subversion repository using HTTPS protocol, you must install and configure digital certificate in your Apache 2 web server. Please refer HTTPS subsection in Apache2 section to install and configure the digital certificate.
						</para>
						<para>
		To install Subversion, you run:
            </para>
				<para>
	    <command>sudo apt-get install subversion libapache2-svn</command>
			</para>

        </sect3>
        <sect3 id="subversion-configuration" status="review">
          <title>Server Configuration</title>
            <para>
	This step assumes you have installed above mentioned packages on your system. This section explains how to create Subversion repository and access the project.</para>
			<sect4 id="create-svn-repos" status="review">
				<title>Create Subversion Repository</title>
<para>The Subversion repository can be created using the following command:</para>

  <para><command>svnadmin create /path/to/repos/project</command></para>
			</sect4>

        </sect3>
        <sect3 id="access-methods" status="review">
          <title>Access Methods</title>
<para>Subversion repositories can be accessed (checkout) through many different methods-on local disk, or through various network protocols. A repository location, however, is always a URL. The table describes how different URL schemas map to the available access methods.</para>
				<table><title>Access Methods</title>

					<tgroup cols="2">
						<colspec colname="1"/>
						<colspec colname="2"/>
						<thead>
							<row>
								<entry><para>Schema</para></entry>
								<entry><para>Access Method</para></entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry><para>file:///</para></entry>
								<entry><para>direct repository access (on local disk)</para></entry>
							</row>
							<row>
								<entry><para>http:///</para></entry>
								<entry><para>Access via WebDAV protocol to Subversion-aware Apache2 web server</para></entry>
							</row>
							<row>
								<entry><para>https:///</para></entry>
								<entry><para>Same as http://, but with SSL encryption</para></entry>
							</row>
							<row>
								<entry><para>svn:///</para></entry>
								<entry><para>Access via custom protocol to an svnserve server</para></entry>
							</row>
							<row>
								<entry><para>svn+ssh:///</para></entry>
								<entry><para>Same as svn://, but through an SSH tunnel</para></entry>
							</row>
						</tbody>
					</tgroup>
				</table>

				<para>
In this section, we will see howto configure Subversion for all these access methods. Here, we cover the basics. For more advanced usage details, you are always recommended to refer the <ulink url="http://svnbook.red-bean.com/">svn book</ulink>.
				</para>
			<sect4 id="direct-repos-access" status="review">
				<title>Direct repository access (file://)</title>
<para> This is the simplest of all access methods. It does not require any Subversion server process to be running. This access method is used to access Subversion from the same machine. The syntax is as follows:</para>

  <para><command>svn co file:///path/to/repos/project</command></para>
  <para>or</para>
	<para><command>svn co file://localhost/path/to/repos/project</command></para>
	<note>
		<para>If you do not specify the hostname, you must use three forward slashes (///). If you specify the hostname, you must use two forward slashes (//).</para>
	</note>
		<para>The repository permission is depend on filesystem permission. If the user has read/write permission, he can checkout/commit the changes to the repository.</para>
			</sect4>
			<sect4 id="access-via-webdav" status="review">
				<title>Access via WebDAV protocol (http://)</title>
<para> To access the Subversion repository via WebDAV protocol, you must configure your Apache 2 web server. You must add the following snippet in your /etc/apache2/apache2.conf file:</para>

	<programlisting> &lt;Location /svn&gt;
  DAV svn
  SVNPath /path/to/repos
  AuthType Basic
  AuthName "Your repository name"
  AuthUserFile /etc/subversion/passwd
  &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;
  Require valid-user
  &lt;/LimitExcept&gt;
  &lt;/Location&gt; </programlisting>
  <para>Next, you must create /etc/subversion/passwd file. This file contains user authentication details. To add an entry, ie.. to add a user, you can run the following command:</para>
	<para><command>htpasswd2 /etc/subversion/passwd user_name</command></para>
	<para>It prompts you to enter the password. Once you enter the password, the user is added. Now, to access the repository you can run the following command:</para>
	<warning>
		<para>
			The password is transmitted as plain text. If you are worried about password snooping, you are advised to use SSL encryption. For details, please refer next section.
		</para>
	</warning>
			</sect4>
			<sect4 id="access-via-webdav-with-ssl" status="review">
				<title>Access via WebDAV protocol with SSL encryption (https://)</title>
					<para> 
						Accessing Subversion repository via WebDAV protocol with SSL encryption (https://) is similar to http:// except you must install and configure the digital certificate in your Apache2 web server.
					</para>

					<para>
						You can install a digital certificate issued by Signing authority like Verisign. Alternatively, you can install your own self signed certificate.
					</para>
					<para>
						This step assumes you have installed and configured digital certificate in your Apache 2 web server. Now to access Subversion repository please refer the above section! Yeah, the access methods are exactly the same except the protocl. You must use https:// to access the Subversion repository.
					</para>

			</sect4>
			<sect4 id="access-via-custom-protocol" status="review">
				<title>Access via custom protocol (svn://)</title>
					<para> 
					Once the Subversion repository is created, you can configure the access control. You can edit /path/to/repos/project/conf/svnserve.conf file to configure the access control.  For example, to setup authentication you can uncomment the following lines in the configuration file: </para>
					<programlisting># [general]
# password-db = passwd</programlisting>

					<para>
					fter uncommenting the above lines, you can maintain the user list in passwd file. So, edit the file passwd in the same directory and add new user. The syntax is as follows:
					</para>
					<programlisting>username = password</programlisting>
					<para>
					For more details, please refer the file.
					</para>

					<para>
					Now, to access Subversion via svn:// custom protocol either from the same machine or different machine, you can run svnserver using svnserve command. The syntax is as follows:
					</para>
					<programlisting>$ svnserve -d --foreground -r /path/to/repos
# -d -- daemon mode
# --foreground -- run in foreground (useful for debugging)
# -r -- root of directory to serve

For more usage details, please refer,
$ svnserve --help</programlisting>

					<para>Once you run this command, Subversion starts listening on default port (3690). To access the project repository, you must run the following command: </para>
					<para><command>svn co svn://hostname/project project --username user_name</command></para>
					<para>Based on server configuration, it prompts for password. Once it is authenticated, it checks out the code from Subversion repository.  To synchronize the project repository with the local copy, you can run <command>update</command> sub-command. The syntax is as follows:</para>
					<para><command>cd project_dir ; svn update</command></para>
					<para>For more details about using each Subversion sub-command, you can refer the manual. For example, to learn more about co (checkout) command, please run:</para>
					<para><command>svn co help</command></para>

			</sect4>
			<sect4 id="access-via-custom-protocol-with-ssl" status="review">
				<title>Access via custom protocol with SSL encryption (svn+ssh://)</title>
					<para> The configuration and server process is same as svn:// method. For details, please refer the above section. This step assumes, you have followed the above step and run Subversion server using svnserve command.</para>

					<para>It is also assumed that the ssh server is running in that machine and it is allowing incoming connections. To confirm, please try to login to that machine using ssh. If you can login, then everything is perfect. If you cannot login, please address it before continuing further.</para>

					<para>svn+ssh:// protocol is used to access Subversion repository using SSL encryption. As you know, the data transfer is encrypted. To access the project repository, you must run the following command: </para>

					<note><para> You must use full path (/path/to/repos/project) to access Subversion repository using this access method. </para></note>
					<para>
					Based on server configuration, it prompts for password. You must enter the password you use to login via ssh. Once it is authenticated, it checks out the code from Subversion repository.
					</para>
			</sect4>
			</sect3>

      </sect2>
      <sect2 id="cvs-server" status="writing">
        <title>CVS Server</title> 
          <para>
            CVS Server para ...
          </para>
        <sect3 id="cvs-installation" status="writing">
          <title>Installation</title>
            <para>
              Installation para ...
            </para>
        </sect3>
        <sect3 id="cvs-configuration" status="writing">
          <title>Configuration</title>
            <para>
              Configuration para ...
            </para>
        </sect3>
      </sect2>
      <sect2 id="version-control-ref" status="writing">
        <title>References</title> 
				<para><ulink url="http://subversion.tigris.org/">Subversion Home Page</ulink></para>
				<para><ulink url="http://svnbook.red-bean.com/">Subversion Book</ulink></para>
      </sect2>
    </sect1>
	<sect1 id="databases" status="review">
		<title>Databases</title>
          <para>
            Ubuntu Linux provides two Database servers. They are:
            <itemizedlist spacing="compact">
                <listitem>
                    <para><application><trademark>MySQL</trademark></application></para>
                </listitem>
                <listitem>
                    <para><application>PostgreSQL</application></para>
                </listitem>
            </itemizedlist>
            They are available in the main repository. This section
            explain how to install and configure these database
            servers.
          </para>
      <sect2 id="mysql" status="review">
        <title>MySQL</title>
          <para>
          MySQL is a fast, multi-threaded, multi-user and robust SQL
          database server. It is intended for
          mission-critical, heavy-load production systems as well as
          for embedding into mass-deployed software.
          </para>

        <sect3 id="mysql-installation" status="review">
          <title>Installation</title>
            <para>
            To install MySQL, you can run the following command in the
            command prompt:
            </para>

            <para>
            <command>sudo apt-get install mysql-server mysql-client</command>
            </para>

            <para>
            Once the installation is complete, the MySQL server should be
            started automatically. You can run the following command to
            check whether MySQL server is running:
            </para>

            <para>
            sudo netstat -tap | grep mysql
            </para>

            <para>
            When you run this command, you should see the following line
            or something similar:
            </para>

<programlisting>
tcp        0      0 localhost.localdomain:mysql           *:* LISTEN -
</programlisting>
	<para>If the server is not running correctly, you can type the following command to start it:</para>
            <para>
<!--check this command -->
            <command>sudo /etc/init.d/mysql restart</command>
            </para>

        </sect3>
        <sect3 id="mysql-configuration" status="review">
          <title>Configuration</title>
            <para>
            By default, the administrator password is not set. Once you
            install MySQL, the first thing you must do is to configure
            the MySQL administrator password. To do this, run the following commands:
            </para>
            <para>
            <command>sudo mysqladmin -u root password newrootsqlpassword</command>
            </para>
            <para>
            <command>sudo mysqladmin -u root -h localhost password newrootsqlpassword</command>
            </para>

            <para>
            You can edit /etc/mysql/my.cnf file to configure the basic
            settings, log file, port number, etc. Refer to
            /etc/mysql/my.cnf file for more details.
            </para>
        </sect3>
      </sect2>
      <sect2 id="postgresql" status="review">
        <title>PostgreSQL</title> 
          <para>
          PostgreSQL is an object-relational database system that has
          the features of traditional commercial database systems with
          enhancements to be found in next-generation DBMS systems.
          </para>
        <sect3 id="postgresql-installation" status="review">
          <title>Installation</title>
            <para>
            To install PostgreSQL, run the following command in the
            command prompt:
            </para>

            <para>
            <command>sudo apt-get install postgresql</command>
            </para>

            <para>
            Once the installation is complete, you should configure
            PostgreSQL server based on your needs, although the default
            configuration is viable.</para>
            
        </sect3>
        <sect3 id="postgresql-configuration" status="review">
          <title>Configuration</title>
            <para>By default, connection via TCP/IP is disabled.
            PostgreSQL supports multiple client authentication methods.
            By default, IDENT authentication method is used. You are
            recommended to refer the PostgreSQL Administrator's Guide for
            details.</para> <!-- link to this? -->
            
            <para>The following discussion assumes that you wish to enable TCP/IP connections and
            use MD5 method for client authentication. PostgreSQL configuration files are stored in the
            <emphasis role="italics">/etc/postgresql/&lt;version&gt;/main</emphasis>
            directory. For example, if you install PostgreSQL 7.4, the
            configuration files are stored in the
            <emphasis role="italics">/etc/postgresql/7.4/main</emphasis> directory.
            </para>
            
            <tip>
            <para>
             To configure <emphasis role="italics">ident</emphasis>
             authentication, add entries to the <emphasis
             role="italics">/etc/init.d/postgresql/7.4/main/pg_ident.conf</emphasis>
             file.
            </para>
            </tip>

            <para>To enable TCP/IP connections, edit the file <emphasis
             role="italics">/etc/postgresql/7.4/main/postgresql.conf</emphasis></para>

            <para>Locate the line <emphasis role="italics">#tcpip_socket =
            false</emphasis> and change it to
            <emphasis role="italics">tcpip_socket =
            true</emphasis>. You may
            also edit all other parameters, if you know what you are doing! For details, refer to the configuration file or to the PostgreSQL documentation.
            </para>

            <para>By default, the user credentials are not set for
            <emphasis role="italics">MD5</emphasis> client
            authentication. So, first it is necessary to configure the PostgreSQL server to use
            <emphasis role="italics">trust</emphasis> client
            authentication, connect to the database,
            configure the password and revert the configuration back to use
            <emphasis role="italics">MD5</emphasis> client authentication.
            To enable <emphasis role="italics">trust</emphasis> client
            authentication, edit the  file <emphasis
            role="italics">/etc/postgresql/7.4/main/pg_hba.conf</emphasis></para>

            <para>Comment out all the existing lines which use
            <emphasis role="italics">ident</emphasis> and
            <emphasis role="italics">MD5</emphasis>
            client authentication and add the following
            line:</para>
<programlisting>
local   all         postgres                          trust sameuser
</programlisting>

            <para>Then, run the following command to
            start PostgreSQL server:
            </para>
            <para><command>sudo /etc/init.d/postgresql
            start</command></para>

            <para>Once the PostgreSQL server is successfully started, run the following command to connect to the default
            PostgreSQL template database</para>

            <para><command>psql -U postgres -d
            template1</command></para>

            <para>The above command connects to PostgreSQL
            database <emphasis role="italics">template1</emphasis> as user
            <emphasis role="italics">postgres</emphasis>. Once you connect to the PostgreSQL
            server, you will be in the SQL prompt. You can run the
            following SQL command at the prompt to configure the
            password for the user <emphasis
            role="italics">postgres</emphasis>.</para>

            <para><command>template1=# ALTER USER postgres with
            encrypted password 'your_password';</command></para>

            <para>After configuring the password, edit the file
            <emphasis
            role="italics">/etc/postgresql/7.4/main/pg_hba.conf</emphasis> to use
            <emphasis role="italics">MD5</emphasis> authentication:</para>
            <para>Comment the recently added <emphasis
            role="italics">trust</emphasis> line and add the following
            line: </para>

<programlisting>
local   all         postgres                          md5 sameuser
</programlisting>
            <warning>
            <para>
             The above configuration is not complete by any means. You are
             recommended to refer to PostgreSQL Administrator's Guide to
             configure more parameters.
            </para>
            </warning>
        </sect3>
      </sect2>
    </sect1>
	<sect1 id="email-services" status="writing">
		<title>Email Services</title>
          <para>
            Email Services para ...
          </para>
      <sect2 id="postfix" status="writing">
        <title>PostFix</title>
          <para>
            PostFix is a default email server in Ubuntu Linux. It
            attempts to be fast, easy to administer and secure. It is
            compatible with sendmail email server.
          </para>
        <sect3 id="postfix-installation" status="writing">
          <title>Installation</title>
            <para>
              Installation para ...
            </para>
        </sect3>
        <sect3 id="postfix-configuration" status="writing">
          <title>Configuration</title>
            <para>
              Configuration para ...
            </para>
        </sect3>
      </sect2>
      <sect2 id="courier-imap-server" status="writing">
        <title>Courier IMAP Server</title> 
          <para>
            Courier IMAP Server para ...
          </para>
        <sect3 id="courier-installation" status="writing">
          <title>Installation</title>
            <para>
              Installation para ...
            </para>
        </sect3>
        <sect3 id="courier-configuration" status="writing">
          <title>Configuration</title>
            <para>
              Configuration para ...
            </para>
        </sect3>
      </sect2>
      <sect2 id="mailman" status="writing">
        <title>Mailman</title> 
          <para>
            Mailman para ...
          </para>
        <sect3 id="mailman-installation" status="writing">
          <title>Installation</title>
            <para>
              Installation para ...
            </para>
        </sect3>
        <sect3 id="mailman-configuration" status="writing">
          <title>Configuration</title>
            <para>
              Configuration para ...
            </para>
        </sect3>
      </sect2>
      <sect2 id="newsgroups" status="help">
        <title>Newsgroups (NNTP)</title> 
          <para>
            Newsgroups para ...
          </para>
        <sect3 id="nntp-installation" status="help">
          <title>Installation</title>
            <para>
              Installation para ...
            </para>
        </sect3>
        <sect3 id="nntp-configuration" status="help">
          <title>Configuration</title>
            <para>
              Configuration para ...
            </para>
        </sect3>
      </sect2>
    </sect1>
	</chapter>
