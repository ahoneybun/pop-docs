<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % genericent SYSTEM "../../libs/generic.ent">
%genericent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % gnome-menus-C SYSTEM "../../../ubuntu/libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "&EnglishAmerican;">
]>
<chapter id="virtualization" status="review">
  <title>Virtualization</title>
  <para>
  Virtualization is being adopted in many different environments and situations. If you are a developer, 
  virtualization can provide you with a contained environment where you can safely do almost any sort of 
  development safe from messing up your main working environment. If you are a systems administrator, you 
  can use virtualization to more easily separate your services and move them around based on demand.
  </para>
  <para>
  The default virtualization technology supported in Ubuntu is <application>KVM</application>, a technology 
  that takes advantage of virtualization extensions built into Intel and AMD hardware.  
  For hardware without virtualization extensions <application>Xen</application> and 
  <application>Qemu</application> are popular solutions.
  </para>
  <sect1 id='libvirt' status='review'>
    <title>libvirt</title>
    <para>
    The <application>libvirt</application> library is used to interface with different
    virtualization technologies.  
    Before getting started with <application>libvirt</application> it is best to make sure your hardware supports the necessary 
    virtualization extensions for <application>KVM</application>.  Enter the following from a terminal prompt:
    </para>
<screen> <command>egrep '(vmx|svm)' /proc/cpuinfo</command>
</screen>
    <para>
    If nothing is printed, it means that your cpu does <emphasis>not</emphasis> support hardware virtualization.
    </para>
    <note>
      <para>
      Virtualization may also need to be enabled in the BIOS.
      </para>
    </note>
    <sect2 id='libvirt-installation' status='review'>
      <title>Installation</title>
      <para>
      To install the necessary packages, from a terminal prompt enter:
      </para>
<screen>
<command>sudo apt-get install kvm libvirt-bin virt-viewer python-virtinst</command>
</screen>
      <para>
      After installing <application>libvirt-bin</application>, the user used to manage virtual machines will need to be added to 
      the <emphasis>libvirtd</emphasis> group.  Doing so will grant the user access to the advanced networking options.  
      </para>
      <para>
      In a terminal enter:
      </para>
<screen>
<command>sudo adduser $USERNAME libvirtd</command>
</screen>
      <note>
	<para>
	If the user chosen is the current user, you will need to log out and back in for the new group membership to take effect.
	</para>
      </note>
      <para>
      You can now use the <application>virt-install</application> utility to create a new virtual machine.  There are several
      options available to configure the virtual environment.  For example:
      </para>
<screen>
<command>virt-install -n web_devel -r 256 -f web_devel.img -s 4 -w bridge:vnet0 -c jeos.iso -p</command>
</screen>
      <itemizedlist>
        <listitem>
          <para>
          <emphasis>-n web_devel:</emphasis> the name of the new virtual machine will be <emphasis>web_devel</emphasis> in this example.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>-r 256:</emphasis> specifies the amount of memory the virtual machine will use.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>-f web_devel.img:</emphasis> indicates the path to the virtual disk which can be a file, partition, or logical volume.
          In this exmaple a file named <filename>web_devel.img</filename>.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>-s 4:</emphasis> the size of the virtual disk.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>-w bridge:vnet0:</emphasis> method used to connect the virtual machine to the host network.  This example uses the 
          bridge interface <emphasis>vnet0</emphasis>.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>-c jeos.iso:</emphasis> file to be used as a virtual CDROM.  The file can be either an ISO file or the path to the
          host's CDROM device.
          </para>
        </listitem>
        <listitem>
          <para>
          <emphasis>-p:</emphasis> creates the virtual machine as a <emphasis>paravirtualized</emphasis> guest. 
          </para>
        </listitem>
      </itemizedlist>
      <para>
      After launching <application>virt-install</application> the virtual machine's console will open and you will be taken through the 
      normal installation process for the guest operating system.
      </para>
    </sect2>
    <sect2 id="libvirt-management" status="review">
      <title>Virtual Machine Management</title>
      <sect3 id="virsh" status="review">
        <title>virsh</title>
        <para>
        There are several utilities available to manage virtual machines and <application>libvirt</application>.  
        The <application>virsh</application> utility can be used from the command line.  Some examples: 
        </para>
        <itemizedlist>
          <listitem>
            <para>
    	    To list running virtual machines:
            </para>
<screen>
<command>virsh -c qemu:///system list</command>
</screen>
          </listitem>
          <listitem>
            <para>
  	    To list start a virtual machine at boot:
            </para>
<screen>
<command>virsh -c qemu:///system autostart web_devel</command>
</screen>
          </listitem>
          <listitem>
            <para>
 	    Reboot a virtual machine with:
            </para>
<screen>
<command>virsh -c qemu:///system reboot web_devel</command>
</screen>
          </listitem>
          <listitem>
            <para>
  	    The <emphasis>state</emphasis> of virtual machines can be saved to a file in order to be restored later.  The
            following will save the virtual machine state into a file named according to the date:
            </para>
<screen>
<command>virsh -c qemu:///system save web_devel web_devel-022708.state</command>
</screen>
            <para>
            Once saved the virtual machine will no longer be running.
            </para>
          </listitem>
          <listitem>
            <para>
	    A saved virtual machine can be restored using:
            </para>
<screen>
<command>virsh -c qemu:///system restore web_devel-022708.state</command>
</screen>
          </listitem>
          <listitem>
            <para>
	    To shutdown a virtual machine do:
            </para>
<screen>
<command>virsh -c qemu:///system shutdown web_devel</command>
</screen>
          </listitem>
        </itemizedlist>
        <note>
          <para>
          In the above examples replace <emphasis>web_devel</emphasis> with the appropriate virtual machine name, and 
  	  <filename>web_devel-022708.state</filename> with a descriptive file name.
          </para>
        </note>
      </sect3>
      <sect3 id="virt-manager" status="review">
        <title>virt-manager</title>
        <para>
        The <application>virt-manager</application> package contains a graphical utility to manage local and remote virtual machines.
        To install virt-manager enter:
        </para>
<screen>
<command>sudo apt-get install virt-manager</command>
</screen>
        <para>
        Since <application>virt-manager</application> requires a GUI environment it is recommended to be installed on a workstation or 
        test machine instead of a production server.  To connect to the local <application>libvirt</application> service enter:
        </para>
<screen>
<command>virt-manager -c qemu:///system</command>
</screen>
        <para>
	You can connect to the <application>libvirt</application> service running on another host by entering the following in a terminal prompt:
        </para>
<screen>
<command>virt-manager -c qemu+ssh://virtnode1.mydomain.com/system</command>
</screen>
        <note>
          <para>
          The above example assumes that <application>SSH</application> connectivity between the management system and virtnode1.mydomain.com 
          has already been configured.  For details on configuring <application>SSH</application> see <xref linkend="openssh-server"/>
          </para>
        </note>
      </sect3>
    </sect2>
    <sect2 id="libvirt-virtmachine-console" status="review">
      <title>Virtual Machine Console</title> 
      <para>
      Once a virtual machine is install and running you can connect to the virtual machine's console using 
      <application>virt-viewer</application>.  As an example, from a terminal:
      </para>
<screen>
<command>virt-viewer qemu:///system web_devel</command>
</screen>
      <para>
      Be sure and replace <emphasis role="italic">web_devel</emphasis> with the appropriate virtual machine name.
      </para>
      <para>
      If configured to use a <emphasis>bridged</emphasis> network interface you can also setup <application>SSH</application> access
      to the virtual machine.  See <xref linkend="openssh-server"/> for more details.
      </para>
    </sect2>
    <sect2 id="libvirt-resources" status="review">
      <title>Resources</title> 
      <itemizedlist>
        <listitem>
          <para>
     	  See the <ulink url="http://kvm.qumranet.com/kvmwiki">KVM</ulink> home page for more details.
          </para>
        </listitem>
        <listitem>
          <para>
     	  For more information on <application>libvirt</application> see the <ulink url="http://libvirt.org/">libvirt home page</ulink> 
          </para>
        </listitem>
        <listitem>
          <para>
     	  The <ulink url="http://virt-manager.et.redhat.com/">Virtual Machine Manager</ulink> site has more information on 
          <application>virt-manager</application> development.
          </para>
        </listitem>
        <listitem>
          <para>
          Also, stop by the <emphasis>#ubuntu-virt</emphasis> IRC channel on <ulink url="http://freenode.net/">freenode</ulink> to 
          discuss virtualization technology in Ubuntu.
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>
  <sect1 id="ubuntu-vm-builder" status="review">
    <title>ubuntu-vm-builder</title>
    <para>
    Originally developed to create the <emphasis>JeOS</emphasis> variant of Ubuntu Server Edition, <application>ubuntu-vm-builder</application>
    can be used to create customized virtual machines. 
    </para>
    <para>
    Before creating custom images the <application>device-mapper</application> module will need to be loaded.  To check if the module is loaded 
    enter the following from a terminal:
    </para>
<screen>
<command>lsmod | grep dm_mod</command>
</screen>
    <para>
    If the module is not loaded enter the following to load it:
    </para>
<screen>
<command>sudo modprobe dm_mod</command>
</screen>
    <para>
    To create a custom virtual machine, enter the following:
    </para>
<screen>
<command>sudo ubuntu-vm-builder --addpkg vim --vm qemu</command>
</screen>
    <para>
    The above command will add the <application>vim</application> application to the virtual machine, and create a <application>qemu</application>
    image.  The default virtual machine image is <application>KVM</application>.
    </para>
    <para>
    By adding additional <emphasis>--adpkg</emphasis> any number of applications can be included in the image.  For example:
    </para>
<screen>
<command>sudo ubuntu-vm-builder --addpkg vim --addpkg screen --mem 256</command>
</screen>
    <para>
    Also notice that the <emphasis>--mem 256</emphasis> option increases the virtual machines memory from the default 128M.
    </para>
    <para>
    After the image creation process has finished a directory named <filename role="directory">ubuntu-jeos-hardy-i386</filename> is created,
    and inside is the virtual machine image file named <filename>root.qcow2</filename> and a shell script, used to start the virtual machine,
    named according to the image type.
    </para>
    <para>
    Refer to the <application>ubuntu-vm-builder</application> man page for more customization options.
    </para>
  </sect1>
</chapter>
