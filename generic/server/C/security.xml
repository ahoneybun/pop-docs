<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % genericent SYSTEM "../../libs/generic.ent">
%genericent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % gnome-menus-C SYSTEM "../../../ubuntu/libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "&EnglishAmerican;">
]>
	<chapter id="security" status="complete">
		<title>Security</title>
          <para>
             The Linux kernel includes the <emphasis>Netfilter</emphasis> subsystem,
			 which is used to manipulate or decide the fate of network traffic headed into or through
			 your server.  All modern Linux firewall solutions use this system for packet filtering.
          </para>
        <sect1 id="firewall-introduction" status="complete">
          <title>Firewall Introduction</title>
            <para>
              The kernel's packet filtering system would be of little use to administrators without
			  a userspace interface to manage it.  This is the purpose of iptables.  When a packet
			  reaches your server, it will be handed off to the Netfilter subsystem for acceptance,
			  manipulation, or rejection based on the rules supplied to it from userspace via
			  iptables.  Thus, iptables is all you need to manage your firewall if you're familiar
			  with it, but many frontends are available to simplify the task.
            </para>
        </sect1>
        <sect1 id="ip-masquerading" status="complete">
          <title>IP Masquerading</title>
            <para>
              The purpose of IP Masquerading is to allow machines with private, non-routable IP
			  addresses on your network to access the Internet through the machine doing the
			  masquerading.  Traffic from your private network destined for the Internet must be
			  manipulated for replies to be routable back to the machine that made the request.
			  To do this, the kernel must modify the <emphasis>source</emphasis>
			  IP address of each packet so that replies will be routed back to it, rather than
			  to the private IP address that made the request, which is impossible over the 
			  Internet.  Linux uses <emphasis>Connection Tracking</emphasis>
			  (conntrack) to keep track of which connections belong to which machines and reroute
			  each return packet accordingly.  Traffic leaving your private network is thus
			  &quot;masqueraded&quot; as having originated from your Ubuntu gateway machine.
			  This process is referred to in Microsoft documentation as Internet
			  Connection Sharing.
            </para>
			<para>
              This can be accomplished with a single iptables rule, which may differ slightly
			  based on your network configuration:
			  <screen>sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -o ppp0 -j MASQUERADE</screen>
			  The above command assumes that your private address space is 192.168.0.0/16 and
			  that your Internet-facing device is ppp0.  The syntax is broken down as follows:
			  <itemizedlist>
				  <listitem><para> -t nat -- the rule is to go into the nat table</para></listitem>
				  <listitem><para> -A POSTROUTING -- the rule is to be appended (-A) to the POSTROUTING 
				  chain</para></listitem>
				  <listitem><para> -s 192.168.0.0/16 -- the rule applies to traffic originating from the
				  specified address space</para></listitem>
				  <listitem><para> -o ppp0 -- the rule applies to traffic scheduled to be routed through
				  the specified network device</para></listitem>
				  <listitem><para> -j MASQUERADE -- traffic matching this rule is to &quot;jump&quot;
				  (-j) to the MASQUERADE target to be manipulated as described above</para></listitem>
			  </itemizedlist>
			</para>
			<para>
              Each chain in the filter table (the default table, and where most or all packet
			  filtering occurs) has a default <emphasis>policy</emphasis> of
			  ACCEPT, but if you are creating a firewall in addition to a gateway device, you
			  may have set the policies to DROP or REJECT, in which case your masqueraded
			  traffic needs to be allowed through the FORWARD chain for the above rule to work:
			  <screen>sudo iptables -A FORWARD -s 192.168.0.0/16 -o ppp0 -j ACCEPT
sudo iptables -A FORWARD -d 192.168.0.0/16 -m state --state ESTABLISHED,RELATED -i ppp0 -j ACCEPT</screen>
			  The above commands will allow all connections from your local network to the
			  Internet and all traffic related to those connections to return to the machine
			  that initiated them.
			</para>
        </sect1>
        <sect1 id="firewall-tools" status="complete">
          <title>Tools</title>
            <para>
              There are many tools available to help you construct a complete firewall without
			  intimate knowledge of iptables.  For the GUI-inclined, 
			  <application>Firestarter</application> is quite popular and easy to use, and
			  <application>fwbuilder</application> is very powerful and will look familiar 
			  to an administrator who has used a commercial firewall utility such as Checkpoint 
			  FireWall-1.  If you prefer a command-line tool with plain-text configuration files, 
			  <application>Shorewall</application> is a very powerful solution to help you 
			  configure an advanced firewall for any network.  If your network is relatively 
			  simple, or if you don't have a network, <application>ipkungfu</application> should 
			  give you a working firewall &quot;out of the box&quot; with zero configuration, 
			  and will allow you to easily set up a more advanced firewall by editing simple, 
			  well-documented configuration files.  Another interesting tool is 
			  <application>fireflier</application>, which is designed to be a desktop firewall 
			  application.  It is made up of a server (fireflier-server) and your choice of GUI 
			  clients (GTK or QT), and behaves like many popular interactive firewall 
			  applications for Windows.
            </para>
        </sect1>
        <sect1 id="firewall-logs" status="complete">
          <title>Logs</title>
            <para>
              Firewall logs are essential for recognizing attacks, troubleshooting your
			  firewall rules, and noticing unusual activity on your network.  You must include
			  logging rules in your firewall for them to be generated, though, and logging
			  rules must come before any applicable terminating rule (a rule with a target
			  that decides the fate of the packet, such as ACCEPT, DROP, or REJECT).  For
			  example:
			  <screen>sudo iptables -A INPUT -m state --state NEW -p tcp --dport 80 -j LOG --log-prefix "NEW_HTTP_CONN: "</screen>
			  A request on port 80 from the local machine, then, would generate a log in dmesg
			  that looks like this:
			</para>
			<para>
			  <programlisting>[4304885.870000] NEW_HTTP_CONN: IN=lo OUT= MAC=00:00:00:00:00:00:00:00:00:00:00:00:08:00 SRC=127.0.0.1 DST=127.0.0.1 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=58288 DF PROTO=TCP SPT=53981 DPT=80 WINDOW=32767 RES=0x00 SYN URGP=0</programlisting>
			</para>
			<para>
              The above log will also appear in <filename>/var/log/messages</filename>,
			  <filename>/var/log/syslog</filename>, and <filename>/var/log/kern.log</filename>.
			  This behavior can be modified by editing <filename>/etc/syslog.conf</filename>
			  appropriately or by installing and configuring <application>ulogd</application>
			  and using the ULOG target instead of LOG.  The <application>ulogd</application>
			  daemon is a userspace server that listens for logging instructions from the kernel
			  specifically for firewalls, and can log to any file you like, or even to a
			  <application>PostgreSQL</application> or <application>MySQL</application>
			  database.  Making sense of your firewall logs can be simplified by using a log
			  analyzing tool such as <application>fwanalog</application>, <application>
			  fwlogwatch</application>, or <application>lire</application>.
            </para>
        </sect1>
    </chapter>

