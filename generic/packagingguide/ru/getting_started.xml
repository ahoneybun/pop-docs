<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % pg-common SYSTEM "../pg-common.ent">
%pg-common;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
]>
<chapter id="gs-chap" status="review">
	<title>Первые шаги</title>

	<sect1 id="gs-bin_source" status="complete">
		<title>Бинарные пакеты и пакеты исходных кодов</title>
		
		<para>Most users of a Debian-based distribution such as <phrase>Ubuntu</phrase> will never have
			to deal with the actual source code that is used to create all of the
			applications on their computers. Instead, the source code is compiled into
			<emphasis>binary</emphasis> packages from
			the <emphasis>source</emphasis> package that contains both
			the source code itself and the rules for making the binary
			package. Packagers upload the source packages with their
			changes to the build systems that then compile the binary
			packages for each architecture. A separate system
			distributes the generated binary .deb files and source
			changes to the repository mirrors.</para>

	</sect1>

	<sect1 id="gs-tools" status="review">
		<title>Инструменты для работы с пакетами</title>
		
		<para>Существует большое количество программ, написанных специально для работы с пакетами в основанных на Debian системах. Многие из них не <emphasis>необходимы</emphasis> для создания пакетов, но очень полезны и зачастую автоматизируют повторяющиеся задания. Их страницы <application>man</application> и <application>info</application> хороший источник информации. Однако, следующий список пакетов, который выделен затенением, необходим для работы с пакетами:</para>

		<variablelist>
			<varlistentry>
				<term><application>build-essential</application></term>
				<listitem><para>это метапакет, который зависит от <application>libc6-dev</application>, <application>gcc</application>, <application>g++</application>, <application>make</application>, и <application>dpkg-dev</application>. Одним из пакетов, с которым вы возможно не знакомы является <application>dpkg-dev</application>. Он содержит инструменты такие, как <application>dpkg-buildpackage</application> и <application>dpkg-source</application>, которые используются для создания, распаковки и сборки исходников и бинарных пакетов.</para></listitem>
			</varlistentry>

			<varlistentry>
				<term><application>devscripts</application></term>
				<listitem><para>содержит много скриптов, которые делают работу по поддержке пакетов намного легче. Некоторые из наиболее часто используемых - это <application>debdiff</application>, <application>dch</application>, <application>debuild</application>, и <application>debsign</application>.</para></listitem>
			</varlistentry>

			<varlistentry><term><application>debhelper</application> и <application>dh-make</application></term>
				<listitem><para>скрипты, которые автоматизируют обычные задачи работы с пакетами. <application>dh-make</application> может использоваться для начальной "дебианизации" и содержит много файлов примеров.</para></listitem>
			</varlistentry>
				
			<varlistentry><term><application>diff</application> и <application>patch</application></term> <listitem><para>используются для создания и наложения патчей соответственно. Они широко используются при создании пакетов, так как легче, нагляднее и более эффективно показывать маленькие изменения в виде патчей, чем иметь несколько копий файла.</para></listitem> </varlistentry>
			
			<varlistentry><term><application>gnupg</application></term>
				<listitem><para>это полная и свободная замена PGP, используемая для цифровой подписи файлов (в том числе и пакетов)</para></listitem>
			</varlistentry>
				
			<varlistentry><term><application>fakeroot</application></term>
				<listitem><para>моделирует запуск команды с администраторскими привелегиями. Полезна при создании бинарных пакетов, работая с правами обычного пользователя.</para></listitem>
			</varlistentry>
			
			<varlistentry><term><application>lintian</application> и <application>linda</application></term>
				<listitem><para>разбирают пакеты Debian и сообщают о багах и нарушениях Policy. Они содержат автоматизированные проверки многих аспектов политики Debian Policy и распространненых ошибок.</para></listitem>
			</varlistentry>
			
			<varlistentry><term><application>pbuilder</application></term>
				<listitem><para>создает окружение chroot и собирает пакет внутри этого окружения. Это идеальная система чтобы проверять, что зависимости пакета верны, и чтобы собирать чистые пакеты для тестов и распространения.</para></listitem> </varlistentry>
		</variablelist>

	</sect1>

		
	<sect1 id="gs-pbuilder" status="complete" xreflabel="pbuilder">
		<title>Персональный сборщик: pbuilder</title>
		
		<para>Using pbuilder as a package builder allows you to build
			the package from within a chroot environment. You can
			build binary packages without using
			<application>pbuilder</application>, but you must have all the build
			dependencies installed on your system first. However, pbuilder allows the
			packager to check the build dependencies because the package is built within a
			minimal <phrase>Ubuntu</phrase> installation, and the build dependencies are downloaded
			according to the <filename>debian/control</filename> file.</para>

		<para>Следующая статья является обзорным руководством для установки, использования и обновления окружения pbuilder, однако существует много деталей использования <application>pbuilder</application>, которые не входят в рамки этого руководства. На man-странице <application>pbuilder</application> есть множество информации, к которой можно обратиться, если у вас возникли проблемы, или нужна более детальная информация</para>

	<sect2>
		<title>Установка и конфигурация окружения pbuilder</title>
		
		<para>The first, and perhaps most obvious, thing to do is to
		install <application>pbuilder</application>. If you want to
		create a <application>pbuilder</application> for a release
		newer than the one you currently have installed, you will need
		to manually install the <application>debootstrap</application>
		.deb (from <ulink url="http://packages.ubuntu.com">http://packages.ubuntu.com</ulink>) from the
		newer release. To create a pbuilder execute:</para>
		
		<screen>
sudo pbuilder create --distribution &lt;distro&gt; \
	--othermirror "deb http://archive.ubuntu.com/ubuntu &lt;distro&gt; universe multiverse"
		</screen>

		<para>where &lt;distro&gt; is the release you want
			(<emphasis>edgy</emphasis> for instance) to create the
			pbuilder for. If you would like to create more than one
			<application>pbuilder</application> environment you can
			append the <emphasis>--basetgz</emphasis> flag with the
			desired location for the
			compressed <application>pbuilder</application>
			environment.  The default
			is <filename>/var/cache/pbuilder/base.tgz</filename>.  If
			you do choose to use <emphasis>--basetgz</emphasis> you
			will need to use it with the
			other <application>pbuilder</application> commands
			so <application>pbuilder</application> knows which
			compressed build environment to use.</para>
		
		<note><para>Creating a pbuilder environment will take some
		time as <application>debootstrap</application> essentially
		downloads a minimal <phrase>Ubuntu</phrase> installation.</para></note>

		<tip><para>A more flexible way to create a pbuilder (and
		perhaps multiple pbuilders) is to you a shell script.</para></tip>

	</sect2>	
	
	<sect2>
		<title>Использование pbuilder</title>
		<para>Now that you have a running pbuilder you can build binary packages from
			the source package by invoking:</para>

		<screen>sudo pbuilder build *.dsc</screen>

		<para>This will build all the source packages in the current directory. The
			resulting .debs and source packages can be found in
			<filename>/var/cache/pbuilder/result/</filename> (which can be
			changed with the <emphasis>--buildresult</emphasis> flag).</para>

	</sect2>

	<sect2>
		<title>Обновление pbuilder</title>
		
		<para>Для обеспечения правильного нахождения зависимостей, у вас всегда должна быть текущая версия pbuilder всякий раз когда вы тестируете ваши пакеты с исходными кодами, особенно если вы создаете часто изменяемый релиз для разработки.</para>

		<screen>sudo pbuilder update</screen>

		<para/>
		
		<para>Если вы хотите обновить ваш pbuilder, вы можете использовать <application>pbuilder update</application> в комбинации с флагом <emphasis>--distribution</emphasis>:</para>

		<screen>sudo pbuilder update --distribution &lt;newdistro&gt; --override-config</screen>

	</sect2>
	
	<sect2>
		<title>Multiple pbuilders</title>
		
		<para>All of the information so far in this section on <application>pbuilder</application> has applied to having a single <application>pbuilder</application>. If you want to create more than one <application>pbuilder</application> you can create a shell script to handle the configuration for each <application>pbuilder</application> you want to create. An example of such a shell script can be found in <filename>/usr/share/doc/pbuilder/examples/pbuilder-distribution.sh</filename>. You can simply copy this example file somewhere in your path (putting it in <filename>~/bin/</filename> and adding this directory to your execution path is convenient) and then edit it according your needs. Normally you will need to only change DISTRIBUTION and add --othermirror as above. You can then call this script instead of <application>pbuilder</application> directly.</para></sect2>
	
</sect1>

</chapter>

