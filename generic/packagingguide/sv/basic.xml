<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % pg-common SYSTEM "../pg-common.ent">
%pg-common;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
]>
<chapter id="basic-chap" status="complete">
	<title>Grundläggade paketering</title>

	<para>Två av problemen som nya paketerare möter är att det finns flera sätt att paketera, och att det finns mer än ett verktyg för att göra jobbet. Vi kommer gå igenom tre exempel med de vanliga byggsystemen. Först använder vi ingen bygghjälpare alls. Den här metoden är oftast den svåraste och används sällan i praktiken, men ger den tydligaste synen på paketeringsprocessen. När vi är klara mededt kommer vi att använda <application>debhelper</application>, det vanligaste byggsystemet i Debian. Det hjälper paketeraren genom att automatisera uppgifter som ofta upprepas. Till slut kommer vi även kort titta på <emphasis role="bold">C</emphasis>ommon <emphasis role="bold">D</emphasis>ebian <emphasis role="bold">B</emphasis>uild <emphasis role="bold">S</emphasis>ystem (<application>CDBS</application>), ett mer strömlinjeformat byggsystem som använder <application>debhelper</application>.</para>

	<tip><para>Package development often requires installing many packages
			(especially <application>-dev</application> packages containing
			headers and other common development files) that are not
			part of a normal desktop <phrase>Ubuntu</phrase> installation. If you want
			to avoid installing extra packages or would like to develop for a
			different <phrase>Ubuntu</phrase> release (the development one, for instance) from
			what you currently have, the use of a chroot environment
			is highly recommended. A guide to setting up a <xref linkend="appendix-chroot"/> can be found in the
			Appendix.</para></tip>

	
	<sect1 id="basic-scratch" status="complete">
		<title>Paketera från scratch</title>
		
		<important><para><emphasis role="bold">Krav:</emphasis> build-essential, automake, gnupg, lintian, fakeroot och <xref linkend="gs-pbuilder"/>.</para>
		</important>
					
		<para>I det här exemplet kommer vi att använda programmet GNU <application><ulink url="http://www.gnu.org/software/hello/hello.html">hello</ulink></application> som ett exempel. Du kan ladda ner källkodstarbollen från <ulink url="http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz">ftp.gnu.org</ulink>. I det här exemplet kommer vi använda katalogen <filename>~/hello/</filename>.</para>
		<screen>
mkdir ~/hello
cd ~/hello
wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz</screen>

		<para>We will also compare our package to one that is already
			packaged in the <phrase>Ubuntu</phrase> repository. For now, we will place
			it in the <filename>ubuntu</filename> directory so we can look at
			it later. To get the source
			package, make sure you have a "deb-src" line in your
			<filename>/etc/apt/sources.list</filename> file for the Main
			repository. Then, simply execute:</para>

		<screen>
mkdir ubuntu
cd ubuntu
apt-get source hello
cd ..</screen>
		
		<note><para>Till skillnad från de flesta kommandon i <application>apt-get</application> behöver du inte root-rättigheter för att ladda ner källpaketet, eftersom det laddas ner till den aktuella katalogen. Det är till och med rekomenderat att du <emphasis>enbart</emphasis> använder <application>apt-get source</application> som en vanlig användare, eftersom du då kan ändra på filerna i källpaketet utan att behöva root-privilegier.</para></note>
		
		<para>Vad kommandot <application>apt-get source</application> gör är:</para>
		
		<orderedlist>

			<listitem><para>Ladda ner källpaketet. Ett källpaket innehåller vanligen en .dsc-fil som beskriver paketet och ger md5summor för källpakete, en .orig.tar.gz-fil som innehåller källkoden från skaparen/skaparna, och en .diff.gz-fil som innehåller alla patchar som applicerats på källkoden med paketinformation.</para></listitem>

			<listitem><para>Untar:a .orig.tar.gz-filen i den aktuella katalogen.</para></listitem>

			<listitem><para>Applicera den gunzippade .diff.gz-filen till den uppackade källkodskatalogen.</para></listitem>

			</orderedlist>

		<para>Om du laddade ner källkpaketen manuellt (filerna .dsc, .orig.tar.gz och .diff.gz) kan du packa upp dem på samma sätt som <application>apt-get source</application> gör genom att använda <application>dpkg-source</application> så här:</para>
		<para><screen>dpkg-source -x *.dsc</screen></para>

		<para>Det första du behöver göra är att göra en kopia av original-tarbollen (ibland kallad "uppström") i följande format: <filename>&lt;packagename&gt;_&lt;version&gt;.orig.tar.gz</filename>. Det här steget gör två saker. För det första skapar det två kopior av källkoden. Om du råkar ändra eller ta bort en arbetskopia kan du använda den du laddade ner. För det andra anses det vara dålig paketeringsstil att ändra i ursprungstarbollen om det inte är absolut nödvändigt. Se <xref linkend="basic-mistakes"/> för olika skäl.</para>

		<screen>
cp hello-2.1.1.tar.gz hello_2.1.1.orig.tar.gz
tar -xzvf hello_2.1.1.orig.tar.gz</screen>

		<warning><para>Att använda ett understräck, "_", mellan paketnamnet (hello) och versionen (2.1.1), istället för ett bindesträck, "-", är väldigt viktigt. Ditt källpaket kommer felaktigt byggas som ett nativt Debianpaket.</para></warning>

		<para>Vi har nu en katalog som heter <filename>hello-2.1.1</filename> som innehåler källkodsfilerna. Nu behöver vi skapa en extra katalog vid namn <application>debian</application> där all paketeringsinformation lagras, vilket låter oss separera paketeringsfilerna från källkodsfilerna.</para>

		<screen>
mkdir hello-2.1.1/debian
cd hello-2.1.1/debian/</screen>

		<para>We now need to create the essential files for any <phrase>Ubuntu</phrase>
			source package: <filename>changelog</filename>,
			<filename>control</filename>, <filename>copyright</filename>, and
			<filename>rules</filename>. These are the files needed to create
			the binary packages (.deb files) from the original (upstream)
			source code. Let us look at each one in turn.</para>
		
		<sect2>
			<title>changelog</title>
			
			<para>Filen <filename>changelog</filename> är, som namnet antyder, en lista över alla ändringar som gjorts i varje version. Den har ett speciellt format som berättar paketnamn, version, distribution, ändringar, vem som gjorde ändringarna, och när denne gjorde dem. Om du har en GPG-nyckel, se till att använda samma namn och email-adress i <filename>changelog</filename> som du har i din nyckel. Följande är en mall för <filename>changelog</filename>:</para>
			<screen>
paket (version) distribution; urgency=bråskandenivå

  * ändingsdetaljer
    fler ändringsdetaljer
  * ännu fler ändringsdetaljer

-- underhållarens namn &lt;e-postadress&gt;[två mellanslag]datum</screen>

			<para>Formatet (speciellt för datumet) är viktigt. Datumet ska vara i RFC822-formatet, som du kan få från programmet <application>822-date</application>.</para>

			<para>Här är en grundläggande <filename>changelog</filename>-fil för <application>hello</application>:</para>

			<screen>
hello (2.1.1-1) edgy; urgency=low

   * New upstream release with lots of bug fixes.

-- Captain Packager &lt;packager@coolness.com&gt;  Wed,  5 Apr 2006 22:38:49 -0700</screen>

			<para>Notera att versionen har ett -1 tillagt till sig - det är det som kallas för Debianrevisionen, och används så att paketen kan uppdateras (för att fixa buggar till exempel) med nya uppladdningar av exakt samma källkodsversion.</para>

			<note><para><phrase>Ubuntu</phrase> and Debian have slightly different package versioning
					schemes to avoid conflicting packages with the same
					source version. If a Debian package has been changed in <phrase>Ubuntu</phrase>,
					it has <emphasis>ubuntuX</emphasis> (where
					<emphasis>X</emphasis> is the <phrase>Ubuntu</phrase> revision number)
					appended to the end of the Debian version. So if the
					Debian <application>hello</application> package was
					changed by <phrase>Ubuntu</phrase>, the version string would be
					<filename>2.1.1-1ubuntu1</filename>. If a package for the
					application does not exist in Debian, then the Debian
					revision is <emphasis>0</emphasis>
					(<emphasis>e.g.</emphasis>,
					<filename>2.1.1-0ubuntu1</filename>).</para></note>
		
			<para>Now look at the <filename>changelog</filename> for the
				<phrase>Ubuntu</phrase> source package that we downloaded earlier:</para>

			<screen>
less ../../ubuntu/hello-2.1.1/debian/changelog</screen>

			<para>Notice that in this case the <emphasis>distribution</emphasis>
				is <emphasis>unstable</emphasis> (a Debian branch),
				because the Debian package has not been changed by <phrase>Ubuntu</phrase>.
				Remember to set the <emphasis>distribution</emphasis> to your
				target distribution release.</para>

			<para>Nu, skapa en <filename>changelog</filename>-fil i katalogen <filename>debian</filename> där du fortfarande bör befinna dig.</para>
			
		</sect2>

		<sect2>
			<title>control</title>
			<para>Filen control innehåller information som pakethanteraren (till exempel <application>apt-get</application>, <application>synaptic</application> eller <application>aptitude</application>) använder, bygg-beroenden, underhållarinformation, och mycket mer.</para>
			<para>For the <phrase>Ubuntu</phrase> <application>hello</application> package,
				the control file looks something like:</para>
			<para><screen>Source: hello
Section: devel
Priority: optional
Maintainer: Captain Packager &lt;packager@coolness.com&gt; 
Standards-Version: 3.6.1

Package: hello
Architecture: any
Depends: ${shlibs:Depends}
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting. It
 allows non-programmers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian
 package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).</screen></para>

			<para>Skapa filen <filename>control</filename> med informationen ovan (se till att skriva in din information i fältet <emphasis>Maintainer</emphasis>).</para>
			
			<para>Det första stycket ger information om källpaketet. Låt oss gå igenom det, rad för rad:</para>
			<itemizedlist>
				
				<listitem><para><emphasis role="bold">Source:</emphasis> Det här är namnet på källpaketet, i det här fallet <emphasis>hello</emphasis>.</para></listitem>

				<listitem><para><emphasis role="bold">Section:</emphasis> Apt-förråden är uppdelade i avdelningen för att underlätta bläddring bland och kategorisering av program. I det här fallet hör <application>hello</application> till avdelningen <emphasis>devel</emphasis>.</para></listitem>

				<listitem><para><emphasis role="bold">Priority:</emphasis> Det här avgör hur viktigt paketet är för våra användare. Det bör vara något av följande:</para>

					<itemizedlist>
					
						<listitem><para><emphasis role="bold">Required</emphasis> - paket som är nödvändiga för att systemet ska fungera ordentligt. Om de tas bort är det sannolikt att ditt system går sönder på ett sätt som inte går att åtgärda.</para></listitem>
						
						<listitem><para><emphasis role="bold">Important</emphasis> - den minsta uppsättningen paket som krävs för ett användbart system. Att ta bort de här paketen orsakar inte att ditt system går sönder på något sätt som inte går att åtgärda, men de är oftast viktiga verktyg, utan vilka en Linuxdistribution skulle vara halvfärdig. Obs: Det här inkluderar inte saker som Emacs eller ens X Window System.</para></listitem>
						
						<listitem><para><emphasis role="bold">Standard</emphasis> - Ganska självförklarande.</para></listitem>
						
						<listitem><para><emphasis role="bold">Optional</emphasis> - i princip är den här kategorin för paket som inte krävs, eller de flesta paketen som finns. De här paketen får dock inte orsaka konflikter med varandra.</para></listitem>
						
						<listitem><para><emphasis role="bold">Extra</emphasis> - paket som får orsaka konflikter med paket i någon av ovastående kategorier. Används även för specialiserade paket som bara skulle vara användbart för personer som redan vet vad paketet används till.</para></listitem>
					
					</itemizedlist>
				</listitem>

				<listitem><para><emphasis role="bold">Maintainer:</emphasis> Paketunderhållaren med en e-postadress.</para></listitem>

				<listitem><para><emphasis role="bold">Standards-Version:</emphasis> Den version av <ulink url="http://www.debian.org/doc/debian-policy/">Debian Policy</ulink> som paketet uppfyller (i det här fallet: version 3.6.1). Ett enkelt sätt att hitta den aktuella versionen är <emphasis>apt-cache show debian-policy | grep Version</emphasis>.</para></listitem>

				<listitem><para><emphasis role="bold">Build-Depends:</emphasis> Ett av de viktigaste fälten, och ofta en källa till buggar. Den här raden listar de binära paket (med versioner om det är nödvändigt) som måste installeras för att skapa binära paket från källpaketet. De paket som är absolut nödvändiga är en del av <emphasis>build-essential</emphasis> och behöver inte inkluderas på den här raden. I fallet med <application>hello</application> behövs inga fler paket än de som är en del av build-essential, så vi behöver ingen Build-Depends-rad. Listan över paket som tillhör build-essential kan du hitta på <filename>/usr/share/doc/build-essential/list</filename>.</para></listitem>
			
			</itemizedlist>

		
			<para>Det andra stycket är för det binära paketet som kommer att byggas från källkoden. Om flera binära paket byggs från källpaketet bör det finnas en avdelning för <emphasis>varje</emphasis> paket. Än en gång, låt oss gå igenom det, rad för rad:</para>
			
			<itemizedlist>
			
				<listitem><para><emphasis role="bold">Package:</emphasis> Namnet på det binära paketet. Många gånger för enkla program (som med <application>hello</application>) är käll- och binärpaketets namn identiska.</para></listitem>
				
				<listitem><para><emphasis role="bold">Architecture:</emphasis> Arkitekturen som det binära paketet byggs för. Exempel är:</para>
					
					<itemizedlist>
						
						<listitem><para><emphasis role="bold">all</emphasis> - Källkoden är <emphasis>inte</emphasis> plattforms-beroende. Program som använder Python eller andra tolkade språk använder det här. Det resulterande paketets namn skulle sluta med <filename>_all.deb</filename>.</para></listitem>

						<listitem><para><emphasis role="bold">any</emphasis> - Källkoden <emphasis>är</emphasis> plattforms-beroende och bör kompilera på alla de arkitekturer som stödjs. Det kommer att skapas en .deb-fil för varje arkitektur (<filename>_i386.deb</filename> till exempel)</para></listitem>

						<listitem><para>A subset of architectures (i386, amd64, ppc, etc.)
								can be listed to indicate that the source is
								architecture-dependent and does not work for all
								architectures supported by <phrase>Ubuntu</phrase>.</para></listitem>

					</itemizedlist></listitem>

				<listitem><para><emphasis role="bold">Depends:</emphasis> Listan över paket som det binära paketet beror på för sin funktionalitet. För <application>hello</application> ser vi <filename>${shlibs:Depends}</filename>, vilket är en variabel som byts ut mot de bibliotek som krävs. Se manualsidan för <filename>dpkg-source</filename> för mer information.</para></listitem>

				<listitem><para><emphasis role="bold">Recommends:</emphasis> Används för paket som starkt rekomenderas och vanligtvis installeras tillsammans med paketet. Vissa pakethanterare, bland annat <application>aptitude</application>, installerar automatiskt paket som är Recommended.</para></listitem>

				<listitem><para><emphasis role="bold">Suggests:</emphasis> Används för paket som är liknande eller användbara när det här paketet är installerat.</para></listitem>
				
				<listitem><para><emphasis role="bold">Conflicts:</emphasis> Används för paket som kommer att orsaka konflikter med det här paketet. Båda kan inte vara installerade på samma gång, och installeras det ena tast det andra bort.</para></listitem>

				<listitem><para><emphasis role="bold">Description:</emphasis> Både long och kort beskrivning används av pakethanterare. Formatet är:</para>
					
<screen>Beskrivning: &lt;enradsförklaring&gt;
 &lt;utökad information över flera rader&gt;</screen>

						<para>Notera att det är ett mellanslag i början av varje rad i den långa beskrivningen. Mer information om hur du skriver bra information hittar du på <ulink url="http://people.debian.org/~walters/descriptions.html">http://people.debian.org/~walters/descriptions.html</ulink>.</para></listitem>
				
			</itemizedlist>
					
		</sect2>

		<sect2>
			<title>copyright</title>

			<para>Den här filen innehåller copyrightinformation. För det mesta hittar du copyrightinformation i filen <filename>COPYING</filename> i programmets källkodskatalog. Den här filen bör innehålla information som namnen på upphovsmannen och paketeraren, adressen som källkoden kom från, en Copyright-rad med år och upphovsrättsinehavare, och texten med själva licensen. En exempelmall skulle vara:</para>

			<screen>This package was debianized by {Ditt namn} &lt;din e-postadress&gt;
{Date}

It was downloaded from: {URL till webbsida} 

Upstream Author(s): {Namn och e-postadress(er) på upphovsmannen/-männen}

Copyright:
	Copyright (C) {År} by {Upphovsman/-män} {e-postadress(er)}

License:

</screen>

			<para>As one can imagine, <application>hello</application> is
				released under the GPL license. In this case it is easiest to
				just copy the <filename>copyright</filename> file from the
				<phrase>Ubuntu</phrase> package:</para>

			<screen>
cp ../../ubuntu/hello-2.1.1/debian/copyright .</screen>

			<para>Du måste inkludera den fullständiga licensen om den inte är GPL, LGPL, BSD eller artistic License, då du istället kan referera till motsvarande fil i katalogen <filename>/usr/share/common-licenses/</filename></para>

			<para>Notice that the <phrase>Ubuntu</phrase> package's
				<filename>copyright</filename> includes a license statement for
				the manual. It is important that <emphasis>all</emphasis> the
				files in the source be covered by a license statement.</para>
			
		</sect2>	

		<sect2 id="basic-scratch-rules">
			<title>rules</title>
			
			<para>The <filename>rules</filename> file is an executable
				Makefile that has rules for building the binary package from
				the source packages. For <application>hello</application>, it
				will be easier to use the <filename>rules</filename>
				from the <phrase>Ubuntu</phrase> package:</para>

			<screen>#!/usr/bin/make -f
# Sample debian/rules file - for GNU Hello.
# Copyright 1994,1995 by Ian Jackson.
# I hereby give you perpetual unlimited permission to copy,
# modify and relicense this file, provided that you do not remove
# my name from the file itself. (I assert my moral right of
# paternity under the Copyright, Designs and Patents Act 1988.)
# This file may have to be extensively modified

package = hello
docdir = debian/tmp/usr/share/doc/$(package)

CC = gcc
CFLAGS = -g -Wall
INSTALL_PROGRAM = install

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
  INSTALL_PROGRAM += -s
endif

build:
        $(checkdir)
        ./configure --prefix=/usr
        $(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
        touch build

clean:
        $(checkdir)
        rm -f build
        -$(MAKE) -i distclean
        rm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars

binary-indep: checkroot build
        $(checkdir)
# There are no architecture-independent files to be uploaded
# generated by this package. If there were any they would be
# made here.

binary-arch: checkroot build
        $(checkdir)
        rm -rf debian/tmp
        install -d debian/tmp/DEBIAN $(docdir)
        install -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN
        $(MAKE) INSTALL_PROGRAM="$(INSTALL_PROGRAM)" \
                prefix=$$(pwd)/debian/tmp/usr install
        cd debian/tmp &amp;&amp; mv usr/info usr/man usr/share
        cp -a NEWS debian/copyright $(docdir)
        cp -a debian/changelog $(docdir)/changelog.Debian
        cp -a ChangeLog $(docdir)/changelog
        cd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian
        gzip -r9 debian/tmp/usr/share/man
        gzip -9 debian/tmp/usr/share/info/*
        dpkg-shlibdeps debian/tmp/usr/bin/hello
        dpkg-gencontrol -isp
        chown -R root:root debian/tmp
        chmod -R u+w,go=rX debian/tmp
        dpkg --build debian/tmp ..

define checkdir
        test -f src/$(package).c -a -f debian/rules
endef

binary: binary-indep binary-arch

checkroot:
        $(checkdir)
        test $$(id -u) = 0

.PHONY: binary binary-arch binary-indep clean checkroot
</screen>

			<para>Vi går igenom den här filen lite noggrannare. En av de första delarna du kommer att få syn på är deklarerandet av några variabler:</para>
			<screen>package = hello
docdir = debian/tmp/usr/share/doc/$(package)

CC = gcc
CFLAGS = -g -Wall
INSTALL_PROGRAM = install

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
INSTALL_PROGRAM += -s
endif
</screen>
			<para>Den här avdelningen sätter CFLAGS för kompilatorn och hanterar DEB_BUILD_OPTIONS-flaggorna <filename>noopt</filename> och <filename>nostrip</filename> för debugging.</para>
			
			<para>Härnäst kommer regeln <filename>build</filename>:</para>
			<screen>build:
	$(checkdir)
	./configure --prefix=/usr
	$(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
	touch build</screen>
			<para>Regeln kör emphasis&gt;./configure</para>
			<para>Nästa regel är <filename>clean</filename>, som kör <emphasis>make -i distclean</emphasis> och tar bort alla filer som skapades under byggandet av paketet.</para>

			<screen>clean:
	$(checkdir)
	rm -f build
	-$(MAKE) -i distclean
	rm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars</screen>

			<para>Härnäst ser vi en tom regel <filename>binary-indep</filename>, eftersom det inte finns några plattforms-oberoende filer i det här paketet.</para>

			<para>Dock så finns det många plattforms-beroende filer, så <filename>binary-arch</filename> används:</para>

			<screen>binary-arch: checkroot build
		$(checkdir)
		rm -rf debian/tmp
		install -d debian/tmp/DEBIAN $(docdir)
		install -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN
		$(MAKE) INSTALL_PROGRAM="$(INSTALL_PROGRAM)" \
		prefix=$$(pwd)/debian/tmp/usr install
		cd debian/tmp &amp;&amp; mv usr/info usr/man usr/share
		cp -a NEWS debian/copyright $(docdir)
		cp -a debian/changelog $(docdir)/changelog.Debian
		cp -a ChangeLog $(docdir)/changelog
		cd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian
		gzip -r9 debian/tmp/usr/share/man
		gzip -9 debian/tmp/usr/share/info/*
		dpkg-shlibdeps debian/tmp/usr/bin/hello
		dpkg-gencontrol -isp
		chown -R root:root debian/tmp
		chmod -R u+w,go=rX debian/tmp
		dpkg --build debian/tmp ..</screen>
			
			<para>För det första, notera att den här regeln anropar regeln <filename>checkroot</filename> för att se till att paketet byggs som root, och även anropar regeln <filename>build</filename> för att kompilera källkoden. Sedan skapas filerna <filename>debian/tmp/DEBIAN</filename> och <filename>debian/tmp/usr/share/doc/hello</filename> och skripten <filename>postinst</filename> och <filename>prerm&gt;</filename> installeras till <filename>debian/tmp/DEBIAN</filename>. Sedan körs <emphasis>make install</emphasis> med ett prefix som installerar till katalogen <filename>debian/tmp/usr</filename>. När det är klart gzippas och installeras dokumentationsfilerna (NEWS, ChangeLog och debians changelog). <emphasis>dpkg-shlibdeps</emphasis> körs sedan för att hitta de delade bibliotek programmet <application>hello</application> beror på, och det lagrar listan i filen <filename>debian/substvars</filename> för variabeln ${shlibs:Depends} i <filename>control</filename>. Sedan körs <emphasis>dpkg-gencontrol</emphasis> för att skapa en control-fil för det binära paketet, och det utför de ersättningar som genererades av <emphasis>dpkg-shlibdeps</emphasis>. Till slut, när rättigheterna på <filename>debian/tmp</filename> är korrekta, körs <emphasis>dpkg --build</emphasis> för att bygga det binära .deb-paketet, och lägga det i katalogen ovanför den vi är i.</para>

		</sect2>

		<sect2> 
			<title>postinst och prerm</title> 
			
			<para>The <filename>postinst</filename> and
				<filename>prerm</filename> files are examples of maintainer
				scripts.  They are shell scripts that are executed after
				installation and before removal, respectively, of the package. In the case of
				the <phrase>Ubuntu</phrase> <application>hello</application> package, they
				are used to install (and remove) the info file. Go ahead and
				copy them into the current <filename>debian</filename>
				directory.</para>

			<screen>
cp ../../ubuntu/hello-2.1.1/debian/postinst .
cp ../../ubuntu/hello-2.1.1/debian/prerm .</screen>
		
		</sect2>

		<sect2>
			<title>Bygga och ta bort källpaketet</title>
			
			<para>Nu när vi har gått igenom filerna i katalogen <filename>debian</filename> for <application>hello</application> i detalj kan vi bygga käll- och binärpaketen. Först går vi till huvudkatalogen för den uppackade källkoden</para>
			
			<para><screen>cd ..</screen></para>
			
			<para>Nu bygger vi källpaketet med <application>dpkg-buildpackage</application>:</para>
			
			<para><screen>dpkg-buildpackage -S -rfakeroot</screen></para>
			
			<para> The -S flag tells
				<application>dpkg-buildpackage</application> to build a source
				package, and the -r flag tells it to use
				<application>fakeroot</application> to allow us to have fake
				root privileges when making the package.
				<application>dpkg-buildpackage</application> will take the
				<filename>.orig.tar.gz</filename> file and produce a
				<filename>.diff.gz</filename> (the difference between
				the original tarball from the author and the directory we
				have created, <filename>debian/</filename> and its contents)
				and a <filename>.dsc</filename> file that has the
				description and md5sums for the source package. The
				<filename>.dsc</filename> and
				<filename>*_source.changes</filename> (used for uploading the
				source package) files are signed using your GPG key.</para>
				
			<warning><para>If you do not have a <application>gpg</application> key set up you will get an error from <application>debuild</application>. You can either set up a <application>gpg</application> key or use the <emphasis>-us -uc</emphasis> keys with <application>debuild</application> to turn off signing. However, you will not be able to have your packages uploaded to Ubuntu without signing them.</para></warning>
			
			<tip><para>To make sure <application>debuild</application> finds the right <application>gpg</application> key you should set the DEBFULLNAME and DEBEMAIL environment variables (in your <filename>~/.bashrc</filename> for instance) to the name and email address you use for your <application>gpg</application> key and in the <filename>debian/changelog</filename></para> <para>Some people have reported that they were unable to get <application>debuild</application> to find their <application>gpg</application> key properly, even after setting the above environment variables. To get around this you can give <application>debuild</application> the <emphasis>-k&lt;keyid&gt;</emphasis> flag where &lt;keyid&gt; is your <application>gpg</application> key ID.</para></tip>

			
			<para>Förutom ett källpaket kan vi dessutom bygga ett binärt paket med <application>pbuilder</application>:</para>
			
			<para><screen>sudo pbuilder build ../*.dsc</screen></para>

			<para>Det är väldigt viktigt att använda <application>pbuilder</application> för att bygga de binära paketen. Det ser till att build-beroendena är riktiga, eftersom <application>pbuilder</application> bara ger dig en minimal miljö, varpå alla bygg-beroenden avgörs av <filename>control</filename>-filen.</para>
			
			<para>Vi kan kontrollera källpaketet efter vanliga misstag genom att använda <application>lintian</application>:</para>
			
			<screen>cd ..
lintian -i *.dsc</screen>
			
		</sect2>

	</sect1>

	<sect1 id="basic-debhelper" status="complete">
		<title>Paketera med Debhelper</title>
		
		<important><para><emphasis role="bold">Krav:</emphasis> Kraven från <xref linkend="basic-scratch"/> samt debhelper och dh-make</para> </important>

		<para>Som en paketerare kommer du sällan att skapa paket från scratch som vi gjorde i förra avdelningen. Som du kanske förstår är mycket av uppgifterna och informationen i till exempel <filename>rules</filename>-filen gemensamt mellan paket. För att göra paketering lättare och mer effektivt kan du använda <application>debhelper</application> för att få hjälp med de här uppgifterna. Debhelper är en uppsättning Perl-skript (alla har ett namn som börjar med <emphasis>dh_</emphasis>) som automatiserar paket-byggandet. Med de här skripten blir det ganska enkelt att bygga Debianpaket.</para>

		<para>In this example, we will again build the GNU Hello package, but this
			time we will be comparing our work to the Ubuntu
			<application>hello-debhelper</application> package. Again,
			create a directory where you will be working: </para>

		<screen>mkdir ~/hello-debhelper
cd ~/hello-debhelper
wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz
mkdir ubuntu
cd ubuntu</screen>
		

		<para>Then, get the Ubuntu source package:</para>

		<screen>apt-get source hello-debhelper
cd ..</screen>

		<para>Precis som i senaste exemplet är det första vi behöver göra att packa upp den ursprungliga (uppströms) tarbollen.</para>

		<screen>tar -xzvf hello-2.1.1.tar.gz</screen>

		<para>Istället för att kopiera uppströmstarbollen till <filename>hello_2.1.1.orig.tar.gz</filename> som vi gjorde i förra exemplet låter vi <application>dh_make</application> göra jobbet åt oss. Det enda du behöver göra är att döpa om källmappen så att namnet blir i formen <emphasis>&lt;paketnamn&gt;-&lt;version&gt;</emphasis> där paketnamn är skrivet med gemener. I det här exemplet får vi automatiskt en källkatalog med rätt namn när vi untarar tarbollen, så vi behöver bara gå in i den.</para>

		<screen>cd hello-2.1.1</screen>

		<para>För att göra den ursprungliga "debianisationen" av källkoden kommer vi att använda <application>dh_make</application>.</para>

		<screen>
dh_make -e din.e-post@adress -f ../hello-2.1.1.tar.gz
		</screen>

		<para>dh_make kommer sedan ställa en rad frågor till dig:</para>

		<screen>
Type of package: single binary, multiple binary, library, kernel module or cdbs?
[s/m/l/k/b] <emphasis role="bold">s</emphasis></screen>

		<screen>
Maintainer name : Captain Packager
Email-Address : packager@coolness.com
Date : Thu, 6 Apr 2006 10:07:19 -0700
Package Name : hello
Version : 2.1.1
License : blank
Type of Package : Single
Hit &lt;enter&gt; to confirm: <emphasis role="bold">Enter</emphasis></screen>

		<caution><para>Kör bara <application>dh_make -e</application> en gång. Om du kör det igen efter att ha kört det en första gång kommer det inte att fungera. Om du vill ändra på det eller om du gjorde ett misstag, ta bort källkatalogen och untara uppströmstarbollen igen. Gå sedan in i källkatalogen och försök igen.</para></caution>
		
		<para>När du kör <application>dh_make -e</application> händer två saker:</para>

		<orderedlist> 
			
			<listitem><para>Filen <filename>hello_2.1.1.orig.tar.gz</filename> skapas i katalogen ovanför den du är i.</para></listitem>

			<listitem><para>De grundläggande filerna som behövs i <filename>debian/</filename> och många mallfiler (.ex) som kanske behövs skapas.</para></listitem>
			
		</orderedlist>

		<para>Programmet <application>Hello</application> är inte särskillt komplicerat, och som vi såg i <xref linkend="basic-scratch"/> krävs det inte mycket mer än de grundläggande filerna för att paketera det. Vi tar därför bort alla <filename>.ex</filename>-filer:</para>

		<screen>cd debian
rm *.ex *.EX</screen>

		<para>För <application>hello</application> behöver du inte heller <filename>README.Debian</filename> (en README som är Debian-specifik, inte programmets README), <filename>dirs</filename> (används av <application>dh_installdirs</application> för att skapa de kataloger som behövs), <filename>docs</filename> (används av <application>dh_installdocs</application> för at installera programmets dokumentation), eller <filename>info</filename> (används av <application>dh_installinfo</application> för att installera info-filen) i katalogen <filename>debian</filename>. För mer information om dessa filer, läs <xref linkend="appendix-examples"/>.</para>

		<para>Vid det här laget bör du bara ha filerna <filename>changelog</filename>, <filename>compat</filename>, <filename>control</filename>, <filename>copyright</filename> och <filename>rules</filename> i katalogen <filename>debian</filename>. Jämfört med <xref linkend="basic-scratch"/> är den enda nyheten <filename>compat</filename>, som är en fil som innehåller versionen på <application>debhelper</application> (i det här fallet 4).</para>

		<para>You will need to adjust the
			<filename>changelog</filename> slightly in this case to reflect
			that this package is named
			<application>hello-debhelper</application> rather than just
			<application>hello</application>:</para>

		<screen>
hello-debhelper (2.1.1-1) edgy; urgency=low

  * Initial release

  -- Captain Packager &lt;packager@coolness.com&gt;  Thu,  6 Apr 2006 10:07:19 -0700</screen>
		
		<para>By using <application>debhelper</application>, the only
			things we need to change in <filename>control</filename> are the
			name (substituting <application>hello</application> for
			<application>hello-debhelper</application>) and adding
			<application>debhelper (&gt;= 4.0.0)</application> to the
			<emphasis>Build-Depends</emphasis> field for the source
			package. The Ubuntu package for
			<application>hello-debhelper</application> looks like:</para>

		<screen>
Source: hello-debhelper
Section: devel
Priority: extra
Maintainer: Capitan Packager &lt;packager@coolness.com&gt;
Standards-Version: 3.6.1
Build-Depends: debhelper (&gt;= 4)

Package: hello-debhelper
Architecture: any
Depends: ${shlibs:Depends}
Conflicts: hello
Provides: hello
Replaces: hello
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting. It
 allows non-programmers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).
 .
 This is the same as the hello package, except it uses debhelper to
 make the deb. Please see debhelper as to what it is.
		</screen>

		<para>We can copy the <filename>copyright</filename> file and the
			<filename>postinst</filename> and <filename>prerm</filename>
			scripts from the Ubuntu
			<application>hello-debhelper</application> package, as they have
			not changed since <xref linkend="basic-scratch"/>. We will also
			copy the <filename>rules</filename> file so we can inspect
			it.</para>

		<screen>
cp ../../ubuntu/hello-debhelper-2.1.1/debian/copyright .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/postinst .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/prerm .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/rules .</screen>

		<para>Den sista filen vi behöver titta på är <filename>rules</filename>, där kraften i <application>debhelper</application>-skripten visas. <application>debhelpers</application> version av <filename>rules</filename> är något kortare (54 rader jämfört med 72 i versionen från <xref linkend="basic-scratch-rules"/>).</para>

		<para>Versionen från <application>debhelper</application> ser ut såhär:</para>

		<screen> #!/usr/bin/make -f

package = hello-debhelper

CC = gcc
CFLAGS = -g -Wall

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif

#export DH_VERBOSE=1

clean:
        dh_testdir
        dh_clean
        rm -f build
        -$(MAKE) -i distclean

install: build
        dh_clean
        dh_installdirs
        $(MAKE) prefix=$(CURDIR)/debian/$(package)/usr \
                mandir=$(CURDIR)/debian/$(package)/usr/share/man \
                infodir=$(CURDIR)/debian/$(package)/usr/share/info \
                install

build:
        ./configure --prefix=/usr
        $(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
        touch build

binary-indep: install
# There are no architecture-independent files to be uploaded
# generated by this package. If there were any they would be
# made here.

binary-arch: install
        dh_testdir -a
        dh_testroot -a
        dh_installdocs -a NEWS
        dh_installchangelogs -a ChangeLog
        dh_strip -a
        dh_compress -a
        dh_fixperms -a
        dh_installdeb -a
        dh_shlibdeps -a
        dh_gencontrol -a
        dh_md5sums -a
        dh_builddeb -a

binary: binary-indep binary-arch

.PHONY: binary binary-arch binary-indep clean checkroot
			</screen>

		<para>Notera att uppgifter som att testa om du är i rätt katalog (<application>dh_testdir</application>), kontrollera att du bygger paketet med root-rättigheter (<application>dh_testroot</application>), installera dokumentation <application>dh_installdocs</application> och <application>dh_installchangelogs</application>) och städa undan när paketet är byggt (<application>dh_clean</application>) hanteras automatiskt. Många paket som är mycket mer komplicerade än <application>hello</application> har lika små <filename>rules</filename>-filer eftersom <application>debhelper</application>-skripten hanterar de flesta uppgifterna. För en komplett lista över <application>debhelper</application>-skript, läs <xref linkend="appendix-debhelper"/>. De är också väl dokumenterade i sina respektive <application>man</application>-sidor. Det är en användbar övning att läsa man-sidor (de är välskrivna och inte särskillt långa) för vart och ett av hjälpskripten som används i ovastående <filename>rules</filename>-fil.</para>

			<sect2>
			<title>Bygga och ta bort källpaketet</title>
			
			<para>Nu när vi har gått igenom filerna i katalogen <filename>debian</filename> för <application>hello-debhelper</application> kan vi bygga käll- och binärpaketen. Vi går först tillbaka till källkatalogen:</para>
			
			<para><screen>cd ..</screen></para>
			
			<para>Nu kan vi bygga källpaketet med <application>debuild</application>, ett skript som kör <application>dpkg-buildpackage</application>:</para>
			
			<para><screen>debuild -S</screen></para>
				
			<para>det binära paketet, med <application>pbuilder</application>:</para>
			
			<para><screen>sudo pbuilder build ../*.dsc</screen></para>

			<para>och till slut leta i källpaketet med <application>lintian</application>:</para>
			
			<screen>cd ..
lintian -i *.dsc</screen>
			
		</sect2>
	
	</sect1>

	<sect1 id="basic-cdbs" status="complete">
		<title>Paketera med CDBS</title>

		<para>CDBS är ett verktyg som använder debhelper för att göra det ännu enklare att bygga och underhålla Debianpaket. Det har många fördelar:</para>

			<itemizedlist>
				<listitem><para>Det producerar en kort, läsvänlig och effektiv <filename>debian/rules</filename></para></listitem>
				
				<listitem><para>Det automatiserar debhelper och autotools åt dig, så att du slipper bry dig om återkommande uppgifter.</para></listitem>
				
				<listitem><para>Det hjälper dig att fokusera på viktigare paketproblem, eftersom det hjäper till utan att begränsa anpassning</para></listitem>
				
				<listitem><para>Det har vältestade klasser, så att du slipper använda olika fulhack för att lösa vanliga problem</para></listitem>
				
				<listitem><para>Det är enkelt att byta till CDBS</para></listitem>
				
				<listitem><para>Det är utbyggbart</para></listitem>
			</itemizedlist>
		
		<sect2>
			<title>Använda CDBS i paket</title>
		
			<para>Using CDBS for Ubuntu packages is very easy. After adding 
				<application>cdbs</application> to the Build-Depends in 
				<filename>debian/control</filename>, a basic
				<filename>debian/rules</filename> file using CDBS can fit in 2 lines. 
				For a simple C/C++ application with no extra rules, such as
				<application>hello</application>, <filename>debian/rules</filename> can
				look like this :</para>

			<screen>#!/usr/bin/make -f
				
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/class/autotools.mk</screen>

			<para>Det här är allt du behöver för att bygga programmet! CDBS hanterar installation och upprensning. Du kan sedan använda filerna <filename>.install</filename> och <filename>.info</filename> för att anpassa ditt program med de vanliga debhelper-funktionerna i olika delar av <filename>debian/rules</filename>.</para>

			<warning><para>Använd inte DEB_AUTO_UPDATE_DEBIAN_CONTROL:=yes för att automatiskt ändra <filename>debian/control</filename>. Det kan orsaka dåliga saker, och Debian anser att det är ett skäl till att neka ett paket från att komma in i arkiven. Läs <ulink url="http://ftp-master.debian.org/REJECT-FAQ.html"> http://ftp-master.debian.org/REJECT-FAQ.html</ulink> för mer information.</para></warning>
			
			<para>Som du kan se fungerar CDBS i princip genom att inkludera <filename>.mk</filename> Makefiles i <filename>debian/rules</filename>. Paketet <application>cdbs</application> ger dig sådana filer i <filename>/usr/share/cdbs/1/</filename> som låter dig göra utföra paketeringsuppgifter. Andra paket, som till exempel <application>quilt</application>, lägger till moduler till CDBS och kan användas som Build-Depends. Notera att du också kan använda dina egna CDBS-regler och inkludera dessa i paketet. De mest användbara modulerna som ingår i <application>cdbs</application> är:</para>

			<itemizedlist>
				
				<listitem><para><filename>rules/debhelper.mk</filename>: Anropar debhelper på alla platser det behövs</para></listitem>
			
				<listitem><para><filename>rules/dpatch.mk</filename>: Låter dig använda dpatch för att förenkla att patcha källkoden</para></listitem>
				
				<listitem><para><filename>rules/simple-patchsys.mk</filename>: Erbjuder ett väldigt enkelt sätt att patcha källkoden</para></listitem>
				
				<listitem><para><filename>rules/tarball.mk</filename>: Låter dig bygga paket med komprimerade tarbollar i paketet</para></listitem>
				
				<listitem><para><filename>class/autotools.mk</filename>: Anropar autotools på alla platser det behövs</para></listitem>
				
				<listitem><para><filename>class/gnome.mk</filename>: Bygger GNOME-program (kräver motsvarande Build-Depends i <filename>debian/control</filename>)</para></listitem>
				
				<listitem><para><filename>class/kde.mk</filename>: Bygger KDE-program (kräver motsvarande Build-Depends i <filename>debian/control</filename>)</para></listitem>
				
				<listitem><para><filename>class/python-distutils.mk</filename>: Bygger Python-program</para></listitem>
			
			</itemizedlist>
		</sect2>
		
		<sect2>
			<title>Mer information om CDBS</title>
		
			<para>För mer information om CDBS, se Marc Dequènes guide på <ulink url="https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml">https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml</ulink>.</para>
		
		</sect2>
	</sect1>

	<sect1 id="basic-mistakes" status="complete">
		<title>Vanliga misstag</title>
			
		<sect2 id="basic-ex_files">
			<title>Exempelfiler från dh_make</title>
			
			<para>När du använder dh_make för att utföra den ursprungliga "debianisationen" skapas exempelfiler för olika uppgifter i katalogen <filename>debian/</filename>. De här mallarna har filändelsen .ex. Om du vill använda en av dem, byt namn på den genom att ta bort filändelsen. Om du inte behöver den, ta bort den för att hålla katalogen <filename>debian/</filename> ren.</para>

		</sect2>

		<sect2 id="basic-orig-tarball">
			<title>Ändra i den ursprungliga tarbollen</title>

			<para>There are two types of source packages, native and non-native.
				A native package is one that is specific to <phrase>Ubuntu</phrase>/Debian. It has the
				<application>debian/</application> directory containing the packaging
				information and any changes to the source included in the tarball (usually
				&lt;packagename&gt;_&lt;version&gt;.tar.gz). Non-native packages are more
				common. A non-native package splits
				the source package into a &lt;packagename&gt;_&lt;version&gt;.orig.tar.gz
				tarball that is identical (hopefully including md5sum) to the source
				tarball downloaded from the project's homepage and a .diff.gz file that
				contains all the differences (<filename>debian/</filename> directory and
				patches) from the original source tarball.</para>

			<para>Här är en lista över potentiella problem som kan uppstå om du ändrar på den ursprungliga tarbollen:</para>
		
			<orderedlist>

				<listitem><para>Reproducerbarhet</para>

					<para>Om du bara tar filerna .diff.gz och .dsc kan inte du eller någon annan reproducera ändringarna i den ursprungliga tarbollen.</para></listitem>

				<listitem><para>Uppgraderbarhet</para>
		
					<para>It is much easier to upgrade to a new upstream (from the author)
						version if the .orig.tar.gz is preserved and there is a clear
						separation between the upstream source and the changes made to
						produce the <phrase>Ubuntu</phrase> source package.</para> </listitem>

				<listitem><para>Debian to <phrase>Ubuntu</phrase> Synchronization</para>

					<para>Changing original tarballs makes it hard to automatically sync
						from Debian to <phrase>Ubuntu</phrase>. Normally, only the .diff.gz and .dsc files
						change within the same upstream version, since the .orig.tar.gz
						file is shared by all the Debian or <phrase>Ubuntu</phrase> revisions. It is much
						more difficult to sync if the md5sums of the .orig.tar.gz files
						are not the same.</para> </listitem>

				<listitem><para>Användning av versionshantering för Debianpaket</para>
					
					<para>Om du använder svn (<application>svn-buildpackage</application>) för att hantera ditt Debianpaket sparar du vanligtvis inte original-tarbollen inuti. Om någon annan gör en checkout måste han/hon skaffa sig originaltarbollen separat. Andra versionshanteringssystem kan användas för att bara spåra paketeringsfilerna (<filename>debian/</filename> m fl) och inte hela källkoden. Om inte .orig.tar.gz är samma fil kan det självklart uppstå problem.</para></listitem>

				<listitem><para>Säkerhetsspårning</para>

					<para>Tänk dig en situation där någon <emphasis>vill</emphasis> lägga till en bakdörr, ett rootkit eller andra elakheter. Om original-tarbollen är oförändrad går det enkelt att söka igenom .diff.gz-filen i jakt på elakheter från personen som modifierade paketet. Om tarbollen ändrades måste man däremot dessutom leta efter skillnader mellan den modifierade tarbollen och originalet.</para>
		
						<note><para>Du måste fortfarande tro att de som skrev programmet inte försökte göra något elakt, men det måste du oavsett om tarbollen ändras eller inte.</para></note></listitem>

				<listitem><para>.diff.gz-filen</para>
						
					<para>Du kan redan använda en .diff.gz-fil för att visa ändringarna om originaltarbollen redan finns, så det är enkelt att göra ändringar utan att röra originaltarbollen.</para></listitem>
				
			</orderedlist>


			<para><emphasis role="bold">Det är acceptabelt att ändra på originaltarbollen om en eller flera av följande punkter stämmer:</emphasis></para>

			<itemizedlist>
	
				<listitem><para>Den inne håller icke-fria delar som inte kan distribueras vidare. Ta bort dessa saker och skriv ner det i paketet. Ofta innehåller sådana paket "dfsg" (som står för Debian Free Software Guidelines) i paketnamnet och/eller versionsnummret för att visa att de icke-fria delarna har tagits bort.</para></listitem>
					
				<listitem><para>Upphovsmännen tillhandahar bara en bzip2-paketerad källa.</para>
					<itemizedlist>
						
						<listitem><para>Bara <application>bunzip2</application>:a .tar.bz2-filen och kör <application>gzip -9 </application> på den resulterande tar-filen.</para></listitem>
							
						<listitem><para>md5summorna på den .tar du tillhandahåller måste matcha de från original-tar-filen!</para></listitem>
	
						<listitem><para>Lägga så småningom till en get-orig-source-regel i debian/rules som gör den här förvandlingen automatiskt.</para></listitem>
					
					</itemizedlist>
				</listitem>
					
				<listitem><para>Direktimporterat från SVN</para>
					<itemizedlist>
						<listitem><para>Lägg till get-orig-source i debian/rules</para></listitem>
					</itemizedlist>
				</listitem>
	
			</itemizedlist>

			<para><emphasis role="bold">Följande är <emphasis>inte</emphasis> skäl till att ändra den ursprungliga tarbollen:</emphasis></para>
			
			<itemizedlist>
				
				<listitem><para>Felaktig kataloglayout</para>
					
					<note><para><application>dpkg-source</application> är ganska flexibelt och klarar av att skapa korrekt kataloglayout även om:</para>
						
					<itemizedlist>
						
						<listitem><para>Katalogen inuti tarbollen inte heter &lt;uppström&gt;-&lt;version&gt;.</para></listitem>
				
						<listitem><para>Det finns ingen underkatalog i tarbollen.</para></listitem>
					</itemizedlist>
					</note>
			
				</listitem>
			
				<listitem><para>Filer behöver tas bort för att .diff.gz-filen ska bli mindre (t ex filer som skapades av autotools). Allt som behöver tas bort ska tas bort i <application>clean</application> . rule. Eftersom .diff.gz-filen skapas med diff -u kommer du inte se några borttagna filer i .diff.gz-filen.</para></listitem>
										
				<listitem><para>Filer behöver ändras. Filer som behöver ändras ska vara i .diff.gz. Det är därför den finns!</para></listitem>
				
				<listitem><para>Fel rättigheter på filer. Du kan använda <filename>debian/rules</filename> för att göra det.</para></listitem>
	
			</itemizedlist>
			
			
			<tip><para>Vad gör jag med en .orig.tar.gz som redan innehåller en <filename>debian/</filename>-katalog?</para>
					
				<para>Packa inte om den. Du kan be upphovsmannen/-männen att ta bort katalogen debian/ och skicka en .diff.gz istället. Det här gör det enklare att granska deras jobb.</para>
			</tip>
				
			<note><para>Det är alltid en bra idé att kontakta upphovsmannen/-männnen till programmet och fråga om du får fixa autoconf-problem, katalogstruktur, en utdaterad adress till Free Software Foundation i COPYRIGHT-filer, eller andra saker som inte är specifika till paketeringen men skulle underlätta för dig så att du inte behöver "patcha" källkoden i .diff.gz.</para></note>
		
		</sect2>

		<sect2>
			<title>Copyrightinformation</title>

			<para>Filen <filename>debian/copyright</filename> ska innehålla:</para>
			
			<itemizedlist>
				
				<listitem><para>Licensinformationen för <emphasis>alla</emphasis> filer i källkoden. Ibland lägger upphovsmännen en licens i <filename>COPYING</filename> men har annan licensinformation i vissa av filerna i källkoden.</para></listitem>

				<listitem><para>Upphovsrättshavaren/-havarna och år.</para></listitem>

				<listitem><para><emphasis>Hela</emphasis> licensen om den inte är en av de som finns i <filename>/usr/share/common-licenses</filename>. Om den finns där behöver du bara inkludera förordet (preamble).</para></listitem>

			</itemizedlist>
				
		</sect2>

	</sect1>

</chapter>

