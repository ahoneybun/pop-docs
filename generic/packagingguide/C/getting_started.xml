<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % gnome-menus-C SYSTEM "../../../ubuntu/libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
<!ENTITY distro-rev "6.04">
<!ENTITY distro-version "Dapper Drake">
<!ENTITY ubuntu '<phrase>Ubuntu</phrase>'>
]>
<chapter id="gettingstarted-chap">
	<title>Getting Started</title>
	<sect1 id="tools">
		<title>Essential Packaging Tools</title>
		
		<para>There are many tools written specifically for packaging on Debian based
			systems. Many of them are not <emphasis>essential</emphasis> to creating
			packages but are very helpful and often automate repetitive tasks. However,
			the following is a list of packages that are deemed necessary to begin
			packaging:</para>

		<variablelist>
			<varlistentry>
				<term><application>build-essential</application></term>
				<listitem><para>a meta package that depends on
						<application>libc6-dev</application>,
						<application>gcc</application>, <application>g++</application>,
						<application>make</application>, and
						<application>dpkg-dev</application>. The only one that you might
						not be familiar with is <application>dpkg-dev</application>. It
						contains tools such as
						<application>dpkg-buildpackage</application> and
						<application>dpkg-source</application> that are used to create,
						unpack and build source and binary packages.</para></listitem>
			</varlistentry>

			<varlistentry>
				<term><application>devscripts</application></term>
				<listitem><para>contains many scripts that will make the packager's life
						much easier. Some of the more commonly used are
						<application>debdiff</application>,
						<application>dch</application>, <application>debpkg</application>,
						<application>debuild</application>, and
						<application>debsign</application>.</para></listitem>
			</varlistentry>
		</variablelist>

		<para>There are many more tools that will be introduced as the guide progresses.
			If you want to take the time to install them now here is the list:</para>

		<itemizedlist>

			<listitem><para><application>automake</application> - automatically creates
					Makefile.in's from Makefile.am's</para></listitem>

			<listitem><para><application>debhelper</application> and
					<application>dh-make</application> - this set of scripts helps .deb
					packagers by automating common packaging tasks.
					<application>dh-make</application> can be used to do the initial
					"debianization" and provides many example files.</para></listitem>
		
			<listitem><para><application>gnupg</application> - a complete and free
					replacement for PGP, used for signing packages.</para></listitem>

			<listitem><para><application>lintian</application> - dissects Debian packages
					and reports bugs and policy violations. It contains automated checks
					for many aspects of Debian policy as well as some checks for common
					errors.</para></listitem>
			
			<listitem><para><application>dchroot</application> - a setuid binary that
					allows users to execute a shell or other command under different root
					filesystems.</para></listitem>
			
			<listitem><para><application>pbuilder</application> - constructs a chroot
					system, and builds a package inside the chroot. It is an ideal system
					to use to check that a package has correct
					build-dependencies.</para></listitem>
		</itemizedlist>
	</sect1>

	<sect1 id="binary-source"> <title>Binary and Source Packages</title> <para>Most users
			of a Debian-based distribution such as &ubuntu; will never have to deal with
			the actual source code that is used to create all of the applications on their
			computer. Instead, the source code is compiled into
			<emphasis>binary</emphasis> packages from the <emphasis>source</emphasis>
			package that contains both the source code itself and the rules for making the
			binary package. So packagers upload the source packages with their changes to
			the build systems that then compile the binary packages for each chip
			architecture and distribute the binary .deb files to the apt mirrors.</para>

	</sect1>

</chapter>
