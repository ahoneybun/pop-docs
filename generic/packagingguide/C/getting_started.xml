<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % gnome-menus-C SYSTEM "../../../ubuntu/libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
]>
<chapter id="gs-chap" status="review">
	<title>Getting Started</title>

	<sect1 id="gs-tools" status="review" xreflabel="Packaging Tools">
		<title>Packaging Tools</title>
		
		<para>There are many tools written specifically for packaging on Debian based
			systems. Many of them are not <emphasis>essential</emphasis> to creating
			packages but are very helpful and often automate repetitive tasks. Their
			<application>man</application> and <application>info</application> are good
			source of information. However, the following is a list of packages that are
			deemed necessary to begin packaging:</para>

		<variablelist>
			<varlistentry>
				<term><application>build-essential</application></term>
				<listitem><para>a meta package that depends on
						<application>libc6-dev</application>,
						<application>gcc</application>, <application>g++</application>,
						<application>make</application>, and
						<application>dpkg-dev</application>. The only one that you might
						not be familiar with is <application>dpkg-dev</application>. It
						contains tools such as
						<application>dpkg-buildpackage</application> and
						<application>dpkg-source</application> that are used to create,
						unpack and build source and binary packages.</para></listitem>
			</varlistentry>

			<varlistentry>
				<term><application>devscripts</application></term>
				<listitem><para>contains many scripts that will make the packager's life
						much easier. Some of the more commonly used are
						<application>debdiff</application>,
						<application>dch</application>, <application>debuild</application>, and
						<application>debsign</application>.</para></listitem>
			</varlistentry>

			<varlistentry><term><application>debhelper</application> and
					<application>dh-make</application></term>
				<listitem><para>this set of scripts helps .deb packagers by automating
						common packaging tasks.  <application>dh-make</application> can be
						used to do the initial "debianization" and provides many example
						files.</para></listitem>
			</varlistentry>
				
			<varlistentry><term><application>patch</application> and
					<application>diff</application></term> <listitem><para>used to create
						and apply patches. They are quite extensively used in packaging
						because it is easier, cleaner, and more efficient to represent
						small changes as patches rather than have multiple copies of a
						file.</para></listitem> </varlistentry>
			
			<varlistentry><term><application>gnupg</application></term>
				<listitem><para>a complete and free replacement for PGP used to
						digitally sign files, including packages.</para></listitem>
			</varlistentry>
				
			<varlistentry><term><application>fakeroot</application></term>
				<listitem><para>simulates running a command with root privileges. This
				is useful for creating binary packages while a regular user.</para></listitem>
			</varlistentry>
			
			<varlistentry><term><application>lintian</application> and
					<application>linda</application></term>
				<listitem><para>dissect Debian packages and report bugs and policy
						violations. They contain automated checks for many aspects of
						Debian policy as well as some checks for common
						errors.</para></listitem>
			</varlistentry>
			
			<varlistentry><term><application>pbuilder</application></term>
				<listitem><para>constructs a chroot system, and builds a package inside
						the chroot. It is an ideal system to use to check that a package
						has correct build-dependencies and to build clean packages to be
						distributed and tested.</para></listitem> </varlistentry>
		</variablelist>

	</sect1>


	<sect1 id="gs-bin_source" status="review" xreflabel="Binary and Source Packages">
		<title>Binary and Source Packages</title>
		
		<para>Most users of a Debian-based distribution such as &ubuntu; will never have
			to deal with the actual source code that is used to create all of the
			applications on their computer. Instead, the source code is compiled into
			<emphasis>binary</emphasis> packages from the <emphasis>source</emphasis>
			package that contains both the source code itself and the rules for making the
			binary package. So packagers upload the source packages with their changes to
			the build systems that then compile the binary packages for each chip
			architecture and distribute the binary .deb files to the apt mirrors.</para>

	</sect1>
		
	<sect1 id="gs-pbuilder" status="review" xreflabel="Pbuilder">
	<title>Building With Pbuilder</title>
	<para>Pbuilder is a package builder the builds the package from within a chrooted
		environment. You can build binary packages without using
		<application>pbuilder</application> but you must have all the build
		dependencies installed on your system first. Pbuilder allows the packager to
		check the build dependencies because the package is built within a minimal
		&ubuntu; installation and the build dependencies are downloaded according to
		the <filename>debian/control</filename> file.</para>

	<sect2>
		<title>Installing and Configuring a Pbuilder Environment</title>
		<para>The first, and perhaps most obvious, thing to do is install
			<application>pbuilder</application>. Once that is accomplished you will
			need to set up the <filename>/etc/pbuilderrc</filename> configuration
			file. </para>
		<screen>
# URL of package archive.				
MIRRORSITE=http://archive.ubuntu.com/ubuntu # URL of package archive.
			
# Release you want to use.
DISTRIBUTION=dapper 

# Directory where pbuilder will look for apt configuration files.
APTCONFDIR="/etc/pbuilder/apt.config/"

# Other repositories you want pbuilder to use. In this case the Universe repos.
OTHERMIRROR="deb http://archive.ubuntu.com/ubuntu dapper universe multiverse"
		</screen>

		<para>To avoid having <application>pbuilder</application> complain about
			unauthenticated packages you have apt allow unauthenticated packages by:</para>
		<screen>sudo mkdir /etc/pbuilder/apt.config/
sudo cp -ar /etc/apt/* /etc/pbuilder/apt.config/
sudo cat "APT::Get::AllowUnauthenticated 1;" >> \
/etc/pbuilder/apt.config/apt.conf.d/allow-unauthenticated
		</screen>

		<caution><para>You will need to remove the
				<filename>99update-notifier</filename> file from the
				<filename>/etc/pbuilder/apt.config/apt.conf.d/</filename> directory as
				it can potentially break future pbuilder updates because
				<application>update-notifies</application> is not usually
				installed.</para></caution>

		<para>Once you have adjusted the <application>pbuilder</application>
			configuration files you can create the pbuilder chroot by:</para>

		<screen>sudo pbuilder create --distribution dapper</screen>
		
		<note><para>Creating a pbuilder environment will take some time as
				<application>debootstrap</application> is essentially making a minimal
				&ubuntu; installation.</para></note>

	</sect2>	
	<sect2>
		<title>Using the Pbuilder</title>
		<para>Now that you have a running pbuilder you can build binary packages from
			the source package by:</para>

		<screen>sudo pbuilder build *.dsc</screen>

		<para>This will build all the source packages in the current directory. The
			resulting .debs and source packages can be found in
			<filename>/var/cache/pbuilder/result/</filename> (default) or whatever you set the
			<emphasis>BUILDRESULT</emphasis> variable to be in the
			<filename>/etc/pbuilderrc</filename> configuration file.</para>

	</sect2>

	<sect2>
		<title>Updating the Pbuilder</title>
		
		<para>You should always have a current pbuilder whenever you are testing your
			source packages, especially when you are building for a development
			release that is rapidly changing, to ensure that the dependencies are
			properly found. To update your pbuilder use:</para>

		<screen>sudo pbuilder update</screen>

		<para>Or if you change something in the <filename>/etc/pbuilderrc</filename>
			configuration file (or any pbuilder config file, for example
			<filename>/etc/pbuilder/apt.config/sources.list</filename>) :</para>

		<screen>sudo pbuilder update --override-config</screen>

		<para>You can also use this update technique to change releases. Once the
			development release has been released you can start building for the next
			development releases by changing all of the occurrences of the previous
			release name to the new one in <filename>/etc/pbuilderrc</filename> and
			<filename>/etc/pbuilder/apt.config/sources.list</filename> and then
			updating the pbuilder.</para>
		
	</sect2>
		
</sect1>

</chapter>
