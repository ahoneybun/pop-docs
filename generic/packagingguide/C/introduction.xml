<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % gnome-menus-C SYSTEM "../../../ubuntu/libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
]>
<chapter id="intro-chap" status="complete">
	<title id="intro">Introduction</title>
	
	<para>Welcome to the &ubuntu; Packaging Guide! This guide is primarily addressed to
		those who would like to make and maintain &ubuntu; packages. Although many of the
		concepts in this guide could be used to make binary packages for personal use, it
		is designed for those people wanting to distribute their packages to and for
		others. While it is also written with the &ubuntu; Linux distribution in mind, it
		should also be useful for any Debian-based distribution.</para>

	<para>There are several reasons you might want to learn how to package for Ubuntu.
		First, building and fixing &ubuntu; packages is a great way to contribute to the
		&ubuntu; community. It is also a good way to learn how &ubuntu; and the
		applications you have installed work. Maybe you want to install a package that
		is not in the &ubuntu; repositories. Hopefully after you have completed this guide
		you will have the tools and knowledge you need to do all of these things.</para>

	<sect1 id="intro-prereq" status="complete">
		<title>Prerequisites</title>
			
		<para>This guide assumes that the reader has a reasonable knowledge of building
			and installing software from source on Linux distributions. The guide also
			uses the Command Line Interface (CLI) throughout, so you should be comfortable
			using a terminal. Below is a quick overview or review of some of the
			requisite knowledge.</para>

		<sect2>
			<title>make</title> 
			<para><emphasis role="bold">Description:</emphasis></para>
		
			<para>GNU Make is a very important software building tool. It is used to transform
				a complex compilation task into a trivial one. It is important that you
				know how to use it, because we will store most of the information about
				the packaging process in a Makefile.</para>
																			  

			<para><emphasis role="bold">References:</emphasis></para>

			<para>GNU Make has a well-written <application>man</application> page and extensive
				<application>info</application> documentation.  Documentation is also available
				at the <ulink url="www.gnu.org/software/make/manual/make.html">GNU
			</ulink> website.</para>

		</sect2>

		<sect2>
			<title>./configure</title>
			<para><emphasis role="bold">Description:</emphasis></para>
				
			<para>This script is included in almost all Linux source, especially for
				software written in compiled languages such as C and C++. It is used to
				generate a Makefile (file used by <application>make</application>) that is
				properly configured for your system. Standard Debian packaging tools use it,
				so it is important that you know what the
				<filename>configure</filename> script does. You do not need to know how to
				create a <filename>configure</filename> script yourself, as the software
				author (or <application>autoconf</application> will do that.  However, you 
				may have to adjust it at some point to get a &ubuntu; package to build 
				correctly.</para>

			<para><emphasis role="bold">Quick Howto:</emphasis></para>

			<para>First, get the <application>GNU Hello</application> source. From a
				terminal:</para>

			<screen>
wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz   # get the package
tar -xzf hello-2.1.1.tar.gz                            # unpack it
cd hello-2.1.1/
			</screen>

			<para>Now, with <command>./configure</command> you can run the
				<filename>configure</filename> script to generate a Makefile that is
				customized to your system.</para>

			<para>You can also give <filename>./configure</filename> command line options.
				For instance, by default <application>GNU Hello</application> will install
				to the <filename>/usr/local/</filename> directory. You could instead
				install it somewhere else (a personal binary directory,
				<filename>~/programs/</filename>, for example)</para>

			<screen>./configure --prefix="$HOME/programs/"   # specify install directory.</screen>

			<para>You can see all the <filename>./configure</filename> options by running
				<application>./configure --help</application>.</para>

			<para><emphasis role="bold">References:</emphasis></para>

			<para>Information on <filename>./configure</filename> can be found in the
				<application>make</application> documentation.</para>
							
		</sect2>

		<sect2>
			<title>Apt/Dpkg</title>
			<para>Beyond the basic use of installing programs,
				<application>apt</application> and <application>dpkg</application> have
				many features that are useful for packaging.</para>
			<itemizedlist>
				
				<listitem><para><emphasis role="bold">apt-cache dump</emphasis> - lists every
						package in the cache. This command is especially helpful
						in combination with a <application>grep</application> pipe such as
						<application>apt-cache dump | grep foo</application> to search for
						packages whose names or dependencies include <quote>foo</quote>.</para></listitem>

				<listitem><para><emphasis role="bold">apt-cache policy</emphasis> - lists
						the repositories
						(main/restricted/universe/multiverse) in which a package exists.</para></listitem>

				<listitem><para><emphasis role="bold">apt-cache show </emphasis> - displays
						information about a binary package.</para></listitem>

				<listitem><para><emphasis role="bold">apt-cache showsrc </emphasis> -
						displays information about a source package.</para></listitem>

				<listitem><para><emphasis role="bold">apt-cache rdepends </emphasis> -
						shows reverse dependencies for a package (which packages
						require the queried one.</para></listitem>

				<listitem><para><emphasis role="bold">dpkg -S </emphasis> - lists the
						binary package to which a particular file belongs. </para></listitem>

				<listitem><para><emphasis role="bold">dpkg -l </emphasis> - lists currently
						installed packages. This is similar to <application>apt-cache
							dump</application> but for installed
						packages.</para></listitem>
	
				<listitem><para><emphasis role="bold">dpkg -c </emphasis> - lists the
						contents of a binary package. It is useful for ensuring that
						files are installed to the right places.</para></listitem>

				<listitem><para><emphasis role="bold">dpkg -f </emphasis> - shows the
						control file for a binary package. It is useful for ensuring that
						the dependencies are correct.</para></listitem>

				<listitem><para><emphasis role="bold">grep-dctrl</emphasis> - searches for
						specialized information in packages. It is a specific use of the
						<application>grep</application> package (but not installed by default).</para></listitem>

			</itemizedlist>
				
		</sect2>

		<sect2>
			<title>diff and patch</title>

			<para>The <application>diff</application> program can be used to compare two
				files and to make patches. A typical example might be <application>diff -ruN file.old
				file.new &gt; file.diff</application>. This command will create a diff 
				(recursively if directories are used) that shows the changes, or
				<quote>delta</quote>, between the two files.</para>

			<para>The <application>patch</application> program is used to apply a patch
				(usually created by <application>diff</application> or another similar
				program) to a file or directory. To apply the patch created above, we can
				invoke <application>patch -p0 &lt; file.diff</application>. The
				<emphasis>-p</emphasis> tells <application>patch</application> how much it
				should strip from the paths for the file names in the patch.  -p0 means to
				strip nothing, or leave the path intact.</para>
			
		</sect2>

	</sect1>
</chapter>
