<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % gnome-menus-C SYSTEM "../../../ubuntu/libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
]>
<chapter id="Ubuntu-chap" status="review">
	<title>Ubuntu Specific Packaging</title>
	<para>Material that is specific to &ubuntu; development.</para>

	<sect1 id="kubuntu" status="writing">
		<title>Packaging for Kubuntu</title>
		<para>Below are package issues specific to KDE.</para>
		<sect2 id="generating-pot-files">
			<title>Generating .pot Files</title>
			<para>The Ubuntu translation website <ulink url="https://launchpad.net/rosetta/">Rosetta</ulink>
				now supports KDE, which means KDE packages need to support Rosetta by
				generating .pot template files for translators. If you use <application>cdbs</application>
				in Dapper your package should now do this automatically, build and check for a .pot
				file in po/ directory.</para>
			<para>You will need the <ulink url="../files/kubuntu_01_kdepot.diff">kdepot patch</ulink> (or similar, it may not
				apply exactly depending on the age of the admin directory).</para>
			<para>If your package uses <application>debhelper</application>, or <application>cdbs</application>
				and includes it's own kde.mk file you need to add the rules yourself.</para>
			<para>For <application>cdbs</application> add these lines to your debian/rules:</para>
			<screen>
common-post-build-arch::
	mkdir -p po
        XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages

clean::
        rm -rf po</screen>
			<para>And for <application>debhelper</application> the following to the end of the
				<emphasis>install</emphasis> rule:</para>
			<screen>
mkdir -p po
XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages</screen>
			<para>Then add this to the <emphasis>clean</emphasis> rule:</para>
			<screen>
rm -f po/*.pot</screen>
		</sect2>
	</sect1>

	<sect1 id="ubuntu-upload" status="review">
		<title>Uploading and Review</title>
		<para><ulink url="http://revu.tauware.de">REVU</ulink> is a web-based tool to
			give people who have worked on packages a chance to "put their packages
			out there" for other people to look at and comment on in a structured manner.</para>
		<para>Once a packager's <ulink url="https://wiki.ubuntu.com/GPGKey">GPG key</ulink>
			has been added to the REVU keyring, the packager can begin to upload his
			packages to REVU. They are then commented by reviewers and the packager
			can send updates of his package to REVU until it gets advocated by at
			least 2 <ulink url="https://wiki.ubuntu.com/MOTU">MOTU</ulink>s. When that
			point is reached, a MOTU uploads the approved package to Universe.</para>
		<sect2 id="contribute-as-uploader">
			<title>Contributing as an Uploader</title>
			<para>Would you like a program to be distributed in &ubuntu; that is not available in
				the development version of either &ubuntu; (currently &distro-version;) or Debian
				(Sid)? Then you might like to package this program and upload it to REVU!
				In order to do so, you need to register as an uploader on the REVU system.</para>
			<para>What you require is:</para>
			<itemizedlist>
				<listitem><para>A GPG key</para></listitem>
				<listitem><para>Knowledge on how to make Debian packages</para></listitem>
				<listitem><para>One or more new packages to upload</para></listitem>
			</itemizedlist>
			<note><para>It is not necessary to get your key signed, but it is a good idea
					anyway.</para></note>
			<para>Send a signed email with your GnuPG keyid, asking to be added to the REVU keyring,
				to <email>keyring@tiber.tauware.de</email>. One of the REVU admins will then add
				you then to the uploaders keyring. You don't need a password to upload packages,
				only to log in to the website and reply to comments.</para>
			<sect3 id="upload-your-packages">
				<title>Uploading your packages</title>
				<para>Uploading to REVU uses <application>dput</application>. You need to set dput
					before your first upload. Edit <filename>/etc/dput.cf</filename> and add
					the following entry:</para>
				<screen>
[revu]
fqdn = revu.tauware.de
incoming = /incoming
login = anonymous</screen>
				<para>Only upload signed packages and always include the original tarball, otherwise reviewers
					will not be able to look at your extracted source package.</para>
				<para>In order to do so, use the options "-S -sa" to build only the source package and also
					include the original source in the package.</para>
				<para>After the package is built, you can use <application>dput</application> with the above
					config file changes to upload it by specifying just the *_source.changes file that was
					created:</para>
					<screen>
dput *_source.changes</screen>
				<note><para>If you are reuploading a changed package (after receiving reviews), you may get an
						error like this:</para></note>
				<screen>
Upload package to host revu
Already uploaded to tauware.de
Doing nothing for myapp_source.changes</screen>
				<para>To fix, add the -f option to dput to force the upload.</para>
				<para>Processing of uploads is done every 5 minutes. So, if your upload does not show up,
				please contact the REVU administrators by email or join the IRC channel #ubuntu-motu.</para>
			</sect3>
			<sect3 id="howto-login">
				<title>How to login to REVU</title>
				<para>After your first upload, you will be automatically registered to the database and
					assigned a random password. Use the email address you used in the changelog file
					of your upload as login and press the 'recover password' link, so as to receive
					your password by email.</para>
			</sect3>
			<sect3 id="view-and-comment-uploads">
				<title>View and comment uploads</title>
				<para>Packages uploaded to REVU are made public. You can browse them without logging
					in to the system. However, commenting uploads is only available to registered
					users. As an uploader, you can only comment your own uploads. This can be
					useful to give reviewers some info on the changes you have made between two
					uploads of your packages.</para>
			</sect3>
			<sect3 id="additional-rules">
				<title>Additional rules</title>
				<itemizedlist>
					<listitem><para>You must have reviewed the package for known security
							vulnerabilities and provide patches for all of them.</para></listitem>
					<listitem><para>We can refuse the package on the grounds of known security
							problems and design.</para></listitem>
					<listitem><para>You must have included a copyright and licence file, and those
							must allow inclusion of the package in the universe component
							and on mirrors.</para></listitem>
					<listitem><para>The package must be known to build on top of the main component
							of the current &ubuntu; stable release, it may require other
							packages already in Universe.</para></listitem>
				</itemizedlist>
			</sect3>
			<sect3 id="getting-help">
				<title>Getting Help</title>
				<para>If you need help on these steps or if you have more questions about REVU, you can
					ask on #ubuntu-motu on the Freenode network.</para>
			</sect3>
		</sect2>
		<sect2 id="contribute-as-reviewer">
			<title>Contribute as a Reviewer</title>
			<para>If you have some experience in packaging and know the policy well, then you can help improving
				the packages uploaded to universe and guide packagers in doing so, by contributing as a
				reviewer on REVU.</para>
			<para>What you need:</para>
			<itemizedlist>
				<listitem><para>A GPG key</para></listitem>
				<listitem><para>Be a MOTU</para></listitem>
			</itemizedlist>
			<para>Send a signed and encrypted mail with your password and GnuPG keyid to
				<email>keyring@tiber.tauware.de</email>. And you will be marked as a Reviewer in the
				database.</para>
			<sect3 id="using-revu-tools">
				<title>Using REVU-tools</title>
				<para><application>REVU-Tools</application> is a set of scripts used on REVU to automatize
					the reviewing process. It gathers fours scripts: revu-build, revu-orig, revu-report
					and a hook script for pbuilder, used by revu-build to perform build tests.</para>
				<para>On REVU, only REVU admins can run these tools. If you are not a REVU admin, ask
					one to run it on the package you want to review.</para>
				<para>Among the details that REVU-tools gives are:</para>
				<itemizedlist>
					<listitem><para>Whether the package is a Debian-native.</para></listitem>
					<listitem><para>Whether the package contains a usable debian/watch file.</para></listitem>
					<listitem><para>Whether new versions of the program are available, using the debian/watch
							file with uscan.</para></listitem>
					<listitem><para>Whether the md5 sums of the upstream tarball and the orig.tar.gz are
							identical, and whether this is normal or not.</para></listitem>
					<listitem><para>Whether there is a diff between the extracted upstream tarball and
							orig.tar.gz</para></listitem>
					<listitem><para>Whether the package fails to build from source in pbuilder.</para></listitem>
					<listitem><para>Whether lintian and linda are happy with the package.</para></listitem>
					<listitem><para>Whether running debuild -S -sa on this package generates files in the diff
							outside of debian/.</para></listitem>
				</itemizedlist>
				<para>REVU-Tools can also be used stand-alone, install the
					<application>revu-tools</application> package.</para>
			</sect3>
		</sect2>
	</sect1>

	<sect1 id="ubuntu-sync" status="review">
		<title>Merges and Syncs</title>
		
		<para>&ubuntu; is based on the Debian Linux distribution and uses the same package
			managment system (APT). It the beginning of each &ubuntu; development cycle the
			packages in &ubuntu; are updated to those in Debian unstable. However,
			because &ubuntu; is not the same as Debian, some of the packages need to
			be modified to work in &ubuntu;. There might also be bug fixes that &ubuntu;
			developerss have introduced into the packages. You can determine whether this has
			taken place by noting the package version. If the package version include
			ubuntu in it (an example would be gimp-2.2.9-3ubuntu2) then the &ubuntu;
			developers have made some change and it is no longer the same as the Debian package.
			There are more than 1000 such packages in the Universe repository.</para>
		
		<para>At the start of the development cycle a decision has to be made with regard
			to these ubuntu versioned packages. Of course if the Debian version hasn't
			changed since the last &ubuntu; release then nothing needs to be changed.
			However, if there is a newer version of the package in Debian then one
			of two things should happen. If all of the reasons that the ubuntu version
			existed (bug fixes, dependencies, etc.) are fixed in the new Debian package
			then we can just take the Debian package directly. This is called a
			<emphasis>sync</emphasis>. However, if the new Debian version has the same
			issues that caused the ubuntu version to be made, then those changes need
			to be applied to the new Debian version. This is called <emphasis>merging</emphasis>.
		</para>
		<sect2 id="merge-tutorial" status="writing">
			<title>Merging Tutorial</title>
			<para>The merging process involves looking at the changes to both the Debian
				Ubuntu source packages and determining. Let's now look at an example.
				Our example will be the classic CD burning program <application>xcdroast</application>.
			</para>
			<para>To start, let's make a folder to hold our project and move there:</para>
			<screen>
mkdir ~/xcdroast
cd ~/xcdroast</screen>
			<para>Now let's download all of the source packages that are involved into
				this directory:</para>
			<itemizedlist>
				<listitem><para>The <application>xcdroast</application> source tarball that is used
						by all versions:</para>
					<itemizedlist>
						<listitem>
<para><ulink url="http://ftp.debian.org/debian/pool/main/x/xcdroast/xcdroast_0.98+0alpha15.orig.tar.gz">xcdroast_0.98+0alpha15.orig.tar.gz</ulink></para>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<para>The &ubuntu; Breezy source package files:</para>
					<itemizedlist>
						<listitem>
<para><ulink url="http://archive.ubuntu.com/ubuntu/pool/universe/x/xcdroast/xcdroast_0.98+0alpha15-1.1ubuntu1.dsc">
		xcdroast_0.98+0alpha15-1.1ubuntu1.dsc</ulink></para>
						</listitem>
						<listitem><para>
<ulink url="http://archive.ubuntu.com/ubuntu/pool/universe/x/xcdroast/xcdroast_0.98+0alpha15-1.1ubuntu1.diff.gz">
	xcdroast_0.98+0alpha15-1.1ubuntu1.diff.gz</ulink></para>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<para>The Debian source package files that the Breezy packages are derived from:</para>
						<itemizedlist>
							<listitem>
<para><ulink url="http://ftp.debian.org/debian/pool/main/x/xcdroast/xcdroast_0.98+0alpha15-1.1.diff.gz">
		xcdroast_0.98+0alpha15-1.1.diff.gz</ulink></para>
							</listitem>
							<listitem>
<para><ulink url="http://ftp.debian.org/debian/pool/main/x/xcdroast/xcdroast_0.98+0alpha15-1.1.dsc">
		xcdroast_0.98+0alpha15-1.1.dsc</ulink></para>
							</listitem>
						</itemizedlist>
				</listitem>
				<listitem>
					<para>The new Debian source package files that the Dapper packages will be
						derived from:</para>
					<itemizedlist>
						<listitem>
<para><ulink url="http://ftp.debian.org/debian/pool/main/x/xcdroast/xcdroast_0.98+0alpha15-3.dsc">
		xcdroast_0.98+0alpha15-3.dsc</ulink></para>
						</listitem>
						<listitem>
<para><ulink url="http://ftp.debian.org/debian/pool/main/x/xcdroast/xcdroast_0.98+0alpha15-3.diff.gz">
		xcdroast_0.98+0alpha15-3.diff.gz</ulink></para>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
			<note><para>>This can also be done by searching for the Debian packages
				at <ulink url="packages.debian.org">packages.debian.org</ulink> and the Ubuntu
				packages at <ulink
					url="packages.ubuntu.com">packages.ubuntu.com</ulink>.</para></note>
		<tip><para>A very useful tool to have when doing merges (or any Ubuntu packaging) is
				<application>devscripts</application>. If you do not have that already
				installed install it before procceding.</para></tip>
			
			<para>By looking at the &ubuntu; changelog you should be able to know what to expect
				the differences between the Ubuntu and Debian version that it was derived
				from are going to be. For xcdroast the &ubuntu; changelog can be found at
	<ulink url="http://changelogs.ubuntu.com/changelogs/pool/universe/x/xcdroast/xcdroast_0.98+0alpha15-1.1ubuntu1/changelog">
					changelogs.ubuntu.com</ulink>. It says that a .desktop file was fixed and properly
				installed to fix a bug reported in
				<ulink url="https://launchpad.net/distros/ubuntu/+source/xcdroast/+bug/2698">Malone</ulink>.
			</para>
			
			<para>Now let's see what the actual changes in the source packages are:</para>
			<screen>
debdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-1.1ubuntu1.dsc > ubuntu.debdiff
less ubuntu.debdiff</screen>
			
			<para>The lines that start with - have been removed from the Debian version and those that start
				with + have been added to the &ubuntu; version.</para>
			<para>This is what we see:</para>
			<itemizedlist>
				<listitem>
					<para>in debian/rules install is being used instead of cp to install the xcdroast icon.
						Also, there is a new line installing the .desktop file.</para>
				</listitem>
				<listitem>
					<para>in debian/changelog the changes made are added to the changelog entry.</para>
				</listitem>
				<listitem>
					<para>in debian/dirs usr/share/applications has been added for install lines above to
						work properly.</para>
				</listitem>
				<listitem>
					<para>xcdroast.desktop is added</para>
				</listitem>
			</itemizedlist>
			
			<para>Now we know why the Debian source was changed. Now we need to see what has changed in
				the Debian versions.</para>
			<screen>
debdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-3.dsc > debian.debdiff
less debian.debdiff</screen>
			<para>There is a lot more in this debdiff than in the last one. One way we can get a
				better idea of what has changed is to see what files were changed in the debdiff:</para>
			
			<screen>grep diff debian.debdiff</screen>
			
			<para>This indicates that debian/postinst, debian/rules, debian/changelog, debian/doc-base.manual,
				debian/control, and debian/menu were changed in the new Debian version.</para>
			<para>Thus we can see that we need to check debian/rules to see if the &ubuntu; changes were made.
				We can also see that debian/dirs was not changed from the old Debian version. Let us
				now look at the files. We can unpack the source package by using
				<application>dpkg-source</application>:</para>
			
			<screen>dpkg-source -x xcdroast_0.98+0alpha15-3.dsc</screen>
			
			<para>This will unzip the xcdroast_0.98+0alpha15.orig.tar.gz file to create a xcdroast-0.98+0alpha15
				directory and apply the changes found in xcdroast_0.98+0alpha15-3.diff.gz.</para>
			<para>Lets now go to the debian directory:</para>
			
			<screen>cd xcdroast-0.98+0alpha15/debian/</screen>
			
			<para>One can see in rules that changes made by &ubuntu; were not applied to the new Debian version.
				This means that:</para>
			
			<screen>cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps</screen>
			
			<para>...should be changed to:</para>
			
			<screen>
#cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps

#install desktop and icon
install -D -m 644 $(CURDIR)/debian/xcdroast.desktop $(CURDIR)/debian/xcdroast/usr/share/applications/xcdroast.desktop
install -D -m 644 $(CURDIR)/debian/xcdroast.xpm $(CURDIR)/debian/xcdroast/usr/share/pixmaps/xcdroast.xpm</screen>

			<para>Now in dirs the following line needs to be added for the .desktop file to be installed:</para>
			<screen>usr/share/applications</screen>
			
			<para>Now we need the actual .desktop file (<emphasis>xcdroast.desktop</emphasis>)
				from the ubuntu.debdiff (or the ubuntu source package) we see that it is:</para>
			<screen>
[Desktop Entry]
Encoding=UTF-8
Name=X-CD-Roast
Comment=Create a CD
Exec=xcdroast
Icon=xcdroast.xpm
Type=Application
Categories=Application;AudioVideo;</screen>
			
			<para>The last change that needs to be made is in changelog. Not only do we need to
				add what we have just done (resync to Debian) but we should also add in the
				previous &ubuntu; changelog entries. To do this run dch -i -D dapper and put
				something to the effect of:</para>
			<screen>
xcdroast (0.98+0alpha15-3<emphasis>ubuntu1</emphasis>) dapper; urgency=low

  * Resynchronise with Debian.</screen>

			<para>Make sure to change the version number to the correct &ubuntu; version.
				Also add:</para>
			<screen>
xcdroast (0.98+0alpha15-1.1ubuntu1) breezy; urgency=low

  * Fix and install existing .desktop file. (Closes Malone #2698)
				
  -- Barry deFreese &lt;bddebian@comcast.net&gt;  Sat,  1 Oct 2005 19:39:04 -0400</screen>
			<para>between the 0.98+0alpha15-1.1 and 0.98+0alpha15-2 log entries.</para>
			
			<para>Now you can build and test the new source pacakges. There are different ways to do this but one example is:</para>
			<screen>
cd ..
debuild -S
cd ..
sudo pbuilder build xcdroast_0.98+0alpha15-3ubuntu1.dsc</screen>
			
			<para>This will build the source package and sign it and then build the .deb in a pbuilder
				environment to make sure it builds correctly. Make sure to always test your packages
				before submitting patches, etc. Now the last step is to make a debdiff that can be
				submitted to a bug report or the MOTUs on the #ubuntu-motu irc channel. To do this
				we want the difference between the Debian sid source package and the new &ubuntu; version:
			</para>
			<screen>debdiff xcdroast_0.98+0alpha15-3.dsc xcdroast_0.98+0alpha15-3ubuntu1.dsc >
				xcdroast_0.98+0alpha15-3ubuntu1.debdiff</screen>
		</sect2>
	</sect1>

</chapter>
