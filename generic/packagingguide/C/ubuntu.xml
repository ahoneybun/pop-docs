<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % gnome-menus-C SYSTEM "../../../ubuntu/libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
]>
<chapter id="ubuntu-chap" status="review">
	<title>Ubuntu Packaging</title>

	<sect1 id="ubuntu-upload" status="review">
		<title>Uploading and Review</title>

		<para>Once you have created a source package (either a completely new package or
			just an update/bugfix) you then you will probably want to distribute your
			package so that other people can enjoy your hard work. The most effective way
			to do that for &ubuntu; is to contribute your package to the Universe repository.
			The community developers that are responsible for the Universe repository are
			known as Masters of the Universe (<ulink
				url="https://wiki.ubuntu.com/MOTU">MOTU</ulink>). <ulink
				url="http://revu.tauware.de">REVU</ulink> is a web-based tool that gives
			people a place to upload their source packages for other people to look at and
			MOTUs to review in a structured manner.</para>

		<sect2 id="contribute-as-uploader">
			<title>Contributing as an Uploader</title>
		
			<para>First, you will need to have your <ulink
					url="https://wiki.ubuntu.com/GPGKey">GPG Key</ulink> added to the REVU
				keyring. This ensures that your packages really come from you and helps track
				uploads.</para>
	
			<para>To add your key, send a <emphasis>signed</emphasis> email with your GnuPG
				key ID, asking to be added to the REVU keyring, to
				<email>keyring@tiber.tauware.de</email>. One of the REVU admins will then
				add you to the uploaders keyring and reply to your email. You don't
				need a password to upload packages, only to log in to the website and
				reply to comments.</para>

			<note><para>It is not necessary to get your key signed to upload to REVU, but
					it is a good idea to have it signed at some point.</para></note>
			
			
			<sect3 id="upload-your-packages">
				<title>Uploading your packages</title>

				<para>Uploading to REVU uses <application>dput</application>. The &ubuntu;
					version of <application>dput</application> already knows about REVU so
					you do not need to change any configuration files. Only upload signed
					packages, and unlike other repositories, you should always include the
					original tarball, otherwise reviewers will not be able to look at your
					extracted source package. In order to do so, use the options "-S -sa"
					with <application>debuild</application> or
					<application>dpkg-buildpackage</application> to build only the source
					package and also include the original source in the package.</para>
				
				<para>After the source package is built, you can use
					<application>dput</application> with the above config file changes to
					upload it by specifying just the <filename>_source.changes</filename>
					file that was created: </para>

				<screen>dput revu *_source.changes</screen>

				<note><para>If you are reuploading a changed package (after receiving
						reviews), you may get an error like this:</para>
					
				<screen>
Upload package to host revu
Already uploaded to tauware.de
Doing nothing for myapp_source.changes</screen>
			
				<para>To fix, add the -f option to dput to force the upload or remove the
					<filename>.upload</filename> file that was created by
					<application>dput</application>.</para></note>
			
				<para>Processing of uploads is done every 5 minutes. So, if your upload does not show up,
				please contact the REVU administrators by email or join the IRC channel #ubuntu-motu.</para>
		
			</sect3>
		
			<sect3 id="howto-login">
				<title>How to login to REVU</title>
			
				<para>After your first upload, you will be automatically registered to the
					database and assigned a random password. On the <ulink
						url="http://revu.tauware.de">REVU</ulink> website, use the email
					address you used in the changelog file of your upload as the login and
					press the 'recover password' link. You will be taken to a page that
					has your encrypted password with instructions on how to decrypt
					it.</para>
				
			</sect3>

			<sect3 id="view-and-comment-uploads">
				<title>View and comment uploads</title>
			
				<para>Packages uploaded to REVU are made public. You can browse them without logging
					in to the system. However, commenting uploads is only available to registered
					users. As an uploader, you can only comment your own uploads. This can be
					useful to give reviewers some info on the changes you have made between two
					uploads of your packages.</para>

			</sect3>

			<sect3 id="additional-rules">
				<title>Additional rules</title>
		
				<itemizedlist>

					<listitem><para>You must have reviewed the package for known security
							vulnerabilities and provide patches for all of them.</para></listitem>
					
					<listitem><para>The package can be refused on the grounds of known
							security problems and design.</para></listitem>
					
					<listitem><para>You must have included a copyright and license file, and those
							must allow inclusion of the package in the universe component
							and on mirrors.</para></listitem>
					
					<listitem><para>The package must be known to build on top of the main component
							of the current &ubuntu; stable release, it may require other
							packages already in Universe.</para></listitem>
				</itemizedlist>
			</sect3>

			<sect3 id="getting-help">
				<title>Getting Help</title>
				<para>If you need help on these steps or if you have more questions about REVU, you can
					ask on #ubuntu-motu on the Freenode IRC network.</para>
			</sect3>

		</sect2>

	</sect1>

	<sect1 id="ubuntu-sync" status="review">
		<title>Merges and Syncs</title>



		<important><para><emphasis role="bold">Requirements:</emphasis>
				build-essential, automake, gnupg, lintian, fakeroot,
				patchutils, debhelper and <xref
					linkend="gs-pbuilder"/>.</para></important>
		
		<para>&ubuntu; is based on the Debian Linux distribution and uses the same package
			management system (APT). At the beginning of each &ubuntu; development cycle the
			packages in &ubuntu; are updated to those in Debian unstable. However,
			because &ubuntu; is not the same as Debian, some of the packages need to
			be modified to work in &ubuntu;. There might also be bug fixes that &ubuntu;
			developers have introduced into the packages. You can determine whether this has
			taken place by noting the package version. If the package version include
			ubuntu in it (an example would be gimp-2.2.9-3ubuntu2) then the &ubuntu;
			developers have made some change and it is no longer the same as the Debian package.
			There are more than 1000 such packages in the Universe repository.</para>
		
		<para>At the start of the development cycle a decision has to be made with regard
			to these Ubuntu versioned packages. Of course if the Debian version hasn't
			changed since the last &ubuntu; release then nothing needs to be changed.
			However, if there is a newer version of the package in Debian, then one
			of two things should happen. If all of the reasons that the Ubuntu version
			existed (bug fixes, dependencies, etc.) are fixed in the new Debian package,
			then we can just take the Debian package directly. This is called a
			<emphasis>sync</emphasis>. However, if the new Debian version has the same
			issues that caused the ubuntu version to be made, then those changes need
			to be applied to the new Debian version. This is called <emphasis>merging</emphasis>.
		</para>
		<sect2 id="merge-tutorial">
			<title>Merging Tutorial</title>
			<para>The merging process involves looking at the changes to both the Debian and
				Ubuntu source packages and determining what has changed, and what changes are
				Ubuntu-specific. Let's now look at an example.
				Our example will be the classic CD burning program, <application>xcdroast</application>.
			</para>
			<para>To start, let's make a folder to hold our project and move there:</para>
			<screen>
mkdir ~/xcdroast
cd ~/xcdroast</screen>
			<para>Now let's download all of the source packages involved into
				this directory:</para>
			<itemizedlist>
				<listitem><para>The <application>xcdroast</application> source tarball that is used
						by all versions:</para>
					<itemizedlist>
						<listitem>
<para><ulink url="http://snapshot.debian.net/archive/2006/01/16/debian/pool/main/x/xcdroast/xcdroast_0.98+0alpha15.orig.tar.gz">xcdroast_0.98+0alpha15.orig.tar.gz</ulink></para>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<para>The &ubuntu; Breezy source package files:</para>
					<itemizedlist>
						<listitem><para>
<ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-1.1ubuntu1.dsc">
		xcdroast_0.98+0alpha15-1.1ubuntu1.dsc</ulink></para>
						</listitem>
						<listitem><para>
<ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-1.1ubuntu1.diff.gz">
	xcdroast_0.98+0alpha15-1.1ubuntu1.diff.gz</ulink></para>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<para>The Debian source package files that the Breezy packages are derived from:</para>
						<itemizedlist>
							<listitem>
<para><ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-1.1.diff.gz">
		xcdroast_0.98+0alpha15-1.1.diff.gz</ulink></para>
							</listitem>
							<listitem>
<para><ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-1.1.dsc">
		xcdroast_0.98+0alpha15-1.1.dsc</ulink></para>
							</listitem>
						</itemizedlist>
				</listitem>
				<listitem>
					<para>The new Debian source package files that the Dapper packages will be
						derived from:</para>
					<itemizedlist>
						<listitem>
<para><ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-3.dsc">
		xcdroast_0.98+0alpha15-3.dsc</ulink></para>
						</listitem>
						<listitem>
<para><ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-3.diff.gz">
		xcdroast_0.98+0alpha15-3.diff.gz</ulink></para>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
			<note><para>This can also be done by searching for the Debian packages
				at <ulink url="packages.debian.org">packages.debian.org</ulink> and the Ubuntu
				packages at <ulink
					url="packages.ubuntu.com">packages.ubuntu.com</ulink>.</para></note>
		<tip><para>A very useful tool to have when doing merges (or any Ubuntu packaging) is
				<application>devscripts</application>. If you do not have that already
				installed, install it before procceding.</para></tip>
			
			<para>By looking at the &ubuntu; changelog you should be able to know what differences
				to expect between the Ubuntu package and the Debian version that it was derived
				from. For xcdroast, the &ubuntu; changelog can be found at
	<ulink url="http://changelogs.ubuntu.com/changelogs/pool/universe/x/xcdroast/xcdroast_0.98+0alpha15-1.1ubuntu1/changelog">
					changelogs.ubuntu.com</ulink>. It says that a .desktop file was fixed and properly
				installed to fix a bug reported in
				<ulink url="https://launchpad.net/malone/bugs/2698">Malone</ulink>.
			</para>
			
			<para>Now let's see what the actual changes in the source packages are:</para>
			<screen>
debdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-1.1ubuntu1.dsc > ubuntu.debdiff
less ubuntu.debdiff</screen>
			
			<para>The lines that start with - have been removed from the Debian version and those that start
				with + have been added to the &ubuntu; version.</para>
			<para>This is what we see:</para>
			<itemizedlist>
				<listitem>
					<para>in debian/rules install is being used instead of cp to install the xcdroast icon.
						Also, there is a new line installing the .desktop file.</para>
				</listitem>
				<listitem>
					<para>in debian/changelog the changes made are added to the changelog entry.</para>
				</listitem>
				<listitem>
					<para>in debian/dirs usr/share/applications has been added for install lines above to
						work properly.</para>
				</listitem>
				<listitem>
					<para>xcdroast.desktop is added</para>
				</listitem>
			</itemizedlist>
			
			<para>Now we know why the Debian source was changed. Now we need to see what has changed in
				the Debian versions.</para>
			<screen>
debdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-3.dsc > debian.debdiff
less debian.debdiff</screen>
			<para>There is a lot more in this debdiff than in the last one. One way we can get a
				better idea of what has changed is to see what files were changed in the debdiff:</para>
			
			<screen>grep diff debian.debdiff</screen>
			
			<para>This indicates that debian/postinst, debian/rules, debian/changelog, debian/doc-base.manual,
				debian/control, and debian/menu were changed in the new Debian version.</para>
			<para>Thus we can see that we need to check debian/rules to see if the &ubuntu; changes were made.
				We can also see that debian/dirs was not changed from the old Debian version. Let us
				now look at the files. We can unpack the source package by using
				<application>dpkg-source</application>:</para>
			
			<screen>dpkg-source -x xcdroast_0.98+0alpha15-3.dsc</screen>
			
			<para>This will unzip the xcdroast_0.98+0alpha15.orig.tar.gz file to create a xcdroast-0.98+0alpha15
				directory and apply the changes found in xcdroast_0.98+0alpha15-3.diff.gz.</para>
			<para>Let's now go to the debian directory:</para>
			
			<screen>cd xcdroast-0.98+0alpha15/debian/</screen>
			
			<para>One can see in <filename>rules</filename> that changes made by &ubuntu; were not applied to the new Debian version.
				This means that:</para>
			
			<screen>cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps</screen>
			
			<para>...should be changed to:</para>
			
			<screen>
#cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps

#install desktop and icon
install -D -m 644 $(CURDIR)/debian/xcdroast.desktop \
	$(CURDIR)/debian/xcdroast/usr/share/applications/xcdroast.desktop
install -D -m 644 $(CURDIR)/debian/xcdroast.xpm \
	$(CURDIR)/debian/xcdroast/usr/share/pixmaps/xcdroast.xpm</screen>

			<para>Now in <filename>dirs</filename>, the following line needs to be added for the .desktop file to be installed:</para>
			<screen>usr/share/applications</screen>
			
			<para>Now we need the actual .desktop file (saved as <emphasis>debian/xcdroast.desktop</emphasis>).
				From the ubuntu.debdiff (or the Ubuntu source package), we see that it is:</para>
			<screen>
[Desktop Entry]
Encoding=UTF-8
Name=X-CD-Roast
Comment=Create a CD
Exec=xcdroast
Icon=xcdroast.xpm
Type=Application
Categories=Application;AudioVideo;</screen>
			
			<para>The last change that needs to be made is in <filename>changelog</filename>. 
				Not only do we need to add what we have just done (resync to Debian), but we 
				should also add in the previous &ubuntu; changelog entries. To do this, run 
				<application>dch -i -D dapper</application> and put something to the effect of:</para>
			<screen>
xcdroast (0.98+0alpha15-3<emphasis>ubuntu1</emphasis>) dapper; urgency=low

  * Resynchronise with Debian.</screen>

			<para>Make sure to change the version number to the correct &ubuntu; version.
				Also add:</para>
			<screen>
xcdroast (0.98+0alpha15-1.1ubuntu1) breezy; urgency=low

  * Fix and install existing .desktop file. (Closes Malone #2698)
				
  -- Captain Packager &lt;packager@coolness.com&gt;  Sat,  1 Oct 2005 19:39:04 -0400</screen>
			<para>between the 0.98+0alpha15-1.1 and 0.98+0alpha15-2 log entries.</para>
			
			<para>Now you can build and test the new source packages. There are different ways to do this, but one example is:</para>
			<screen>
cd ..
debuild -S
cd ..
sudo pbuilder build xcdroast_0.98+0alpha15-3ubuntu1.dsc</screen>
			
			<para>This will build the source package and sign it and then build the .deb in a pbuilder
				environment to make sure it builds correctly. Make sure to always test your packages
				before submitting patches, etc. Now the last step is to make a debdiff that can be
				submitted to a bug report or the MOTUs on the #ubuntu-motu irc channel. To do this,
				we get the difference between the Debian sid source package and the new &ubuntu; version:
			</para>
			<screen>debdiff xcdroast_0.98+0alpha15-3.dsc xcdroast_0.98+0alpha15-3ubuntu1.dsc > \
	xcdroast_0.98+0alpha15-3ubuntu1.debdiff</screen>
		</sect2>
	</sect1>

	<sect1 id="ubuntu-kubuntu" status="review">
		<title>Packaging for Kubuntu</title>
		
		<para>As one might imagine, the main packaging issues specific to Kubuntu are with
			KDE and Qt.</para>
		
		<sect2 id="build-dependencies">
			<title>Build Dependencies</title>
	
			<para>Kubuntu programs are mostly KDE ones. Therefore, they need to
				Build-Depend on <filename>kdelibs4-dev</filename>. Since KDE's
				focus is to have programs interacting, some programs might also need to
				Build-Depend on other parts of KDE, such as
				<filename>kdepim-dev</filename> for example. Be sure to get the list of
				necessary dependencies for your program.</para>
	
		</sect2>

		<sect2 id="desktop-files">
			<title>Desktop Files</title>
		
			<para>KDE has some specific paths. Most settings for KDE go to either
				<filename>/etc/kde3/</filename> or <filename>/usr/share/apps/</filename>.
				It is important to note that the general desktop files for KDE should go
				to <filename>/usr/share/applications/kde/</filename>. The install path
				for the desktop files should be fixed if they don't use this (except for
				specific desktop files, such as service menus).  </para>
			
			<para>KDE desktop files also need specific entries to fit in the KMenu. A
				minimal desktop file for a KDE program could be something like
				this:</para>
				
			<screen>[Desktop Entry]
Encoding=UTF-8
Name=Kfoo
Name[xx]=Kfoo
GenericName=Bar description
Exec=kfoo
Icon=kfoo
Terminal=false
Categories=Qt;KDE;Utility;</screen>

			<para>Note that the Categories field must begin with Qt;KDE;. There are
				specific desktop file entries for KDE programs and modules that allow su to
				declare the given programs as KCModules or autostart them when logging in.
			</para>
	
		</sect2>
		
		<sect2 id="generating-pot-files">
			<title>Generating .pot Files</title>

			<para>The Ubuntu translation website, <ulink
					url="https://launchpad.net/rosetta/">Rosetta</ulink>, now supports KDE,
				which means KDE packages need to support Rosetta by generating .pot
				template files for translators. If you use <application>cdbs</application>
				in Dapper, your package should now automatically build and check
				for a .pot file in po/ directory.</para>

			<para>You will need the <ulink url="../files/kubuntu_01_kdepot.diff">kdepot
					patch</ulink> (or similar; it may not apply exactly depending on the
				age of the admin directory).</para>

			<para>If your package uses <application>debhelper</application> or
				<application>cdbs</application> and includes its own kde.mk file, you need
				to add the rules yourself.</para>

			<para>For <application>cdbs</application> add these lines to your debian/rules:</para>

			<screen>
common-post-build-arch::
	mkdir -p po
        XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages

clean::
        rm -rf po</screen>
			<para>And for <application>debhelper</application>, add the following to the end of the
				<emphasis>install</emphasis> rule:</para>
			<screen>
mkdir -p po
XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages</screen>
			<para>Then add this to the <emphasis>clean</emphasis> rule:</para>
			<screen>
rm -f po/*.pot</screen>
		</sect2>
		
	</sect1>

</chapter>
