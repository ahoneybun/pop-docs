<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % pg-common SYSTEM "../pg-common.ent">
%pg-common;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
<!ENTITY ubuntu '<phrase>Ubuntu</phrase>'>
]>

<chapter id="bh-chap" status="writing">
	<title>Build Helpers</title>
	<para>Good stuff about debhelper and CDBS goes here</para>

	<sect1 id="basic-debhelper" status="complete">
		<title>Packaging with Debhelper</title>
		
		<important><para><emphasis role="bold">Requirements:</emphasis> The
				requirements from <xref linkend="basic-scratch"/> plus
				debhelper and dh-make</para> </important>

		<para> As a packager, you will rarely create packages from scratch as
			we have done in the previous section. As you can imagine, many of
			the tasks and information in the <filename>rules</filename> file,
			for instance, are common to packages. To make packaging
			easier and more efficient, you can use
			<application>debhelper</application> to help with these tasks.
			Debhelper is a set of Perl scripts (prefixed with
			<emphasis>dh_</emphasis>) that automate the process of
			package-building. With these scripts, building a Debian package
			becomes quite simple.</para>

		<para>In this example, we will again build the GNU Hello package, but this
			time we will be comparing our work to the Ubuntu
			<application>hello-debhelper</application> package. Again,
			create a directory where you will be working: </para>

		<screen>mkdir ~/hello-debhelper
cd ~/hello-debhelper
wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz
mkdir ubuntu
cd ubuntu</screen>
		

		<para>Then, get the Ubuntu source package:</para>

		<screen>apt-get source hello-debhelper
cd ..</screen>

		<para>Like the previous example, the first thing we need to do is
			unpack the original (upstream) tarball.</para>

		<screen>tar -xzvf hello-2.1.1.tar.gz</screen>

		<para>Instead of copying the upstream tarball to
			<filename>hello_2.1.1.orig.tar.gz</filename> as we did in the
			previous example, we will let <application>dh_make</application>
			do the work for us. The only thing you have to do is rename the
			source folder so it is in the form of
			<emphasis>&lt;packagename&gt;-&lt;version&gt;</emphasis> where
			packagename is lowercase. In this case, just untarring the
			tarball produces a correctly named source directory so we can move
			into it:</para>

		<screen>cd hello-2.1.1</screen>

		<para>To create the initial "debianization" of the source we will use
			<application>dh_make</application>.</para>

		<screen>
dh_make -e your.maintainer@address -f ../hello-2.1.1.tar.gz
		</screen>

		<para>dh_make will then ask you a series of questions:</para>

		<screen>
Type of package: single binary, multiple binary, library, kernel module or cdbs?
[s/m/l/k/b] <emphasis role="bold">s</emphasis></screen>

		<screen>
Maintainer name : Captain Packager
Email-Address   : packager@coolness.com
Date            : Thu,  6 Apr 2006 10:07:19 -0700
Package Name    : hello
Version         : 2.1.1
License         : blank
Type of Package : Single
Hit &lt;enter&gt; to confirm: <emphasis role="bold">Enter</emphasis></screen>

		<caution><para>Only run <application>dh_make -e</application> once. If
		you run it again after you do it the first time, it will not work
		properly. If you want to change it or made a mistake, remove the
		source directory and untar the upstream tarball afresh. Then you can
		migrate into the source directory and try again.</para></caution>
		
		<para>Running <application>dh_make -e</application> does two
			things:</para>

		<orderedlist> 
			
			<listitem><para>Creates the
					<filename>hello_2.1.1.orig.tar.gz</filename> file in the parent
					directory,</para></listitem>

			<listitem><para>Creates the basic files needed in
					<filename>debian/</filename> and many template files
					(.ex) that may be needed.</para></listitem>
			
		</orderedlist>

		<para>The <application>Hello</application> program is not very
			complicated, and as we have seen in <xref
				linkend="basic-scratch"/>, packaging it does not require much
			more than the basic files. Therefore, let us remove the
			<filename>.ex</filename> files:</para>

		<screen>cd debian
rm *.ex *.EX</screen>

		<para>For <application>hello</application>, you will also not need
			<filename>README.Debian</filename> (README file for specific
			Debian issues, not the program's README), <filename>dirs</filename>
			(used by <application>dh_installdirs</application> to create
			needed directories), <filename>docs</filename> (used by
			<application>dh_installdocs</application> to install program
			documentation), or <filename>info</filename> (used by
			<application>dh_installinfo</application> to install the info
			file) files into the <filename>debian</filename> directory. For more
			information on these files, see <xref
				linkend="appendix-examples"/>.</para>

		<para>At this point, you should have only
			<filename>changelog</filename>, <filename>compat</filename>,
			<filename>control</filename>, <filename>copyright</filename>, and
			<filename>rules</filename> files in the
			<filename>debian</filename> directory. From <xref
				linkend="basic-scratch"/>, the only file that is new is
			<filename>compat</filename>, which is a file that contains the
			<application>debhelper</application> version (in this case 4) that
		is used.</para>

		<para>You will need to adjust the
			<filename>changelog</filename> slightly in this case to reflect
			that this package is named
			<application>hello-debhelper</application> rather than just
			<application>hello</application>:</para>

		<screen>
hello-debhelper (2.1.1-1) dapper; urgency=low

  * Initial release

  -- Captain Packager &lt;packager@coolness.com&gt;  Thu,  6 Apr 2006 10:07:19 -0700</screen>
		
		<para>By using <application>debhelper</application>, the only
			things we need to change in <filename>control</filename> are the
			name (substituting <application>hello</application> for
			<application>hello-debhelper</application>) and adding
			<application>debhelper (>= 4.0.0)</application> to the
			<emphasis>Build-Depends</emphasis> field for the source
			package. The Ubuntu package for
			<application>hello-debhelper</application> looks like:</para>

		<screen>
Source: hello-debhelper
Section: devel
Priority: extra
Maintainer: Capitan Packager &lt;packager@coolness.com&gt;
Standards-Version: 3.6.1
Build-Depends: debhelper (>= 4)

Package: hello-debhelper
Architecture: any
Depends: ${shlibs:Depends}
Conflicts: hello
Provides: hello
Replaces: hello
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting.  It
 allows non-programmers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).
 .
 This is the same as the hello package, except it uses debhelper to
 make the deb.  Please see debhelper as to what it is.
		</screen>

		<para>We can copy the <filename>copyright</filename> file and the
			<filename>postinst</filename> and <filename>prerm</filename>
			scripts from the Ubuntu
			<application>hello-debhelper</application> package, as they have
			not changed since <xref linkend="basic-scratch"/>. We will also
			copy the <filename>rules</filename> file so we can inspect
			it.</para>

		<screen>
cp ../../ubuntu/hello-debhelper-2.1.1/debian/copyright .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/postinst .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/prerm .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/rules .</screen>

		<para>The last file we need to look at is <filename>rules</filename>,
			where the power of
			<application>debhelper</application> scripts can be seen. The
			<application>debhelper</application> version of
			<filename>rules</filename> is somewhat smaller (54 lines as
			opposed to 72 lines in the version from <xref linkend="basic-scratch-rules"/>).</para>

		<para>The <application>debhelper</application> version looks like:</para>

		<screen> #!/usr/bin/make -f

package = hello-debhelper

CC = gcc
CFLAGS = -g -Wall

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif

#export DH_VERBOSE=1

clean:
        dh_testdir
        dh_clean
        rm -f build
        -$(MAKE) -i distclean

install: build
        dh_clean
        dh_installdirs
        $(MAKE) prefix=$(CURDIR)/debian/$(package)/usr \
                mandir=$(CURDIR)/debian/$(package)/usr/share/man \
                infodir=$(CURDIR)/debian/$(package)/usr/share/info \
                install

build:
        ./configure --prefix=/usr
        $(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
        touch build

binary-indep: install
# There are no architecture-independent files to be uploaded
# generated by this package.  If there were any they would be
# made here.

binary-arch: install
        dh_testdir -a
        dh_testroot -a
        dh_installdocs -a NEWS
        dh_installchangelogs -a ChangeLog
        dh_strip -a
        dh_compress -a
        dh_fixperms -a
        dh_installdeb -a
        dh_shlibdeps -a
        dh_gencontrol -a
        dh_md5sums -a
        dh_builddeb -a

binary: binary-indep binary-arch

.PHONY: binary binary-arch binary-indep clean checkroot
			</screen>

		<para>Notice that tasks like testing if you are in the right directory
			(<application>dh_testdir</application>), making sure you are
			building the package with root privileges
			(<application>dh_testroot</application>), installing documentation
			(<application>dh_installdocs</application> and
			<application>dh_installchangelogs</application>), and cleaning up
			after the build (<application>dh_clean</application>) are handled
			automatically. Many packages much more complicated than
			<application>hello</application> have <filename>rules</filename>
			files no bigger because the <application>debhelper</application>
			scripts handle most of the tasks. For a complete list of
			<application>debhelper</application> scripts, please see <xref
				linkend="appendix-debhelper"/>. They are also well documented
			in their respective <application>man</application> pages. It is a
			useful exercise to read the man page (they are well written and
			not lengthy) for each helper script used in the above
			<filename>rules</filename> file.</para>

			<sect2>
			<title>Building the Source Package</title>
			
			<para>Now that we have gone through the files in the
				<filename>debian</filename> directory for
				<application>hello-debhelper</application>, we can build the
				source (and binary) packages. First, let us move back into the
				source directory:</para>
			
			<para><screen>cd ..</screen></para>
			
			<para>Now we build the source package using
				<application>debuild</application>, a wrapper script
				for <application>dpkg-buildpackage</application>:</para>
			
			<para><screen>debuild -S</screen></para>
			
			<para>the binary package, using
				<application>pbuilder</application>:</para>
			
			<para><screen>sudo pbuilder build ../*.dsc</screen></para>

			<para>and finally check the source package for common mistakes using
				<application>lintian</application>:</para>
			
			<screen>cd ..
lintian -i *.dsc</screen>
			
		</sect2>
	
	</sect1>

	<sect1 id="basic-cdbs" status="complete">
		<title>Packaging With CDBS</title>

		<para>CDBS is a tool that uses debhelper to make building and maintaining Debian
			packages even easier. It has many advantages:</para>

			<itemizedlist>
				<listitem><para>It produces a short, readable, and efficient
						<filename>debian/rules</filename></para></listitem>
				
				<listitem><para>It automates debhelper and autotools for you, so you do not
						have to worry about repetitive tasks</para></listitem>
				
				<listitem><para>It helps you focus on more important packaging problems,
						because it helps without limiting customization</para></listitem>
				
				<listitem><para>Its classes have been well tested, so you can
				avoid dirty hacks to solve common problems</para></listitem>
				
				<listitem><para>Switching to CDBS is easy</para></listitem>
				
				<listitem><para>It is extensible</para></listitem>
			</itemizedlist>
		
		<sect2>
			<title>Using CDBS in packages</title>
		
			<para>Using CDBS for Ubuntu packages is very easy. After adding 
				<application>cdbs</application> to the Build-Depends in 
				<filename>debian/control</filename>, a basic
				<filename>debian/rules</filename> file using CDBS can fit in 2 lines. 
				For a simple C/C++ application with no extra rules, such as
				<application>hello</application>, <filename>debian/rules</filename> can
				look like this :</para>

			<screen>#!/usr/bin/make -f
				
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/class/autotools.mk</screen>

			<para>That is all you need to build the program! CDBS handles installing and
				cleaning. You can then use the <filename>.install</filename> and
				<filename>.info</filename> files to tune your package with the usual
				debhelper functions in the various sections for
				<filename>debian/rules</filename>.</para>

			<warning><para> Do not use DEB_AUTO_UPDATE_DEBIAN_CONTROL:=yes to
					automatically change <filename>debian/control</filename>. It can
					cause bad things, and Debian considers it a reason to reject a package
					from entering the archives. See <ulink
						url="http://ftp-master.debian.org/REJECT-FAQ.html">
						http://ftp-master.debian.org/REJECT-FAQ.html</ulink> for more
					information.</para></warning>
			
			<para>As you can see, CDBS mostly works by including <filename>.mk</filename>
				Makefiles in <filename>debian/rules</filename>. The
				<application>cdbs</application> package provides such files in
				<filename>/usr/share/cdbs/1/</filename> that allow you to do quite a lot
				of packaging tasks. Other packages, such as <application>quilt</application>, add
				modules to CDBS and can be used as Build-Depends. Note that you can
				also use your own CDBS rules and include them in the package. The most
				useful modules included with the <application>cdbs</application> package
				are:</para>

			<itemizedlist>
				
				<listitem><para><filename>rules/debhelper.mk</filename>: Calls debhelper
						in all required sections</para></listitem>
			
				<listitem><para><filename>rules/dpatch.mk</filename>: Allows you to use
						dpatch to ease patching the source</para></listitem>
				
				<listitem><para><filename>rules/simple-patchsys.mk</filename>: Provides a
						very easy way to patch the source</para></listitem>
				
				<listitem><para><filename>rules/tarball.mk</filename>: Allows you to build
						packages using the compressed tarball in the
						package</para></listitem>
				
				<listitem><para><filename>class/autotools.mk</filename>: Calls autotools
						in all required sections</para></listitem>
				
				<listitem><para><filename>class/gnome.mk</filename>: Builds GNOME programs
						(requires the proper Build-Depends in
						<filename>debian/control</filename>)</para></listitem>
				
				<listitem><para><filename>class/kde.mk</filename>: Builds KDE programs
						(requires the proper Build-Depends in
						<filename>debian/control</filename>)</para></listitem>
				
				<listitem><para><filename>class/python-distutils.mk</filename>:
						Facilitates packaging Python programs</para></listitem>
			
			</itemizedlist>
		</sect2>
		
		<sect2>
			<title>More information on CDBS</title>
		
			<para>For more information on CDBS, see Marc Dequ&#232;nes's guide at <ulink
					url="https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml">https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml</ulink>.
			</para>
		
		</sect2>
	</sect1>


</chapter>
