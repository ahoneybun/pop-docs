<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % pg-common SYSTEM "../pg-common.ent">
%pg-common;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
]>
<chapter id="ubuntu-chap" status="complete">
	<title>Ubuntu 软件包</title>

	<sect1 id="ubuntu-upload" status="complete">
		<title>上传与审核</title>

		<para>Once you have created a source package (either a completely new package or
			just an update/bugfix), you will want to distribute your
			package so that other people can enjoy your hard work. The most effective way
			to do that for &ubuntu; is to contribute your package to the Universe repository.
			The community developers who are responsible for the Universe repository are
			known as Masters of the Universe (<ulink url="https://wiki.ubuntu.com/MOTU">MOTU</ulink>). <ulink url="http://revu.tauware.de">REVU</ulink> is a web-based tool that gives
			people a place to upload their source packages for other people to look at and
			for MOTUs to review in a structured manner.</para>

		<sect2 id="contribute-as-uploader">
			<title>Contributing as an Uploader</title>
		
			<para>首先，你必须将<ulink url="https://wiki.ubuntu.com/GPGKey">GPG Key</ulink>添加到REVU keyring中。这样除了能够保证你提交的包确是你本人发出的，还能够帮助追踪提交信息。</para>
	
			<para>REVU uses your <ulink url="https://launchpad.net">Launchpad</ulink> account to look up your <application>gpg</application> key so make sure you have a Launchpad account and you have put your <application>gpg</application> key in your user profile there. Once this is one you can join the <ulink url="https://launchpad.net/people/ubuntu-universe-contributors">Universe Contributors</ulink> team and then email <ulink url="mailto:admin@tiber.tauware.de">admin@tiber.tauware.de</ulink> asking for your <application>gpg</application> key to be updated on REVU. When this is done you will be able to upload your packages. You don't	need a password to upload packages, only to log in to the website and to reply to comments.</para>

			<note><para>你没有必要使用你的密钥去签署其他人给REVU的上传，但签署了也会有些好处。</para></note>
			
			
			<sect3 id="upload-your-packages">
				<title>正在上传您的软件包</title>

				<para>Uploading to REVU uses <application>dput</application>. The &ubuntu;
					version of <application>dput</application> already knows about REVU so
					you do not need to change any configuration files. Only upload signed
					packages, and unlike other repositories, you should always include the
					original tarball, otherwise reviewers will not be able to look at your
					extracted source package. In order to do so, use the options "-S -sa"
					with <application>debuild</application> or
					<application>dpkg-buildpackage</application> to build only the source
					package and to include the original source in the upload.</para>
				
				<para>构建了源码包后，使用<application>dput</application>  <filename>_source.changes</filename> 上传。<filename>_source.changes</filename>在构建源码包同时生成。</para>

				<screen>dput revu *_source.changes</screen>

				<note><para>如果您重新上传一个已更改的软件包 (在通过审阅后)，您可能收到一条这样的错误:</para>
					
				<screen>
上传到revu
已经在tauware.de
Doing nothing for myapp_source.changes</screen>
			
				<para>为了解决这个问题，可以在dput后加上-f参数，强制覆盖或删除<application>dput</application>程序建立的<filename>.upload</filename>文件。</para></note>
			
				<para>Processing of uploads is done every five minutes, so if your upload does not show up,
				please contact the REVU administrators by email, or join the &irc-network; IRC channel #ubuntu-motu.</para>
		
			</sect3>
		
			<sect3 id="howto-login">
				<title>如何登录 REVU</title>
			
				<para>在初次上传完成后，数据库会自动注册你的信息并为你分配一个随机密码。请访问<ulink url="http://revu.tauware.de">REVU</ulink>网站，使用你上传的更改日志文件中提供的电子邮件地址登录并点击“回复密码”链接。浏览器将跳转到一个网页，该网页包含了经过加密的密码以及如何恢复密码的指示。</para>
				
			</sect3>

			<sect3 id="view-and-comment-uploads">
				<title>查看/评论上传内容</title>
			
				<para>Packages uploaded to REVU are public. You can browse them without logging
					in to the system. However, commenting on uploads is available only to registered
					users. As an uploader, you can only comment on your own uploads. This can be
					useful to give reviewers some info on the changes you have made between two
					uploads of your packages.</para>

			</sect3>

			<sect3 id="additional-rules">
				<title>附加规则</title>
		
				<itemizedlist>

					<listitem><para>您必须重审源码包已知的安全隐患，并为它们打上补丁。</para></listitem>
					
					<listitem><para>该软件包可能因为安全问题被拒绝。</para></listitem>
					
					<listitem><para>你必须要有一个COPYRIGHT 和 LICENSE 文件，这些文件可以允许通过Ubuntu镜像包括在Universe包组成和分配里</para></listitem>
					
					<listitem><para>The package must be known to build on top of the main component
							of the current &ubuntu; stable release. It is permissible to require other
							packages already in Universe.</para></listitem>
				</itemizedlist>
			</sect3>

			<sect3 id="getting-help">
				<title>获取帮助</title>
				<para>If you need assistance on these steps, or if you have questions about REVU, you can
					ask in #ubuntu-motu on the &irc-network; IRC network.</para>
			</sect3>

		</sect2>

	</sect1>

	<sect1 id="ubuntu-sync" status="complete">
		<title>合并与同步</title>



		<important><para><emphasis role="bold">Requirements:</emphasis> build-essential, automake, gnupg, lintian, fakeroot, patchutils, debhelper and <xref linkend="gs-pbuilder"/>.</para></important>
		
		<para>&ubuntu; is based on the Debian Linux distribution and uses the same package
			management system (APT). At the beginning of each &ubuntu; development cycle, the
			packages in &ubuntu; are updated to those in the Debian unstable branch. However,
			because &ubuntu; is not the same as Debian, some of the packages need to
			be modified to work in &ubuntu;. There might also be bug fixes that &ubuntu;
			developers have introduced into the packages. You can determine whether this has
			taken place by noting the package version. If the package version includes
			ubuntu in it (an example would be gimp-2.2.9-3ubuntu2), then the &ubuntu;
			developers have made changes, and it is no longer the same as the Debian package.
			There are more than 1000 such modified packages in the Universe repository.</para>
		
		<para>At the start of each Ubuntu development cycle, a decision is made regarding
			these Ubuntu versioned packages. Of course if the Debian version hasn't
			changed since the last &ubuntu; release, then nothing needs to be changed.
			However, if there is a newer version of the package in Debian, then one
			of two things should happen. If all of the reasons for Ubuntu modifications
			(bug fixes, dependencies, etc.) are fixed in the new Debian package,
			then we can just take the Debian package directly. This decision is called a
			<emphasis>sync</emphasis>. However, if the new Debian version has the same
			issues that caused the Ubuntu version to be made, then those changes need
			to be applied to the new Debian version, too. This decision is called <emphasis>merging</emphasis>.
		</para>
		<sect2 id="merge-tutorial">
			<title>Merging Tutorial</title>
			<para>The merging process involves looking at the changes to both the Debian and
				Ubuntu source packages and determining what has changed and which changes are
				Ubuntu-specific. Let us now look at an example,
				a popular CD creation program called <application>xcdroast</application>.
			</para>
			<para>To start, make a folder to hold our project, then navigate there:</para>
			<screen>
mkdir ~/xcdroast
cd ~/xcdroast</screen>
			<para>正在下载所有与源码包有关的文件到该目录:</para>
			<itemizedlist>
				<listitem><para><application>xcdroast</application> 可以被所有版本使用的源码 tar 包：</para>
					<itemizedlist>
						<listitem>
<para><ulink url="http://snapshot.debian.net/archive/2006/01/16/debian/pool/main/x/xcdroast/xcdroast_0.98+0alpha15.orig.tar.gz">xcdroast_0.98+0alpha15.orig.tar.gz</ulink></para>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<para>The &ubuntu; Breezy source package files:</para>
					<itemizedlist>
						<listitem><para>
<ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-1.1ubuntu1.dsc">xcdroast_0.98+0alpha15-1.1ubuntu1.dsc</ulink></para>
						</listitem>
						<listitem><para>
<ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-1.1ubuntu1.diff.gz">xcdroast_0.98+0alpha15-1.1ubuntu1.diff.gz</ulink></para>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<para>源于 Breezy 包的 Debian 源码包文件:</para>
						<itemizedlist>
							<listitem>
<para><ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-1.1.diff.gz">xcdroast_0.98+0alpha15-1.1.diff.gz</ulink></para>
							</listitem>
							<listitem>
<para><ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-1.1.dsc">xcdroast_0.98+0alpha15-1.1.dsc</ulink></para>
							</listitem>
						</itemizedlist>
				</listitem>
				<listitem>
					<para>源自 Dapper 包的新 Debian 源码包文件：</para>
					<itemizedlist>
						<listitem>
<para><ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-3.dsc">xcdroast_0.98+0alpha15-3.dsc</ulink></para>
						</listitem>
						<listitem>
<para><ulink url="http://doc.ubuntu.com/files/packagingguide/xcdroast_0.98+0alpha15-3.diff.gz">xcdroast_0.98+0alpha15-3.diff.gz</ulink></para>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
			<note><para>These steps can also be done by searching for the Debian packages
				at <ulink url="packages.debian.org">packages.debian.org</ulink> and the Ubuntu
				packages at <ulink url="packages.ubuntu.com">packages.ubuntu.com</ulink>.</para></note>
		<tip><para>A very useful package to have installed when doing merges (or any Ubuntu packaging) is
				<application>devscripts</application>. If you do not have that already
				installed, install it before proceeding.</para></tip>
			
			<para>By looking at the &ubuntu; changelog you should be able to see which differences
				to expect between the Ubuntu package and the Debian package from which it was derived.
				For xcdroast, the &ubuntu; changelog can be found at
	<ulink url="http://changelogs.ubuntu.com/changelogs/pool/universe/x/xcdroast/xcdroast_0.98+0alpha15-1.1ubuntu1/changelog">
					changelogs.ubuntu.com</ulink>. It says that a .desktop file was fixed and properly
				installed to close a bug reported in
				<ulink url="https://launchpad.net/malone/bugs/2698">Malone</ulink>.
			</para>
			
			<para>Now inspect the actual changes in the source packages:</para>
			<screen>
↵
debdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-1.1ubuntu1.dsc | \↵
	ubuntu.debdiff | less ubuntu.debdiff</screen>
			
			<para>The lines that start with - have been removed from the Debian package, and those that start
				with + have been added to the &ubuntu; package.</para>
			<para>以下内容如我们所见:</para>
			<itemizedlist>
				<listitem>
					<para>在debian/rules下面使用了安装程序而不是cp复制命令来安装xcdroast图标。此外，这里新添加了一行来安装.desktop文件。</para>
				</listitem>
				<listitem>
					<para>在debian/changelog中，所作的更改被加入到changelog条目中。</para>
				</listitem>
				<listitem>
					<para>在debian/dirs中加入了usr/share/applications以使得上面的安装命令行可以正确工作。</para>
				</listitem>
				<listitem>
					<para>xcdroast.desktop已添加</para>
				</listitem>
			</itemizedlist>
			
			<para>现在，我们知道了Ubuntu的源代码是如何被改变的。下面我们要看看对Debian源代码作了哪些改变。</para>
			<screen>
↵
 debdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-3.dsc &gt; debian.debdiff↵
 less debian.debdiff</screen>
			<para>debdiff相对之前的版本加入了很更多的东西。一个方法就是通过查看debdiff中哪些文件被改变了来更好地了解其中的变化。</para>
			
			<screen>grep diff debian.debdiff</screen>
			
			<para>这表明debian/postinst，debian/rules，debian/changelog，debian/doc-base.manual，debian/control以及debian/menu在新版的Debian中都有所改变。</para>
			<para>Thus we can see that we need to check debian/rules to see if the &ubuntu; changes were made.
				We can also see that debian/dirs was not changed from the old Debian version. Let us
				now look at the files. We can unpack the source package by using
				<application>dpkg-source</application>:</para>
			
			<screen>dpkg-source -x xcdroast_0.98+0alpha15-3.dsc</screen>
			
			<para>This will decompress the xcdroast_0.98+0alpha15.orig.tar.gz file, create a xcdroast-0.98+0alpha15
				directory, and apply the changes found in xcdroast_0.98+0alpha15-3.diff.gz.</para>
			<para>Now navigate to the debian directory:</para>
			
			<screen>cd xcdroast-0.98+0alpha15/debian</screen>
			
			<para>One can see in <filename>rules</filename> that changes made by &ubuntu; were not applied to the new Debian version.
				This means that:</para>
			
			<screen>cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps</screen>
			
			<para>应改为</para>
			
			<screen>
↵
 #cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps↵
 ↵
 #install desktop and icon↵
 install -D -m 644 $(CURDIR)/debian/xcdroast.desktop \↵
 	$(CURDIR)/debian/xcdroast/usr/share/applications/xcdroast.desktop↵
 install -D -m 644 $(CURDIR)/debian/xcdroast.xpm \↵
 	$(CURDIR)/debian/xcdroast/usr/share/pixmaps/xcdroast.xpm</screen>

			<para><filename>dirs</filename>中下列需要被加入，以便能安装.desktop文件：</para>
			<screen>usr/share/applications</screen>
			
			<para>现在我们需要一个真实的.desktop文件。在ubuntu.debdiff（或者ubuntu的源码包）中，可以发现如下：</para>
			<screen>
↵
 [Desktop Entry]↵
 Encoding=UTF-8↵
 Name=X-CD-Roast↵
 Comment=Create a CD↵
 Exec=xcdroast↵
 Icon=xcdroast.xpm↵
 Type=Application↵
 Categories=Application;AudioVideo;</screen>
			
			<para>The last change that needs to be made is in <filename>changelog</filename>. 
				Not only do we need to add what we have just done (merge with Debian), but we 
				should also add in the previous &ubuntu; changelog entries. To do this, run 
				<application>dch -i -D dapper</application> and put something to the effect of:</para>
			<screen>
↵
 xcdroast (0.98+0alpha15-3<emphasis>ubuntu1</emphasis>) dapper; urgency=low↵
 ↵
   * Resynchronise with Debian.</screen>

			<para>Make sure to change the version number to the correct &ubuntu; version.
				Also add:</para>
			<screen>
↵
 xcdroast (0.98+0alpha15-1.1ubuntu1) breezy; urgency=low↵
 ↵
   * Fix and install existing .desktop file. (Closes Malone #2698)↵
 				↵
   -- Captain Packager &lt;packager@coolness.com&gt; Sat, 1 Oct 2005 19:39:04 -0400</screen>
			<para>between the 0.98+0alpha15-1.1 and 0.98+0alpha15-2 log entries.</para>
			
			<para>Now you can build and test the new source packages. There are different ways to do this, but one example is:</para>
			<screen>
↵
 cd ..↵
 debuild -S↵
 cd ..↵
 sudo pbuilder build xcdroast_0.98+0alpha15-3ubuntu1.dsc</screen>
			
			<para>This will recreate the source package, sign it with your default GPG key, and build the package in a pbuilder
				environment to make sure it builds correctly. Make sure to always test your packages
				before submitting patches. The last step is to make a debdiff that can be
				attached to an existing bug report or given to the MOTUs in the #ubuntu-motu IRC channel. To do this,
				we get the difference between the Debian unstable source package and the new &ubuntu; version:
			</para>
			<screen>debdiff xcdroast_0.98+0alpha15-3.dsc xcdroast_0.98+0alpha15-3ubuntu1.dsc &gt; \↵
 	xcdroast_0.98+0alpha15-3ubuntu1.debdiff</screen>
		</sect2>
	</sect1>

	<sect1 id="ubuntu-kubuntu" status="complete">
		<title>正在为 Kubuntu 打包</title>
		
		<para>As one might imagine, the main packaging issues specific to Kubuntu are with
			KDE and Qt.</para>
		
		<sect2 id="build-dependencies">
			<title>Build Dependencies</title>
	
			<para>Kubuntu programs are mostly KDE ones. Therefore, they need to
				Build-Depend on <filename>kdelibs4-dev</filename>. Since KDE's
				focus is to have programs interacting, some programs might also need to
				Build-Depend on other parts of KDE, such as
				<filename>kdepim-dev</filename>. Be sure to get the list of
				necessary dependencies for your program.</para>
	
		</sect2>

		<sect2 id="desktop-files">
			<title>桌面文件</title>
		
			<para>KDE has some specific paths. Most settings for KDE are installed in either
				<filename>/etc/kde3/</filename> or <filename>/usr/share/apps/</filename>.
				It is important to note that the general desktop files for KDE should go
				to <filename>/usr/share/applications/kde/</filename>. The install path
				for the desktop files should be fixed if they do not use this (except for
				desktop files like service menus).  </para>
			
			<para>[Desktop Entry]↵
 Encoding=UTF-8↵
 Name=Kfoo↵
 Name[xx]=Kfoo↵
 GenericName=Bar description↵
 Exec=kfoo↵
 Icon=kfoo↵
 Terminal=false↵
 Categories=Qt;KDE;Utility;</para>
				
			<screen>[Desktop Entry]
Encoding=UTF-8
Name=Kfoo
Name[xx]=Kfoo
GenericName=Bar description
Exec=kfoo
Icon=kfoo
Terminal=false
Categories=Qt;KDE;Utility;</screen>

			<para>Note that the Categories field must begin with Qt;KDE;. There are
				specific desktop file entries for KDE programs and modules that allow su to
				declare the given programs as KCModules or autostart them when logging in.
			</para>
	
		</sect2>
		
		<sect2 id="generating-pot-files">
			<title>Generating .pot Files</title>

			<para>The Ubuntu translation website, <ulink url="https://launchpad.net/rosetta/">Rosetta</ulink>, now supports KDE,
				which means KDE packages need to support Rosetta by generating .pot
				template files for translators. If you use <application>cdbs</application>
				in edgy, your package should now automatically build and check
				for a .pot file in po/ directory.</para>

			<para>You will need the <ulink url="../files/kubuntu_01_kdepot.diff">kdepot
					patch</ulink> (or similar; it may not apply cleanly depending on the
				age of the admin directory).</para>

			<para>If your package uses <application>debhelper</application> or
				<application>cdbs</application> and includes its own kde.mk file, you need
				to add the rules yourself.</para>

			<para>For <application>cdbs</application>, add these lines to debian/rules:</para>

			<screen>
↵
 common-post-build-arch::↵
 	mkdir -p po↵
         XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages↵
 ↵
 clean::↵
         rm -rf po</screen>
			<para>For <application>debhelper</application>, add the following to the end of the
				<emphasis>install</emphasis> rule:</para>
			<screen>
↵
 mkdir -p po↵
 XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages</screen>
			<para>Also for <application>debhelper</application>, add the following to the <emphasis>clean</emphasis> rule:</para>
			<screen>
↵
 rm -f po/*.pot</screen>
		</sect2>
		
	</sect1>

</chapter>

