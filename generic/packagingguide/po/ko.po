# Korean translation for ubuntu-docs
# Copyright (c) (c) 2006 Canonical Ltd, and Rosetta Contributors 2006
# This file is distributed under the same license as the ubuntu-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2006.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ubuntu-docs\n"
"Report-Msgid-Bugs-To: FULL NAME <EMAIL@ADDRESS>\n"
"POT-Creation-Date: 2006-09-21 14:47-0700\n"
"PO-Revision-Date: 2006-09-12 19:45+0000\n"
"Last-Translator: atie <atie.at.matrix@gmail.com>\n"
"Language-Team: Korean <ko@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: C/packagingguide-C.omf:6(creator)
msgid "ubuntu-doc@lists.ubuntu.com (Ubuntu Documentation Project)"
msgstr "ubuntu-doc@lists.ubuntu.com (우분투 문서화 프로젝트)"

#: C/packagingguide-C.omf:9(maintainer)
msgid "mantha@ubuntu.com (Jordan Mantha)"
msgstr "mantha@ubuntu.com (Jordan Mantha)"

#: C/packagingguide-C.omf:12(title)
msgid "Packaging new applications for Ubuntu"
msgstr ""

#: C/packagingguide-C.omf:15(date)
msgid "2005-11-28"
msgstr "2005년 11월 28일"

#: C/packagingguide-C.omf:20(description)
msgid ""
"Learn how to package programs so that they can easily be included in Ubuntu "
"and other Debian based distributions."
msgstr ""

#: C/packagingguide-C.omf:22(type)
msgid "HOWTO"
msgstr "하우투"

#: C/updating.xml:17(title)
msgid "Updating Packages"
msgstr "패키지 업데이트 하기"

#: C/updating.xml:19(para)
msgid ""
"If you have been around Linux distributions for any amount of time, you have "
"realized that there are sometimes bugs in programs. In the Debian and "
"&ubuntu; distributions, bugs are often fixed through the packaging by "
"patching the source code. Sometimes there are bugs in the packaging itself "
"that can cause difficulties."
msgstr ""
"만약 여러분이 리눅스 배포판을 어느 기간 동안이라도 사용해 보았다면, 때때로 프로그램들에 버그들이 있음을 알았을 겁니다. 데비안과 "
"&ubuntu; 배포판에서는, 종종 소스 코드를 패치하여 패키징을 하는 것으로 버그들이 고쳐집니다. 때로는 패키징 자체에 있는 버그들이 "
"장애를 일으킬 수도 있습니다."

#: C/updating.xml:26(para)
msgid ""
"To patch the program's source code, you could simply download the current "
"&ubuntu; source package (with <application>apt-get source</application>) and "
"make the needed changes. You can then add a new entry to the "
"<filename>debian/changelog</filename> using <application>dch -"
"i</application> or <application>dch -v &lt;version&gt;-"
"&lt;revision&gt;</application> to specify the new revision. When you run "
"<application>debuild -S</application> from the source directory you will "
"have a new source package with a new <filename>.diff.gz</filename> in the "
"parent directory that contains your changes. A problem with this approach is "
"that the distinction between source and patches is unclear."
msgstr ""
"프로그램 소스 코드를 패치하기 위하여, 여러분은 간단히 현재의 &ubuntu; 소스 패키지를 (<application>apt-get "
"source</application>로) 내려받을 수 있고 필요한 변경을 만들 수 있습니다. 그런 후에 새 리비전을 명시하기 위하여 "
"<application>dch -i</application> 또는 <application>dch -v &lt;version&gt;-"
"&lt;revision&gt;</application>을 사용하여 <filename>debian/changelog</filename>에 "
"새 항목을 추가할 수 있습니다. 소스 디렉토리에서 <application>debuild -S</application>를 실행할 때 "
"여러분의 변경을 포함하는 새로운 소스 패키지를 <filename>.diff.gz</filename>과 함께 상위 디렉토리에 가지게 "
"됩니다. 이 방법의 한 가지 문제는 소스와 패치 간의 구분이 불분명하다는 것입니다."

#: C/updating.xml:41(para)
msgid ""
"A solution to this problem is to separate the changes to the source code "
"into individual patches stored in the <filename>debian</filename> directory. "
"One such patch system is called <application>dpatch</application>. The "
"patches are stored in the <filename>debian/patches/</filename> directory and "
"have a special format."
msgstr ""
"이 문제의 해결책은 소스 코드의 변경을 각각의 <filename>debian</filename> 디렉토리로 저장할 패치들로 나누는 것 "
"입니다. 하나의 이러한 패치 시스템은 <application>dpatch</application> 로 불려집니다. 패치들은 "
"<filename>debian/patches/</filename> 디렉토리에 저장되고 특별한 형식을 가지고 있습니다."

#: C/updating.xml:48(para)
msgid ""
"To create a <application>dpatch</application>, perform the following steps "
"sequentially."
msgstr "<application>dpatch</application> 를 만들기 위해, 다음의 단계를 순서적으로 수행 합니다."

#: C/updating.xml:51(para)
msgid ""
"Create a temporary work space and two copies of the current source directory:"
msgstr "임시 작업 장소를 만들고 현재 소스 디렉토리의 두 복사본을 만듭니다:"

#: C/updating.xml:54(screen)
#, no-wrap
msgid ""
"\n"
"mkdir tmp\n"
"cd tmp\n"
"cp -a ../&lt;package&gt;-&lt;version&gt; . \n"
"cp -a &lt;package&gt;-&lt;version&gt; &lt;package&gt;-&lt;version&gt;.orig \n"
msgstr ""
"\n"
"mkdir tmp\n"
"cd tmp\n"
"cp -a ../&lt;package&gt;-&lt;version&gt; . \n"
"cp -a &lt;package&gt;-&lt;version&gt; &lt;package&gt;-&lt;version&gt;.orig \n"

#: C/updating.xml:61(para)
msgid ""
"Make the changes in the <filename>&lt;package&gt;-&lt;version&gt;</filename> "
"directory."
msgstr "<filename>&lt;package&gt;-&lt;version&gt;</filename> 디렉토리에서 변경을 합니다."

#: C/updating.xml:65(para)
msgid ""
"Create a patch file using <application>diff</application> and place it in "
"the <filename>debian/patches</filename> directory:"
msgstr ""
"<application>diff</application> 를 사용하여 패치를 만들고 "
"<filename>debian/patches</filename> 디렉토리에 그것을 가져다 놓습니다:"

#: C/updating.xml:69(screen)
#, no-wrap
msgid ""
"\n"
"diff -Nru  &lt;package&gt;-&lt;version&gt;.orig &lt;package&gt;-"
"&lt;version&gt; &gt; patch-file\n"
msgstr ""
"\n"
"diff -Nru &lt;package&gt;-&lt;version&gt;.orig &lt;package&gt;-"
"&lt;version&gt; &gt; patch-file\n"

#: C/updating.xml:73(para)
msgid ""
"Create the <application>dpatch</application> using <application>dpatch patch-"
"template</application> and a file named <filename>00list</filename> that "
"lists the dpatches:"
msgstr ""
"<application>dpatch patch-template</application> 을 사용하여 "
"<application>dpatch</application> 와 dpatch 들을 나열하는 "
"<filename>00list</filename> 로 이름한 파일을 만듭니다."

#: C/updating.xml:76(screen)
#, no-wrap
msgid ""
"\n"
"dpatch patch-template -p \"01_patchname\" \"patch-file description\" \\\n"
"\t&lt; patch-file &gt; 01_patchname.dpatch\n"
"echo 01_patchname.dpatch &gt;00list"
msgstr ""
"\n"
"ddpatch patch-template -p \"01_patchname\" \"patch-file description\" \\\n"
"\t&lt; patch-file &gt; 01_patchname.dpatch\n"
"echo 01_patchname.dpatch &gt;00list"

#: C/updating.xml:81(para)
msgid ""
"You can now place <filename>01_patchname.dpatch</filename> and "
"<filename>00list</filename> in the <filename>debian/patches</filename> "
"directory of your source package:"
msgstr ""
"여러분은 이제 소스 패키지의 <filename>debian/patches</filename> 디렉토리에 "
"<filename>01_patchname.dpatch</filename> 와 <filename>00list</filename> 를 위치 "
"시킬 수 있습니다:"

#: C/updating.xml:86(screen)
#, no-wrap
msgid ""
"\n"
"mkdir ../&lt;package&gt;-&lt;version&gt;/debian/patches\n"
"cp 01_patchname.dpatch 00list ../&lt;package&gt;-"
"&lt;version&gt;/debian/patches\n"
"cd ..\n"
"rm -rf tmp\n"
"\t\t\t"
msgstr ""
"\n"
"mkdir ../&lt;package&gt;-&lt;version&gt;/debian/patches\n"
"cp 01_patchname.dpatch 00list ../&lt;package&gt;-"
"&lt;version&gt;/debian/patches\n"
"cd ..\n"
"rm -rf tmp\n"
"\t\t\t"

#: C/updating.xml:93(para)
msgid ""
"You can also edit a pre-existing patch using <application>dpatch-edit-"
"patch</application>."
msgstr ""
"여러분은 또한 <application>dpatch-edit-patch</application> 를 사용하여 이미 존재하는 패치를 편집할 "
"수 있습니다."

#: C/updating.xml:96(para)
msgid ""
"Once all the changes have been made, a changelog entry added, and "
"<application>dpatch</application> added to the "
"<filename>debian/control</filename> file (if needed), then you can rebuild "
"the source package with <application>debuild -S</application>."
msgstr ""
"모든 변경이 만들어지고, changelog 항목도 추가되고, (필요한 경우) <application>dpatch</application> "
"도 <filename>debian/control</filename> 파일에 더해진 후, 여러분은 <application>debuild -"
"S</application> 를 가지고 소스 패키지를 다시 만들 수 있습니다."

#: C/updating.xml:102(para)
msgid ""
"To get your fixed source package uploaded to the &ubuntu; repositories, you "
"will need to get your source package sponsored by a person who has upload "
"rights. See <xref linkend=\"ubuntu-upload\"/> for more details. Sometimes, "
"rather than giving the entire source package (.diff.gz, .dsc, and "
".orig.tar.gz), it is easier and more efficient to just give the difference "
"between the source package that is currently in the repositories and your "
"fixed source package. A tool has been created to do just that called "
"<application>debdiff</application>. Using <application>debdiff</application> "
"is similar to using <application>diff</application> but is made specifically "
"for packaging. You can <application>debdiff</application> the source package "
"by:"
msgstr ""
"&ubuntu; 저장소로 고쳐진 소스 패키지를 업로드 위하여, 여러분은 업로드 권한을 가진 사람에게 여러분의 소스 패키지를 후원받는 것이 "
"필요합니다. 좀 더 자세한 것은 <xref linkend=\"ubuntu-upload\"/>를 보십시오. 때로는, 전체 소스 "
"패키지(.diff.gz, .dsc, and .orig.tar.gz)를 주는 것보다, 현재 저장소에 있는 소스 패키지와 여러분이 고친 소스 "
"패키지 간의 차이만을 주는 것이 보다 쉽고 효과적일 수 있습니다. <application>debdiff</application>를 "
"사용하는 것은 <application>diff</application>를 사용하는 것과 비슷하지만 패키징을 위하여 특별히 만들어진 "
"것입니다. 다음과 같이 소스 패키지를 <application>debdiff</application> 할 수 있습니다:"

#: C/updating.xml:117(screen)
#, no-wrap
msgid ""
"\n"
"debdiff &lt;oldpackage&gt;.dsc &lt;newpackage&gt;.dsc &gt; package.debdiff\n"
"\t\t"
msgstr ""
"\n"
"debdiff &lt;oldpackage&gt;.dsc &lt;newpackage&gt;.dsc &gt; package.debdiff\n"
"\t\t"

#: C/updating.xml:121(para)
msgid "or the binary package by:"
msgstr "또는 다음에 의해 바이너리 패키지:"

#: C/updating.xml:123(screen)
#, no-wrap
msgid ""
"\n"
"debdiff &lt;oldpackage&gt;.deb &lt;newpackage&gt;.deb &gt; package.debdiff\n"
"\t\t"
msgstr ""
"\n"
"debdiff &lt;oldpackage&gt;.deb &lt;newpackage&gt;.deb &gt; package.debdiff\n"
"\t\t"

#: C/updating.xml:127(para)
msgid ""
"Debdiffs are great to attach to bug reports and have ready for a sponsor to "
"upload."
msgstr "Debdiff 들을 버그 리포트에 첨부하는 것은 아주 좋고 스폰서가 업로드를 하도록 준비 합니다."

#: C/ubuntu.xml:15(title)
msgid "Ubuntu Packaging"
msgstr "우분투 패키징"

#: C/ubuntu.xml:18(title)
msgid "Uploading and Review"
msgstr "업로드와 검토"

#: C/ubuntu.xml:20(para)
msgid ""
"Once you have created a source package (either a completely new package or "
"just an update/bugfix), you will want to distribute your package so that "
"other people can enjoy your hard work. The most effective way to do that for "
"&ubuntu; is to contribute your package to the Universe repository. The "
"community developers who are responsible for the Universe repository are "
"known as Masters of the Universe (<ulink "
"url=\"https://wiki.ubuntu.com/MOTU\">MOTU</ulink>). <ulink "
"url=\"http://revu.tauware.de\">REVU</ulink> is a web-based tool that gives "
"people a place to upload their source packages for other people to look at "
"and for MOTUs to review in a structured manner."
msgstr ""
"소스 패키지를 생성한 후에 (완전하게 새 패키지이던 또는 업데이트/버그픽스이던), 여러분은 다른 사람들이 여러분의 수고를 즐길 수 있도록 "
"패키지를 배포하기를 원할 겁니다. &ubuntu;를 위한 가장 효과적인 방법은 여러분의 패키지를 Universe 저장소에 기여하는 "
"것입니다. Universe 저장소를 위한 책임을 가지는 커뮤니티 개발자들은 Masters of the Universe (<ulink "
"url=\"https://wiki.ubuntu.com/MOTU\">MOTU</ulink>)로 알려집니다. <ulink "
"url=\"http://revu.tauware.de\">REVU</ulink>는 다른 사람들이 쳐다보고 MOTU는 체계화된 방식으로 "
"검토하기 위하여 사람들이 소스 패키지를 업로드하도록 주어진 웹 기반 도구입니다."

#: C/ubuntu.xml:32(title)
msgid "Contributing as an Uploader"
msgstr "업로더로써 기여하기"

#: C/ubuntu.xml:34(para)
msgid ""
"First, you will need to have your <ulink "
"url=\"https://wiki.ubuntu.com/GPGKey\">GPG Key</ulink> added to the REVU "
"keyring. This step ensures that your packages really come from you and helps "
"track uploads."
msgstr ""
"첫번째로, 여러분의 <ulink url=\"https://wiki.ubuntu.com/GPGKey\">GPG Key</ulink> 를 "
"REVU keyring (키 서버)에 등록을 하는 것이 필요 합니다. 이 단계는 여러분의 패키지가 정말로 여러분에게서 온 것임을 확신하고 "
"업로드의 추적을 도와 줍니다."

#: C/ubuntu.xml:39(para)
msgid ""
"REVU uses your <ulink url=\"https://launchpad.net\">Launchpad</ulink> "
"account to look up your <application>gpg</application> key so make sure you "
"have a Launchpad account and you have put your "
"<application>gpg</application> key in your user profile there. Once this is "
"one you can join the <ulink url=\"https://launchpad.net/people/ubuntu-"
"universe-contributors\">Universe Contributors</ulink> team and then email "
"<ulink url=\"mailto:admin@tiber.tauware.de\">admin@tiber.tauware.de</ulink> "
"asking for your <application>gpg</application> key to be updated on REVU. "
"When this is done you will be able to upload your packages. You don't need a "
"password to upload packages, only to log in to the website and to reply to "
"comments."
msgstr ""

#: C/ubuntu.xml:41(para)
msgid ""
"It is not necessary to have your key signed by others to upload to REVU, but "
"it is a good idea to have it done at some point."
msgstr ""
"다른 사람에 의해 사인된 키를 REVU에 업로드하여 갖는 것이 꼭 필요하지는 않지만, 어떤 때에는 그렇게 하는 것을 마치는 것이 좋은 "
"생각 입니다."

#: C/ubuntu.xml:46(title)
msgid "Uploading your packages"
msgstr "패키지 업로드 하기"

#: C/ubuntu.xml:48(para)
msgid ""
"Uploading to REVU uses <application>dput</application>. The &ubuntu; version "
"of <application>dput</application> already knows about REVU so you do not "
"need to change any configuration files. Only upload signed packages, and "
"unlike other repositories, you should always include the original tarball, "
"otherwise reviewers will not be able to look at your extracted source "
"package. In order to do so, use the options \"-S -sa\" with "
"<application>debuild</application> or <application>dpkg-"
"buildpackage</application> to build only the source package and to include "
"the original source in the upload."
msgstr ""

#: C/ubuntu.xml:58(para)
msgid ""
"After the source package is built, you can use "
"<application>dput</application> with the above config file changes to upload "
"it by specifying just the <filename>_source.changes</filename> file that was "
"created:"
msgstr ""
"소스 패키지를 만든 후에, 그것을 업로드 하려면 위의 설정 파일 변경과 함께 <application>dput</application> 에 "
"단지 만들어진 <filename>_source.changes</filename>  파일을 지정하는 것으로 사용할 수 있습니다."

#: C/ubuntu.xml:63(screen)
#, no-wrap
msgid "dput revu *_source.changes"
msgstr "dput revu *_source.changes"

#: C/ubuntu.xml:65(para)
msgid ""
"If you are reuploading a changed package (after receiving reviews), you may "
"get an error like this:"
msgstr "만약 변경된 패키지를 재 업로드 한다면 (검토를 받은 후에), 이와 같은 에러를 갖게 될 겁니다:"

#: C/ubuntu.xml:68(screen)
#, no-wrap
msgid ""
"\n"
"Upload package to host revu\n"
"Already uploaded to tauware.de\n"
"Doing nothing for myapp_source.changes"
msgstr ""
"\n"
"Upload package to host revu\n"
"Already uploaded to tauware.de\n"
"Doing nothing for myapp_source.changes"

#: C/ubuntu.xml:73(para)
msgid ""
"To fix, add the -f option to dput to force the upload or remove the "
"<filename>.upload</filename> file that was created by "
"<application>dput</application>."
msgstr ""
"고치려면, -f 옵션을 dput에 추가하여 업로드를 강제 하거나 <application>dput</application> 에 의해 "
"만들어진 <filename>.upload</filename> 파일을 삭제 합니다."

#: C/ubuntu.xml:77(para)
msgid ""
"Processing of uploads is done every five minutes, so if your upload does not "
"show up, please contact the REVU administrators by email, or join the &irc-"
"network; IRC channel #ubuntu-motu."
msgstr ""

#: C/ubuntu.xml:83(title)
msgid "How to login to REVU"
msgstr "REVU로 로그인 하는 방법"

#: C/ubuntu.xml:85(para)
msgid ""
"After your first upload, you are registered automatically in the database "
"and assigned a random password. On the <ulink "
"url=\"http://revu.tauware.de\">REVU</ulink> website, use the email address "
"you used in the changelog file of your upload as the login and click the "
"'recover password' link. You will be taken to a page that has your encrypted "
"password with instructions for decrypting it."
msgstr ""
"여러분의 첫번째 업로드 후에, 여러분은 데이타베이스에 자동으로 등록이 되고 불규칙한 암호를 지정 받습니다. <ulink "
"url=\"http://revu.tauware.de\">REVU</ulink> 웹사이트에서, 로그인 할 때 여러분의 업로드 내의 "
"changelog 파일에 사용한 이메일 주소를 사용하고 'recover password' 링크를 클릭 합니다. 여러분은 암호화 된 "
"패스워드를 푸는 지시가 있는 웹 페이지를 볼 수 있게 됩니다."

#: C/ubuntu.xml:96(title)
msgid "View and comment uploads"
msgstr "업로드를 보고 덧글 달기"

#: C/ubuntu.xml:98(para)
msgid ""
"Packages uploaded to REVU are public. You can browse them without logging in "
"to the system. However, commenting on uploads is available only to "
"registered users. As an uploader, you can only comment on your own uploads. "
"This can be useful to give reviewers some info on the changes you have made "
"between two uploads of your packages."
msgstr ""
"REVU로 업로드 된 패키지는 공개 입니다. 그 시스템에 로그인 하지 않아도 열람할 수 있습니다. 그러나, 업로드에 덧글을 다는 것은 "
"등록된 사용자만이 할 수 있습니다. 업로더로써, 여러분은 여러분 소유의 업로드만에 덧글을 할 수 있습니다. 이것은 여러분이 검토자에게 "
"여러분의 두 패키지 사이에 무엇을 변경하였는지 정보를 주기 위해 유용 합니다."

#: C/ubuntu.xml:107(title)
msgid "Additional rules"
msgstr "추가적인 규칙"

#: C/ubuntu.xml:111(para)
msgid ""
"You must have reviewed the package for known security vulnerabilities and "
"must provide patches for them."
msgstr "여러분은 알려진 보안 취약점에 대처하는 패키지 검토를 반드시 해야만 하고 취약점의 패치를 반드시 제공하여야 합니다."

#: C/ubuntu.xml:114(para)
msgid "The package can be refused on the grounds of known security problems."
msgstr "패키지는 알려진 보안 문제에 근거하여 거절될 수도 있습니다."

#: C/ubuntu.xml:117(para)
msgid ""
"You must have included a copyright and license file, and those must allow "
"inclusion of the package in the Universe component and redistribution via "
"Ubuntu mirrors."
msgstr ""
"여러분은 반드시 저작권과 라이센스 파일을 포함 시켜야 하고, 저작권과 라이센스는 패키지가 Universe 의 요소로 포함되고 우분투 "
"미러를 통해 재배포 되는 것을 반드시 허용하여야 합니다."

#: C/ubuntu.xml:121(para)
msgid ""
"The package must be known to build on top of the main component of the "
"current &ubuntu; stable release. It is permissible to require other packages "
"already in Universe."
msgstr ""

#: C/ubuntu.xml:128(title)
msgid "Getting Help"
msgstr "도움 받기"

#: C/ubuntu.xml:129(para)
msgid ""
"If you need assistance on these steps, or if you have questions about REVU, "
"you can ask in #ubuntu-motu on the &irc-network; IRC network."
msgstr ""

#: C/ubuntu.xml:138(title)
msgid "Merges and Syncs"
msgstr "병합과 동기화"

#: C/ubuntu.xml:142(para)
msgid ""
"<emphasis role=\"bold\">Requirements:</emphasis> build-essential, automake, "
"gnupg, lintian, fakeroot, patchutils, debhelper and <xref linkend=\"gs-"
"pbuilder\"/>."
msgstr ""
"<emphasis role=\"bold\">요구 패키지:</emphasis> build-essential, automake, gnupg, "
"lintian, fakeroot, patchutils, debhelper 그리고 <xref linkend=\"gs-pbuilder\"/>."

#: C/ubuntu.xml:147(para)
msgid ""
"&ubuntu; is based on the Debian Linux distribution and uses the same package "
"management system (APT). At the beginning of each &ubuntu; development "
"cycle, the packages in &ubuntu; are updated to those in the Debian unstable "
"branch. However, because &ubuntu; is not the same as Debian, some of the "
"packages need to be modified to work in &ubuntu;. There might also be bug "
"fixes that &ubuntu; developers have introduced into the packages. You can "
"determine whether this has taken place by noting the package version. If the "
"package version includes ubuntu in it (an example would be gimp-2.2.9-"
"3ubuntu2), then the &ubuntu; developers have made changes, and it is no "
"longer the same as the Debian package. There are more than 1000 such "
"modified packages in the Universe repository."
msgstr ""

#: C/ubuntu.xml:158(para)
msgid ""
"At the start of each Ubuntu development cycle, a decision is made regarding "
"these Ubuntu versioned packages. Of course if the Debian version hasn't "
"changed since the last &ubuntu; release, then nothing needs to be changed. "
"However, if there is a newer version of the package in Debian, then one of "
"two things should happen. If all of the reasons for Ubuntu modifications "
"(bug fixes, dependencies, etc.) are fixed in the new Debian package, then we "
"can just take the Debian package directly. This decision is called a "
"<emphasis>sync</emphasis>. However, if the new Debian version has the same "
"issues that caused the Ubuntu version to be made, then those changes need to "
"be applied to the new Debian version, too. This decision is called "
"<emphasis>merging</emphasis>."
msgstr ""

#: C/ubuntu.xml:170(title)
msgid "Merging Tutorial"
msgstr "병합 지도서"

#: C/ubuntu.xml:171(para)
msgid ""
"The merging process involves looking at the changes to both the Debian and "
"Ubuntu source packages and determining what has changed and which changes "
"are Ubuntu-specific. Let us now look at an example, a popular CD creation "
"program called <application>xcdroast</application>."
msgstr ""
"병합 절차는 데비안과 우분투 소스 패키지 양쪽의 변경 사항을 보는 것과 무엇을 변경하였고 무슨 변경이 우분투 특정 사항인지를 결정하는 "
"것을 필요로 합니다. 예를 살펴 보겠습니다, <application>xcdroast</application> 라 불리는 인기있는 CD "
"작성 프로그램 입니다."

#: C/ubuntu.xml:176(para)
msgid "To start, make a folder to hold our project, then navigate there:"
msgstr "시작하려면, 프로젝트를 가질 폴더를 만들고, 그 디렉토리로 이동 합니다:"

#: C/ubuntu.xml:177(screen)
#, no-wrap
msgid ""
"\n"
"mkdir ~/xcdroast\n"
"cd ~/xcdroast"
msgstr ""
"\n"
"mkdir ~/xcdroast\n"
"cd ~/xcdroast"

#: C/ubuntu.xml:180(para)
msgid "Now download all of the source packages involved into this directory:"
msgstr "이제 필요로 하는 소스 패키지의 모든 것을 이 디렉토리로 내려 받습니다:"

#: C/ubuntu.xml:183(para)
msgid ""
"The <application>xcdroast</application> source tarball that is used by all "
"versions:"
msgstr "모든 버전에서 사용이 되는 <application>xcdroast</application> 소스 tarball:"

#: C/ubuntu.xml:187(ulink)
msgid "xcdroast_0.98+0alpha15.orig.tar.gz"
msgstr "xcdroast_0.98+0alpha15.orig.tar.gz"

#: C/ubuntu.xml:192(para)
msgid "The &ubuntu; Breezy source package files:"
msgstr "&ubuntu; Breezy 소스 패키지 파일:"

#: C/ubuntu.xml:195(ulink)
msgid "xcdroast_0.98+0alpha15-1.1ubuntu1.dsc"
msgstr "xcdroast_0.98+0alpha15-1.1ubuntu1.dsc"

#: C/ubuntu.xml:199(ulink)
msgid "xcdroast_0.98+0alpha15-1.1ubuntu1.diff.gz"
msgstr "xcdroast_0.98+0alpha15-1.1ubuntu1.diff.gz"

#: C/ubuntu.xml:205(para)
msgid ""
"The Debian source package files that the Breezy packages are derived from:"
msgstr "브리지 패키지가 파생한 데비안 소스 패키지 파일:"

#: C/ubuntu.xml:208(ulink)
msgid "xcdroast_0.98+0alpha15-1.1.diff.gz"
msgstr "xcdroast_0.98+0alpha15-1.1.diff.gz"

#: C/ubuntu.xml:212(ulink)
msgid "xcdroast_0.98+0alpha15-1.1.dsc"
msgstr "xcdroast_0.98+0alpha15-1.1.dsc"

#: C/ubuntu.xml:218(para)
msgid ""
"The new Debian source package files that the Dapper packages will be derived "
"from:"
msgstr "대퍼 패키지가 파생할 새 데비안 소스 패키지 파일:"

#: C/ubuntu.xml:222(ulink)
msgid "xcdroast_0.98+0alpha15-3.dsc"
msgstr "xcdroast_0.98+0alpha15-3.dsc"

#: C/ubuntu.xml:226(ulink)
msgid "xcdroast_0.98+0alpha15-3.diff.gz"
msgstr "xcdroast_0.98+0alpha15-3.diff.gz"

#: C/ubuntu.xml:232(para)
msgid ""
"These steps can also be done by searching for the Debian packages at <ulink "
"url=\"packages.debian.org\">packages.debian.org</ulink> and the Ubuntu "
"packages at <ulink url=\"packages.ubuntu.com\">packages.ubuntu.com</ulink>."
msgstr ""
"이 절차들은 <ulink url=\"packages.debian.org\">packages.debian.org</ulink> 에서 데비안 "
"패키지를 그리고 <ulink url=\"packages.ubuntu.com\">packages.ubuntu.com</ulink> 에서 "
"우분투 패키지를 검색하는 것으로 또한 마쳐질 수 있습니다."

#: C/ubuntu.xml:236(para)
msgid ""
"A very useful package to have installed when doing merges (or any Ubuntu "
"packaging) is <application>devscripts</application>. If you do not have that "
"already installed, install it before proceeding."
msgstr ""
"병합을 할 때 (또는 어떠한 우분투 패키징에도) 설치하여 가지고 있으면 매우 유용한 패키지는 "
"<application>devscripts</application> 입니다. 만약 이미 설치하지 않았다면, 진행 전에 그것을 설치 "
"하십시오."

#: C/ubuntu.xml:240(para)
msgid ""
"By looking at the &ubuntu; changelog you should be able to see which "
"differences to expect between the Ubuntu package and the Debian package from "
"which it was derived. For xcdroast, the &ubuntu; changelog can be found at "
"<ulink "
"url=\"http://changelogs.ubuntu.com/changelogs/pool/universe/x/xcdroast/"
"xcdroast_0.98+0alpha15-1.1ubuntu1/changelog\"> "
"changelogs.ubuntu.com</ulink>. It says that a .desktop file was fixed and "
"properly installed to close a bug reported in <ulink "
"url=\"https://launchpad.net/malone/bugs/2698\">Malone</ulink>."
msgstr ""

#: C/ubuntu.xml:249(para)
msgid "Now inspect the actual changes in the source packages:"
msgstr "이제 그 소스 패키지에 실제 변경 사항을 검사해 봅니다:"

#: C/ubuntu.xml:250(screen)
#, no-wrap
msgid ""
"\n"
"debdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-1.1ubuntu1.dsc "
"| \\\n"
"\tubuntu.debdiff | less ubuntu.debdiff"
msgstr ""
"\n"
"debdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-1.1ubuntu1.dsc "
"| \\\n"
"\tubuntu.debdiff | less ubuntu.debdiff"

#: C/ubuntu.xml:254(para)
msgid ""
"The lines that start with - have been removed from the Debian package, and "
"those that start with + have been added to the &ubuntu; package."
msgstr ""

#: C/ubuntu.xml:256(para)
msgid "The following is what we see:"
msgstr "우리는 다음을 볼 수 있습니다:"

#: C/ubuntu.xml:259(para)
msgid ""
"In debian/rules install is being used instead of cp to install the xcdroast "
"icon. Also, there is a new line installing the .desktop file."
msgstr ""
"xcdroast icon 을 설치하기 위해 cp 대신에 install이 debian/rules 에 사용되어 졌습니다. 또한, "
".desktop 파일을 설치하는 새 줄이 있습니다."

#: C/ubuntu.xml:263(para)
msgid ""
"In debian/changelog the changes made are added to the changelog entry."
msgstr "debian/changelog 에 변경기록 사항으로 그 변경 사항이 추가 되었습니다."

#: C/ubuntu.xml:266(para)
msgid ""
"In debian/dirs usr/share/applications has been added for the install lines "
"above to work properly."
msgstr ""
"debian/dirs 에 usr/share/applications 이 위의 설치 줄이 적절하게 동작을 하도록 추가 되었습니다."

#: C/ubuntu.xml:270(para)
msgid "xcdroast.desktop is added"
msgstr "xcdroast.desktop 추가됨"

#: C/ubuntu.xml:274(para)
msgid ""
"Now we know how the Ubuntu source was changed. Now we need to see what has "
"changed in the Debian sources."
msgstr ""
"이제 우리는 우분투 소스가 어떻게 변경 되었는지를 알았습니다. 이제 데비안 소스에는 무엇이 변경 되었는지를 볼 필요가 있습니다."

#: C/ubuntu.xml:276(screen)
#, no-wrap
msgid ""
"\n"
"debdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-3.dsc &gt; "
"debian.debdiff\n"
"less debian.debdiff"
msgstr ""
"\n"
"debdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-3.dsc > "
"debian.debdiff\n"
"less debian.debdiff"

#: C/ubuntu.xml:279(para)
msgid ""
"There is a lot more in this debdiff than in the last one. One way we can get "
"a better idea of what has changed is to see what files were changed in the "
"debdiff:"
msgstr ""
"우분투 것에서 본 것보다 훨씬 많은 것이 debdiff 에 있습니다. 무엇이 변경 되었지를 좀 더 잘 알 수 있는 한 가지 방법은 "
"debdiff 안에 변경된 파일을 보는 것 입니다."

#: C/ubuntu.xml:282(screen)
#, no-wrap
msgid "grep diff debian.debdiff"
msgstr "grep diff debian.debdiff"

#: C/ubuntu.xml:284(para)
msgid ""
"This indicates that debian/postinst, debian/rules, debian/changelog, "
"debian/doc-base.manual, debian/control, and debian/menu were changed in the "
"new Debian version."
msgstr ""
"새 데비안 버전에는 debian/postinst, debian/rules, debian/changelog, debian/doc-"
"base.manual, debian/control, 그리고 debian/menu 파일들이 변경 되었음을 알립니다."

#: C/ubuntu.xml:286(para)
msgid ""
"Thus we can see that we need to check debian/rules to see if the &ubuntu; "
"changes were made. We can also see that debian/dirs was not changed from the "
"old Debian version. Let us now look at the files. We can unpack the source "
"package by using <application>dpkg-source</application>:"
msgstr ""

#: C/ubuntu.xml:291(screen)
#, no-wrap
msgid "dpkg-source -x xcdroast_0.98+0alpha15-3.dsc"
msgstr "dpkg-source -x xcdroast_0.98+0alpha15-3.dsc"

#: C/ubuntu.xml:293(para)
msgid ""
"This will decompress the xcdroast_0.98+0alpha15.orig.tar.gz file, create a "
"xcdroast-0.98+0alpha15 directory, and apply the changes found in "
"xcdroast_0.98+0alpha15-3.diff.gz."
msgstr ""
"이것은 xcdroast_0.98+0alpha15.orig.tar.gz 파일을 압축 풀고, xcdroast-0.98+0alpha15 "
"디렉토리를 만들고 xcdroast_0.98+0alpha15-3.diff.gz 내의 변경 사항을 적용 합니다."

#: C/ubuntu.xml:295(para)
msgid "Now navigate to the debian directory:"
msgstr "이제 debian 디렉토리로 이동 합니다:"

#: C/ubuntu.xml:297(screen)
#, no-wrap
msgid "cd xcdroast-0.98+0alpha15/debian"
msgstr "cd xcdroast-0.98+0alpha15/debian"

#: C/ubuntu.xml:299(para)
msgid ""
"One can see in <filename>rules</filename> that changes made by &ubuntu; were "
"not applied to the new Debian version. This means that:"
msgstr ""

#: C/ubuntu.xml:302(screen)
#, no-wrap
msgid "cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps"
msgstr "cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps"

#: C/ubuntu.xml:304(para)
msgid "...should be changed to:"
msgstr "... 는 다음처럼 변경 되어야만 합니다:"

#: C/ubuntu.xml:306(screen)
#, no-wrap
msgid ""
"\n"
"#cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps\n"
"\n"
"#install desktop and icon\n"
"install -D -m 644 $(CURDIR)/debian/xcdroast.desktop \\\n"
"\t$(CURDIR)/debian/xcdroast/usr/share/applications/xcdroast.desktop\n"
"install -D -m 644 $(CURDIR)/debian/xcdroast.xpm \\\n"
"\t$(CURDIR)/debian/xcdroast/usr/share/pixmaps/xcdroast.xpm"
msgstr ""
"\n"
"#cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps\n"
"\n"
"#install desktop and icon\n"
"install -D -m 644 $(CURDIR)/debian/xcdroast.desktop \\\n"
"\t$(CURDIR)/debian/xcdroast/usr/share/applications/xcdroast.desktop\n"
"install -D -m 644 $(CURDIR)/debian/xcdroast.xpm \\\n"
"\t$(CURDIR)/debian/xcdroast/usr/share/pixmaps/xcdroast.xpm"

#: C/ubuntu.xml:315(para)
msgid ""
"Now in <filename>dirs</filename>, the following line needs to be added for "
"the .desktop file to be installed:"
msgstr "이제 dirs 에, 설치될 .desktop 파일을 위해 다음의 줄을 추가 합니다:"

#: C/ubuntu.xml:316(screen)
#, no-wrap
msgid "usr/share/applications"
msgstr "usr/share/applications"

#: C/ubuntu.xml:318(para)
msgid ""
"Now we need the actual .desktop file (saved as "
"<emphasis>debian/xcdroast.desktop</emphasis>). From the ubuntu.debdiff (or "
"the Ubuntu source package), we see that it is:"
msgstr ""
"이제 우리는 실제 .desktop ( <emphasis>debian/xcdroast.desktop</emphasis> 로 저장되는 ) "
"파일이 필요 합니다. ubuntu.debdiff (또는 우분투 소스 패키지에서), 우리는 그것을 봅니다:"

#: C/ubuntu.xml:320(screen)
#, no-wrap
msgid ""
"\n"
"[Desktop Entry]\n"
"Encoding=UTF-8\n"
"Name=X-CD-Roast\n"
"Comment=Create a CD\n"
"Exec=xcdroast\n"
"Icon=xcdroast.xpm\n"
"Type=Application\n"
"Categories=Application;AudioVideo;"
msgstr ""
"\n"
"[Desktop Entry]\n"
"Encoding=UTF-8\n"
"Name=X-CD-Roast\n"
"Comment=Create a CD\n"
"Exec=xcdroast\n"
"Icon=xcdroast.xpm\n"
"Type=Application\n"
"Categories=Application;AudioVideo;"

#: C/ubuntu.xml:330(para)
msgid ""
"The last change that needs to be made is in <filename>changelog</filename>. "
"Not only do we need to add what we have just done (merge with Debian), but "
"we should also add in the previous &ubuntu; changelog entries. To do this, "
"run <application>dch -i -D dapper</application> and put something to the "
"effect of:"
msgstr ""

#: C/ubuntu.xml:335(emphasis)
msgid "ubuntu1"
msgstr "ubuntu1"

#: C/ubuntu.xml:334(screen)
#, no-wrap
msgid ""
"\n"
"xcdroast (0.98+0alpha15-3<placeholder-1/>) dapper; urgency=low\n"
"\n"
"  * Resynchronise with Debian."
msgstr ""
"\n"
"xcdroast (0.98+0alpha15-3<placeholder-1/>) dapper; urgency=low\n"
"\n"
"  * Resynchronise with Debian."

#: C/ubuntu.xml:339(para)
msgid ""
"Make sure to change the version number to the correct &ubuntu; version. Also "
"add:"
msgstr ""

#: C/ubuntu.xml:341(screen)
#, no-wrap
msgid ""
"\n"
"xcdroast (0.98+0alpha15-1.1ubuntu1) breezy; urgency=low\n"
"\n"
"  * Fix and install existing .desktop file. (Closes Malone #2698)\n"
"\t\t\t\t\n"
"  -- Captain Packager &lt;packager@coolness.com&gt;  Sat,  1 Oct 2005 "
"19:39:04 -0400"
msgstr ""
"\n"
"xcdroast (0.98+0alpha15-1.1ubuntu1) breezy; urgency=low\n"
"\n"
"  * Fix and install existing .desktop file. (Closes Malone #2698)\n"
"\t\t\t\t\n"
"  -- Captain Packager <packager@coolness.com> Sat, 1 Oct 2005 19:39:04 -0400"

#: C/ubuntu.xml:347(para)
msgid "between the 0.98+0alpha15-1.1 and 0.98+0alpha15-2 log entries."
msgstr "0.98+0alpha15-1.1 과 0.98+0alpha15-2 사이의 기록 사항."

#: C/ubuntu.xml:349(para)
msgid ""
"Now you can build and test the new source packages. There are different ways "
"to do this, but one example is:"
msgstr "이제 새 소스 패키지를 만들고 테스트 합니다. 이것을 하는 여러가지 방법이 있지만, 다음이 한 예입니다:"

#: C/ubuntu.xml:350(screen)
#, no-wrap
msgid ""
"\n"
"cd ..\n"
"debuild -S\n"
"cd ..\n"
"sudo pbuilder build xcdroast_0.98+0alpha15-3ubuntu1.dsc"
msgstr ""
"\n"
"cd ..\n"
"debuild -S\n"
"cd ..\n"
"sudo pbuilder build xcdroast_0.98+0alpha15-3ubuntu1.dsc"

#: C/ubuntu.xml:356(para)
msgid ""
"This will recreate the source package, sign it with your default GPG key, "
"and build the package in a pbuilder environment to make sure it builds "
"correctly. Make sure to always test your packages before submitting patches. "
"The last step is to make a debdiff that can be attached to an existing bug "
"report or given to the MOTUs in the #ubuntu-motu IRC channel. To do this, we "
"get the difference between the Debian unstable source package and the new "
"&ubuntu; version:"
msgstr ""

#: C/ubuntu.xml:362(screen)
#, no-wrap
msgid ""
"debdiff xcdroast_0.98+0alpha15-3.dsc xcdroast_0.98+0alpha15-3ubuntu1.dsc "
"&gt; \\\n"
"\txcdroast_0.98+0alpha15-3ubuntu1.debdiff"
msgstr ""
"debdiff xcdroast_0.98+0alpha15-3.dsc xcdroast_0.98+0alpha15-3ubuntu1.dsc > "
"\\\n"
"\txcdroast_0.98+0alpha15-3ubuntu1.debdiff"

#: C/ubuntu.xml:368(title)
msgid "Packaging for Kubuntu"
msgstr "쿠분투를 위한 패키징"

#: C/ubuntu.xml:370(para)
msgid ""
"As one might imagine, the main packaging issues specific to Kubuntu are with "
"KDE and Qt."
msgstr "우리가 상상할 수 있는 것처럼, 쿠분투 특정의 주요 패키징 이슈는 KDE와 Qt에 있습니다."

#: C/ubuntu.xml:374(title)
msgid "Build Dependencies"
msgstr "의존성 만들기"

#: C/ubuntu.xml:376(para)
msgid ""
"Kubuntu programs are mostly KDE ones. Therefore, they need to Build-Depend "
"on <filename>kdelibs4-dev</filename>. Since KDE's focus is to have programs "
"interacting, some programs might also need to Build-Depend on other parts of "
"KDE, such as <filename>kdepim-dev</filename>. Be sure to get the list of "
"necessary dependencies for your program."
msgstr ""
"쿠분투 프로그램들은 거의가 KDE 프로그램 입니다. 그러므로, 그 프로그램들은 <filename>kdelibs4-"
"dev</filename> 위에 Build-Depend 하는 것이 필요 합니다. KDE가 중점하는 것은 프로그램 간의 상호 작용을 갖는 "
"것이므로, 몇몇의 프로그램들은 <filename>kdepim-dev</filename> 와 같은 KDE의 다른 부분에 Build-"
"Depend 하는 것 또한 필요 합니다. 여러분의 프로그램을 위한 필요한 의존성의 목록을 가지는 것을 확인 하십시오."

#: C/ubuntu.xml:386(title)
msgid "Desktop Files"
msgstr "데스크탑 파일"

#: C/ubuntu.xml:388(para)
msgid ""
"KDE has some specific paths. Most settings for KDE are installed in either "
"<filename>/etc/kde3/</filename> or <filename>/usr/share/apps/</filename>. It "
"is important to note that the general desktop files for KDE should go to "
"<filename>/usr/share/applications/kde/</filename>. The install path for the "
"desktop files should be fixed if they do not use this (except for desktop "
"files like service menus)."
msgstr ""
"KDE는 몇 개의 특정 경로를 가지고 있습니다. 대부분의 KDE의 설정은 <filename>/etc/kde3/</filename> 또는 "
"<filename>/usr/share/apps/</filename> 중 하나 내에 설치가 됩니다. KDE를 위한 일반적인 desktop "
"파일은 <filename>/usr/share/applications/kde/</filename> 로 가야 함을 주의하는 것도 중요 "
"합니다. 만약 desktop 파일이 이 경로를 사용하지 않는다면 그 설치 경로는 반드시 고쳐져야 합니다. (서비스 메뉴와 같은 "
"desktop 파일은 예외 입니다.)"

#: C/ubuntu.xml:395(para)
msgid ""
"KDE desktop files also need specific entries to fit in the KMenu. A minimal "
"desktop file for a KDE program could be something like this:"
msgstr ""
"KDE desktop 파일은 또한 KMenu 내에 맞는 특정 항목이 필요 합니다. KDE 프로그램을 위한 최소한의 desktop 파일은 "
"이것과 같을 수 있습니다:"

#: C/ubuntu.xml:399(screen)
#, no-wrap
msgid ""
"[Desktop Entry]\n"
"Encoding=UTF-8\n"
"Name=Kfoo\n"
"Name[xx]=Kfoo\n"
"GenericName=Bar description\n"
"Exec=kfoo\n"
"Icon=kfoo\n"
"Terminal=false\n"
"Categories=Qt;KDE;Utility;"
msgstr ""
"[Desktop Entry]\n"
"Encoding=UTF-8\n"
"Name=Kfoo\n"
"Name[xx]=Kfoo\n"
"GenericName=Bar description\n"
"Exec=kfoo\n"
"Icon=kfoo\n"
"Terminal=false\n"
"Categories=Qt;KDE;Utility;"

#: C/ubuntu.xml:409(para)
msgid ""
"Note that the Categories field must begin with Qt;KDE;. There are specific "
"desktop file entries for KDE programs and modules that allow su to declare "
"the given programs as KCModules or autostart them when logging in."
msgstr ""
"Categories 필드는 Qt;KDE; 로 반드시 시작해야 함을 주의 하십시오. KDE 프로그램과 주어진 프로그램을 KCModules로 "
"선언하기 위해 su를 허용하는 또는 로그인을 할 때 자동 실행하는 모듈을 위한 특정 desktop 파일 항목들이 있습니다."

#: C/ubuntu.xml:417(title)
msgid "Generating .pot Files"
msgstr ".pot 파일 생성 하기"

#: C/ubuntu.xml:419(para)
msgid ""
"The Ubuntu translation website, <ulink "
"url=\"https://launchpad.net/rosetta/\">Rosetta</ulink>, now supports KDE, "
"which means KDE packages need to support Rosetta by generating .pot template "
"files for translators. If you use <application>cdbs</application> in edgy, "
"your package should now automatically build and check for a .pot file in po/ "
"directory."
msgstr ""

#: C/ubuntu.xml:426(para)
msgid ""
"You will need the <ulink url=\"../files/kubuntu_01_kdepot.diff\">kdepot "
"patch</ulink> (or similar; it may not apply cleanly depending on the age of "
"the admin directory)."
msgstr ""
"<ulink url=\"../files/kubuntu_01_kdepot.diff\">kdepot patch</ulink> (또는 비슷한; "
"이것은 아마 admin 디렉토리가 얼마나 오래되었나에 따라 깔끔하게 적용하지 못할 수도 있습니다.) 가 필요할 것 입니다."

#: C/ubuntu.xml:430(para)
msgid ""
"If your package uses <application>debhelper</application> or "
"<application>cdbs</application> and includes its own kde.mk file, you need "
"to add the rules yourself."
msgstr ""
"만약 여러분의 패키지가 <application>debhelper</application> 또는 "
"<application>cdbs</application> 를 사용하고 자체의 kde.mk 파일을 포함하고 있다면, rules 파일에 손수 "
"추가하는 것이 필요 합니다."

#: C/ubuntu.xml:434(para)
msgid "For <application>cdbs</application>, add these lines to debian/rules:"
msgstr ""
"<application>cdbs</application> 를 위해서는, debian/rules 파일에 다음의 줄들을 추가 합니다:"

#: C/ubuntu.xml:436(screen)
#, no-wrap
msgid ""
"\n"
"common-post-build-arch::\n"
"\tmkdir -p po\n"
"        XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages\n"
"\n"
"clean::\n"
"        rm -rf po"
msgstr ""
"\n"
"common-post-build-arch::\n"
"\tmkdir -p po\n"
"        XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages\n"
"\n"
"clean::\n"
"        rm -rf po"

#: C/ubuntu.xml:443(para)
msgid ""
"For <application>debhelper</application>, add the following to the end of "
"the <emphasis>install</emphasis> rule:"
msgstr ""
"<application>debhelper</application> 를 위해서는, <emphasis>install</emphasis> "
"rule 마지막에 다음을 추가 합니다:"

#: C/ubuntu.xml:445(screen)
#, no-wrap
msgid ""
"\n"
"mkdir -p po\n"
"XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages"
msgstr ""
"\n"
"mkdir -p po\n"
"XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages"

#: C/ubuntu.xml:448(para)
msgid ""
"Also for <application>debhelper</application>, add the following to the "
"<emphasis>clean</emphasis> rule:"
msgstr ""
"또한 <application>debhelper</application> 를 위해, <emphasis>clean</emphasis> "
"rule 에 다음을 추가 합니다:"

#: C/ubuntu.xml:449(screen)
#, no-wrap
msgid ""
"\n"
"rm -f po/*.pot"
msgstr ""
"\n"
"rm -f po/*.pot"

#: C/patch-systems.xml:17(title)
msgid "Patch Systems"
msgstr "패치 시스템"

#: C/patch-systems.xml:18(para)
msgid ""
"Quite often it turns out that the upstream source needs to be patched, "
"either to adjust the program to work with Ubuntu or to fix bugs in the "
"source before they are fixed upstream. But how should we reperesent these "
"changes? We could simply make the changes in the unpacked source package, in "
"which case the patch would be expressed in the <filename>.diff.gz</filename> "
"file. However, this is not ideal. If there is more than one patch you loose "
"the ability to seperate the patches as you just see one big diff that also "
"contains the packaging files (in <filename>debian/</filename>. This can make "
"it more difficult when you want to send the patches upstream. It is also "
"very convenient to seperate the author's source from the changes made for "
"Ubuntu. The best place to put this information is in the "
"<filename>debian/</filename> that is already used for the packaging files. "
"For the rest of this chapter we will be looking at the various ways to set "
"up patches in this way."
msgstr ""

#: C/patch-systems.xml:21(title)
msgid "Patching Without a Patch System"
msgstr ""

#: C/patch-systems.xml:22(para)
msgid ""
"As was mentioned above, one can patch the original source by simply making "
"the changes in the unpacked source directory. A real-life example of this is "
"<application>cron</application>. If you grab "
"<application>cron</application>'s source package and look at the "
"<filename>.diff.gz</filename> you will see that several of the original "
"source's files were changed."
msgstr ""

#: C/patch-systems.xml:24(screen)
#, no-wrap
msgid ""
"\n"
"apt-get source cron\n"
"zgrep +++ cron*.diff.gz\n"
msgstr ""

#: C/patch-systems.xml:29(para)
msgid ""
"But as we mentioned before this is not really the best way to represent "
"patches. One better way is to create individual patch files, but them in "
"<filename>debian/patches/</filename> and apply the patches (using "
"<application>patch</application>) in <filename>debian/rules</filename>. This "
"is what is done for <application>udev</application>:"
msgstr ""

#: C/patch-systems.xml:31(screen)
#, no-wrap
msgid ""
"\n"
"apt-get source udev\n"
"zgrep +++ udev*.diff.gz\n"
"ls udev*/debian/patches/\n"
"less udev*/debian/rules\n"
msgstr ""

#: C/patch-systems.xml:38(para)
msgid ""
"The <filename>rules</filename> file has the following rules for applying and "
"unapplying the patches:"
msgstr ""

#: C/patch-systems.xml:39(screen)
#, no-wrap
msgid ""
"\n"
"# Apply patches to the package\n"
"patch: patch-stamp\n"
"patch-stamp:\n"
"        dh_testdir\n"
"        @patches=debian/patches/*.patch; for patch in $$patches; do \\\n"
"                test -f $$patch || continue; \\\n"
"                echo \"Applying $$patch\"; \\\n"
"                patch -stuN -p1 &lt; $$patch || exit 1; \\\n"
"        done\n"
"        touch $@\n"
"\n"
"# Remove patches from the package\n"
"unpatch:\n"
"        dh_testdir\n"
"        @if test -f patch-stamp; then \\\n"
"                patches=debian/patches/*.patch; \\\n"
"                for patch in $$patches; do \\\n"
"                        reversepatches=\"$$patch $$reversepatches\"; \\\n"
"                done; \\\n"
"                for patch in $$reversepatches; do \\\n"
"                        test -f $$patch || continue; \\\n"
"                        echo \"Reversing $$patch\"; \\\n"
"                        patch -suRf -p1 &lt; $$patch || exit 1; \\\n"
"                done; \\\n"
"                rm -f patch-stamp; \\\n"
"        fi\n"
msgstr ""

#: C/patch-systems.xml:68(para)
msgid ""
"That is all very nice, but how do we create new patches for "
"<application>udev</application> using this scheme? The general approach is:"
msgstr ""

#: C/patch-systems.xml:70(para)
msgid "copy the clean source tree to a temporary directory"
msgstr ""

#: C/patch-systems.xml:71(para)
msgid ""
"apply all patches up to the one you want to edit; if you want to create a "
"new patch, apply all existing ones (this is necessary since in general "
"patches depend on previous patches)"
msgstr ""

#: C/patch-systems.xml:72(para)
msgid ""
"if you want, you can use debian/rules for this: remove the patches that come "
"*after* the one you want to edit, and call 'debian/rules patch'. The actual "
"name for the patch target varies, I have seen the following ones so far: "
"patch setup apply-patches unpack patch-stamp. You have to look in "
"<filename>debian/rules</filename> how it is called."
msgstr ""

#: C/patch-systems.xml:73(para)
msgid ""
"copy the whole source tree again: <screen>cp -a /tmp/old /tmp/new</screen>"
msgstr ""

#: C/patch-systems.xml:75(para)
msgid "go into /tmp/new, do your modifications"
msgstr ""

#: C/patch-systems.xml:76(para)
msgid ""
"go back into your original source tree, generate the patch with: "
"<screen>diff -Nurp /tmp/old /tmp/new &gt; mypatchname.patch</screen>"
msgstr ""

#: C/patch-systems.xml:82(title)
msgid "Example 1."
msgstr ""

#: C/patch-systems.xml:83(para)
msgid ""
"Let us make a new patch for <application>udev</application> called "
"<filename>90_penguins.patch</filename> which replaces "
"<emphasis>Linux</emphasis> with <emphasis>Penguin</emphasis> in the "
"<application>udev</application> <filename>README</filename> file:"
msgstr ""

#: C/patch-systems.xml:84(screen)
#, no-wrap
msgid ""
"\n"
"cd udev*/\n"
"cp -a . /tmp/old\n"
"pushd /tmp/old\n"
"debian/rules patch\n"
"cp -a . /tmp/new; cd ../new\n"
"sed -i 's/Linux/Penguin/g' README\n"
"cd ..\n"
"diff -Nurp old new &gt; 90_penguins.patch\n"
"popd\n"
"mv /tmp/90_penguins.patch debian/patches\n"
"rm -rf /tmp/old /tmp/new\n"
msgstr ""

#: C/patch-systems.xml:100(title)
msgid "Example 2."
msgstr ""

#: C/patch-systems.xml:101(para)
msgid ""
"What happens if we want to edit an existing patch? We can us a similar "
"procedure as Example 1 but we will apply the patch to be edited first: "
"<screen>\n"
"cp -a . /tmp/old\n"
"pushd /tmp/old\n"
"cp -a . /tmp/new; cd ../new\n"
"patch -p1 &lt; debian/patches/10-selinux-include-udev-h.patch\n"
"sed -i '1 s/$/***** HELLO WORLD ****/' udev_selinux.c\n"
"cd ..\n"
"diff -Nurp old new &gt; 10-selinux-include-udev-h.patch\n"
"popd\n"
"mv /tmp/10-selinux-include-udev-h.patch debian/patches\n"
"rm -rf /tmp/old /tmp/new\n"
"\n"
"</screen>"
msgstr ""

#: C/patch-systems.xml:116(para)
msgid ""
"So this way of patching the source, while technically fine, can become very "
"complicated and unmanageable. To make patching easier and more "
"straightforward patch systems were developed. We will take a look at couple "
"popular ones."
msgstr ""

#: C/patch-systems.xml:120(title)
msgid "CDBS with Simple Patchsys"
msgstr ""

#: C/patch-systems.xml:121(para)
msgid ""
"The CDBS build helper system (see <xref linkend=\"basic-cdbs\"/> ) has a "
"very simple patch system built in. You simply need to add an include for "
"<emphasis>simple-patchsys.mk</emphasis> in "
"<filename>debian/rules</filename>. An example is "
"<application>pmount</application>. Its entire <filename>rules</filename> "
"looks like: <screen>\n"
"#!/usr/bin/make -f\n"
"include /usr/share/cdbs/1/rules/debhelper.mk\n"
"include /usr/share/cdbs/1/class/autotools.mk\n"
"include /usr/share/cdbs/1/rules/simple-patchsys.mk\n"
"\n"
"common-post-build-arch::\n"
"        # Generate a POT file\n"
"        cd po; intltool-update -p --verbose\n"
"</screen>"
msgstr ""

#: C/patch-systems.xml:133(para)
msgid ""
"Simple patchsys also has a patch editor built in called <application>cdbs-"
"edit-patch</application>. You can give <application>cdbs-edit-"
"patch</application> either the name of an existing patch to edit or a new "
"patch to create. It will apply the existing patch, if it exists, and put you "
"in a new shell. You can then make any changes you want added to the patch "
"and finally type <emphasis>Ctrl-D</emphasis> to exit the shell and create "
"the new patch. The patches are stored in <filename>debian/patches/</filename>"
msgstr ""

#: C/patch-systems.xml:137(title)
msgid "dpatch"
msgstr ""

#: C/patch-systems.xml:138(para)
msgid ""
"A popular patch system is <application>dpatch</application>. It has a "
"<application>dpatch-edit-patch</application> script like "
"<application>cdbs</application> has but stores the patches a little "
"differently. It uses a file named <filename>debian/patches/00list</filename> "
"to find the name and order of patches to apply. This means you can order "
"your patches in whichever way you want and can disable a patch without "
"removing it altogether. However, it also mean you need to update "
"<filename>00list</filename> if you add a patch. If <application>dpatch-edit-"
"patch</application> is called with two arguments it will edit/create the the "
"patch named by the first argument relative to the patch named by the second "
"argument. In other words: <screen>dpatch-edit-patch new.dpatch "
"old.dpatch</screen> will apply patches up to <filename>old.dpatch</filename> "
"and then create <filename>new.dpatch</filename>. Note that "
"<application>dpatch</application> patches usually have a .dpatch suffix. "
"This is because <application>dpatch</application> stores the patches in a "
"slightly different format then a normal patch that adds a special header."
msgstr ""

#: C/patch-systems.xml:141(para)
msgid ""
"A real-life example of dpatch usage is the <application>xterm</application> "
"package."
msgstr ""

#: C/patch-systems.xml:145(title)
msgid "Patching other people's packages"
msgstr ""

#: C/patch-systems.xml:146(para)
msgid ""
"The most important thing to keep in mind when patching packages maintained "
"by other people is to keep the patch system (or lack thereof) that the "
"maintainer has set up. This will ensure consistency and make the package "
"maintainer more likely to accept your patch."
msgstr ""

#: C/patch-systems.xml:147(para)
msgid ""
"It is also a good idea to separate patches logically rather than creating "
"one giant patch. If the upstream authors apply one of your changes but not "
"another it is much easier to just drop a patch then edit a monolithic patch "
"to update it."
msgstr ""

#: C/packagingguide.xml:16(title) C/bookinfo.xml:16(title)
msgid "The Ubuntu Packaging Guide"
msgstr "우분투 패키징 안내서"

#: C/introduction.xml:17(title)
msgid "Introduction"
msgstr "소개"

#: C/introduction.xml:19(para)
msgid ""
"Welcome to the &ubuntu; Packaging Guide! This guide is primarily addressed "
"to those who would like to make and maintain &ubuntu; packages. Although "
"many of the concepts in this guide could be used to make binary packages for "
"personal use, it is designed for those people wanting to distribute their "
"packages to and for others. While it is also written with the &ubuntu; Linux "
"distribution in mind, it should also be useful for any Debian-based "
"distribution."
msgstr ""

#: C/introduction.xml:28(para)
msgid ""
"There are several reasons you might want to learn how to package for Ubuntu. "
"First, building and fixing &ubuntu; packages is a great way to contribute to "
"the &ubuntu; community. It is also a good way to learn how &ubuntu; and the "
"applications you have installed work. Maybe you want to install a package "
"that is not in the &ubuntu; repositories. Hopefully after you have completed "
"this guide you will have the tools and knowledge you need to do all of these "
"things."
msgstr ""

#: C/introduction.xml:38(para)
msgid ""
"HTML and PDF versions of the manual are available online at <ulink "
"url=\"&ubuntu-documentation;\">the Ubuntu Documentation website</ulink>."
msgstr ""

#: C/introduction.xml:42(para)
msgid ""
"You can buy this guide in book form from <ulink url=\"&lulu-store;\">our "
"Lulu store</ulink>. You will only pay for the price of printing and postage."
msgstr ""

#: C/introduction.xml:47(title)
msgid "Where to Begin"
msgstr ""

#: C/introduction.xml:48(para)
msgid ""
"If you are completely new to Debian-based packaging then you will want to "
"read this guide completely through, paying special attention to <xref "
"linkend=\"intro-prereq\"/>, <xref linkend=\"gs-chap\"/>, and <xref "
"linkend=\"basic-chap\"/>. People who are experienced with Debian-based "
"packaging will find <xref linkend=\"ubuntu-chap\"/> and <xref linkend=\"bugs-"
"chap\"/> most helpful."
msgstr ""

#: C/introduction.xml:58(title)
msgid "Prerequisites"
msgstr "미리 필요한 것"

#: C/introduction.xml:60(para)
msgid ""
"This guide assumes that the reader has a reasonable knowledge of building "
"and installing software from source on Linux distributions. The guide also "
"uses the Command Line Interface (CLI) throughout, so you should be "
"comfortable using a terminal. You should be able to at least use the "
"following:"
msgstr ""

#: C/introduction.xml:68(para)
msgid ""
"<emphasis role=\"bold\">make:</emphasis> GNU Make is a very important "
"software building tool. It is used to transform a complex compilation task "
"into a trivial one. It is important that you know how to use it, because we "
"will store most of the information about the packaging process in a "
"Makefile. Documentation is available at the <ulink "
"url=\"http://www.gnu.org/software/make/manual/make.html\">GNU </ulink> "
"website."
msgstr ""

#: C/introduction.xml:79(para)
msgid ""
"<emphasis role=\"bold\">./configure:</emphasis>This script is included in "
"almost all Linux source, especially for software written in compiled "
"languages such as C and C++. It is used to generate a Makefile (file used by "
"<application>make</application>) that is properly configured for your "
"system. Standard Debian packaging tools use it, so it is important that you "
"know what the <filename>configure</filename> script does. Information on "
"<filename>./configure</filename> can be found in the "
"<application>make</application> documentation."
msgstr ""

#: C/introduction.xml:92(para)
msgid ""
"<emphasis role=\"bold\">Apt/Dpkg:</emphasis> Beyond the basic use of "
"installing programs, <application>apt</application> and "
"<application>dpkg</application> have many features that are useful for "
"packaging."
msgstr ""

#: C/introduction.xml:99(para)
msgid ""
"<emphasis role=\"bold\">apt-cache dump</emphasis> - lists every package in "
"the cache. This command is especially helpful in combination with a "
"<application>grep</application> pipe such as <application>apt-cache dump | "
"grep foo</application> to search for packages whose names or dependencies "
"include <quote>foo</quote>."
msgstr ""
"<emphasis role=\"bold\">apt-cache dump</emphasis> - 캐쉬 내의 모든 패키지를 나열 합니다. 이 "
"명령은 특히 이름 또는 의존 패키지가 <quote>foo</quote> 를 포함하는 패키지를 찾기 위해 <application>apt-"
"cache dump | grep foo</application> 처럼 <application>grep</application> 파이프와 "
"결합할 때 도움이 됩니다."

#: C/introduction.xml:109(para)
msgid ""
"<emphasis role=\"bold\">apt-cache policy</emphasis> - lists the repositories "
"(main/restricted/universe/multiverse) in which a package exists."
msgstr ""
"<emphasis role=\"bold\">apt-cache policy</emphasis> - 패키지가 존재하는 저장소 "
"(main/restricted/universe/multiverse) 를 나열 합니다."

#: C/introduction.xml:114(para)
msgid ""
"<emphasis role=\"bold\">apt-cache show </emphasis> - displays information "
"about a binary package."
msgstr ""
"<emphasis role=\"bold\">apt-cache show </emphasis> - 바이너리 패키지에 대한 정보를 보여 줍니다."

#: C/introduction.xml:118(para)
msgid ""
"<emphasis role=\"bold\">apt-cache showsrc </emphasis> - displays information "
"about a source package."
msgstr ""
"<emphasis role=\"bold\">apt-cache showsrc </emphasis> - 소스 패키지에 대한 정보를 보여 "
"줍니다."

#: C/introduction.xml:122(para)
msgid ""
"<emphasis role=\"bold\">apt-cache rdepends </emphasis> - shows reverse "
"dependencies for a package (which packages require the queried one."
msgstr ""
"<emphasis role=\"bold\">apt-cache rdepends </emphasis> - 무슨 패키지가 쿼리한 패키지를 "
"필요로 하는지, 패키지의 역 의존성을 보여 줍니다."

#: C/introduction.xml:127(para)
msgid ""
"<emphasis role=\"bold\">dpkg -S </emphasis> - lists the binary package to "
"which a particular file belongs."
msgstr ""
"<emphasis role=\"bold\">dpkg -S </emphasis> - 특정 파일이 속하는 바이너리 패키지를 나열 합니다."

#: C/introduction.xml:132(para)
msgid ""
"<emphasis role=\"bold\">dpkg -l </emphasis> - lists currently installed "
"packages. This is similar to <application>apt-cache dump</application> but "
"for installed packages."
msgstr ""
"<emphasis role=\"bold\">dpkg -l </emphasis> - 현재 설치된 패키지를 나열 합니다. 이것은 "
"<application>apt-cache dump</application> 와 비슷하지만 설치된 패키지들만을 위해서 입니다."

#: C/introduction.xml:138(para)
msgid ""
"<emphasis role=\"bold\">dpkg -c </emphasis> - lists the contents of a binary "
"package. It is useful for ensuring that files are installed to the right "
"places."
msgstr ""
"<emphasis role=\"bold\">dpkg -c </emphasis> - 바이너리 패키지의 내용물을 나열 합니다. 이것은 올바른 "
"곳에 파일들이 설치 되었는지 확인하는데 유용 합니다."

#: C/introduction.xml:142(para)
msgid ""
"<emphasis role=\"bold\">dpkg -f </emphasis> - shows the control file for a "
"binary package. It is useful for ensuring that the dependencies are correct."
msgstr ""
"<emphasis role=\"bold\">dpkg -f </emphasis> - 바이너리 패키지의 control 파일을 보여 줍니다. "
"이것은 의존성이 올바른 지를 확인하는데 유용 합니다."

#: C/introduction.xml:148(para)
msgid ""
"<emphasis role=\"bold\">grep-dctrl</emphasis> - searches for specialized "
"information in packages. It is a specific use of the "
"<application>grep</application> package (but not installed by default)."
msgstr ""
"<emphasis role=\"bold\">grep-dctrl</emphasis> - 패키지 내에 특정한 정보를 검색 합니다. 이것은 "
"<application>grep</application> 패키지의 특정한 사용 입니다. (기본으로 설치되지 않습니다.)"

#: C/introduction.xml:160(para)
msgid ""
"<emphasis role=\"bold\">diff and patch:</emphasis> The "
"<application>diff</application> program can be used to compare two files and "
"to make patches. A typical example might be <application>diff -ruN file.old "
"file.new &gt; file.diff</application>. This command will create a diff "
"(recursively if directories are used) that shows the changes, or "
"<quote>delta</quote>, between the two files."
msgstr ""

#: C/introduction.xml:170(para)
msgid ""
"The <application>patch</application> program is used to apply a patch "
"(usually created by <application>diff</application> or another similar "
"program) to a file or directory. To apply the patch created above, we can "
"invoke <application>patch -p0 &lt; file.diff</application>. The <emphasis>-"
"p</emphasis> tells <application>patch</application> how much it should strip "
"from the paths for the file names in the patch. -p0 means to strip nothing, "
"or leave the path intact."
msgstr ""
"<application>patch</application> 프로그램은 패치 (보통 "
"<application>diff</application> 또는 다른 비슷한 프로그램으로 만든) 를 파일 또는 디렉토리에 적용하기 위해 "
"사용 됩니다. 위에서 만든 패치를 적용하려면, <application>patch -p0 &lt; "
"file.diff</application> 를 실행 합니다. <emphasis>-p</emphasis> 는 패치 내의 파일 이름을 위한 "
"경로를 얼마나 벗어야 하는지를 <application>patch</application> 에게 알려 줍니다. -p0 는 아무 것도 벗어야 "
"할 것이 없거나 경로를 그대로 나두는 것을 의미 합니다."

#: C/getting_started.xml:15(title)
msgid "Getting Started"
msgstr "시작 하기"

#: C/getting_started.xml:18(title)
msgid "Binary and Source Packages"
msgstr "바이너리와 소스 패키지"

#: C/getting_started.xml:20(para)
msgid ""
"Most users of a Debian-based distribution such as &ubuntu; will never have "
"to deal with the actual source code that is used to create all of the "
"applications on their computers. Instead, the source code is compiled into "
"<emphasis>binary</emphasis> packages from the <emphasis>source</emphasis> "
"package that contains both the source code itself and the rules for making "
"the binary package. Packagers upload the source packages with their changes "
"to the build systems that then compile the binary packages for each "
"architecture. A separate system distributes the generated binary .deb files "
"and source changes to the repository mirrors."
msgstr ""

#: C/getting_started.xml:35(title)
msgid "Packaging Tools"
msgstr "패키징 도구"

#: C/getting_started.xml:37(para)
msgid ""
"There are many tools written specifically for packaging on Debian-based "
"systems. Many of them are not <emphasis>essential</emphasis> to creating "
"packages but are very helpful and often automate repetitive tasks. Their "
"<application>man</application> and <application>info</application> pages are "
"good sources of information. However, the following is a list of packages "
"that are deemed necessary to begin packaging:"
msgstr ""
"데비안 기반의 시스템에는 특별히 패키징을 위해 작성된 많은 도구들이 있습니다. 그 들의 많은 수는 패키지를 만드는데 "
"<emphasis>필수적</emphasis> 이지 않지만, 매우 도움이 되고 종종 반복적인 작업을 자동화 합니다. 그 도구들의 "
"<application>man</application> 과 <application>info</application> 페이지는 정보의 좋은 "
"소스 입니다. 그러나, 다음은 패키징을 시작하는데 필요하다고 간주되는 패키지들의 목록 입니다:"

#: C/getting_started.xml:46(application)
msgid "build-essential"
msgstr "build-essential"

#: C/getting_started.xml:47(para)
msgid ""
"is a metapackage that depends on <application>libc6-dev</application>, "
"<application>gcc</application>, <application>g++</application>, "
"<application>make</application>, and <application>dpkg-dev</application>. "
"One package that you might not be familiar with is <application>dpkg-"
"dev</application>. It contains tools such as <application>dpkg-"
"buildpackage</application> and <application>dpkg-source</application> that "
"are used to create, unpack, and build source and binary packages."
msgstr ""
"<application>libc6-dev</application>, <application>gcc</application>, "
"<application>g++</application>, <application>make</application> 그리고 "
"<application>dpkg-dev</application> 에 의존하는 메타패키지 입니다. 여러분이 익숙하지 않을 한 패키지는 아마 "
"<application>dpkg-dev</application> 일 것 입니다. 이것은 소스와 바이너리 패키지를 생성하고, 풀고, "
"빌드하는 <application>dpkg-buildpackage</application> 과 <application>dpkg-"
"source</application> 같은 도구들을 가지고 있습니다."

#: C/getting_started.xml:60(application)
msgid "devscripts"
msgstr "devscripts"

#: C/getting_started.xml:61(para)
msgid ""
"contains many scripts that make the packager's maintenance work much easier. "
"Some of the more commonly used are <application>debdiff</application>, "
"<application>dch</application>, <application>debuild</application>, and "
"<application>debsign</application>."
msgstr ""
"패키지 관리자의 유지보수 일을 훨씬 쉽게 하는 많은 스크립트를 가지고 있습니다. 스크립트들 중에 보통 보다 많이 사용되는 것들은 "
"<application>debdiff</application>, <application>dch</application> 그리고 "
"<application>debsign</application> 입니다."

#: C/getting_started.xml:70(term)
msgid ""
"<application>debhelper</application> and <application>dh-make</application>"
msgstr ""
"<application>debhelper</application> 와 <application>dh-make</application>"

#: C/getting_started.xml:72(para)
msgid ""
"are scripts that automate common packaging tasks. <application>dh-"
"make</application> can be used to do the initial \"debianization\" and "
"provides many example files."
msgstr ""
"보통의 패키징 작업을 자동화 하는 스크립트 입니다. <application>dh-make</application> 는 소스를 "
"\"데비안화\" 하는 초기 작업을 하는데 사용되고 많은 예제 파일을 제공 합니다."

#: C/getting_started.xml:78(term)
msgid "<application>diff</application> and <application>patch</application>"
msgstr "<application>diff</application> 와 <application>patch</application>"

#: C/getting_started.xml:79(para)
msgid ""
"are used to create and apply patches, respectively. They are used "
"extensively in packaging because it is easier, cleaner, and more efficient "
"to represent small changes as patches rather than to have multiple copies of "
"a file."
msgstr ""
"패치들 만들고 적용하는데 사용 합니다. 여럿의 복사본 파일을 가지는 것 보다 작은 변경은 패치로 만들어 사용하는 것이 쉽고, 깔끔하고 "
"보다 효과적이므로 이것들은 패키징을 하는데 광범위하게 사용 됩니다."

#: C/getting_started.xml:85(application)
msgid "gnupg"
msgstr "gnupg"

#: C/getting_started.xml:86(para)
msgid ""
"is a complete and free replacement for PGP used to digitally sign files "
"(including packages)."
msgstr "디지털하게 파일 (패키지를 포함한) 을 서명하는데 사용되는 PGP 를 완전하고 자유롭게 대체한 프로그램 입니다."

#: C/getting_started.xml:90(application)
msgid "fakeroot"
msgstr "fakeroot"

#: C/getting_started.xml:91(para)
msgid ""
"simulates running a command with root privileges. This is useful for "
"creating binary packages as a regular user."
msgstr "루트 권한을 가지고 실행하는 명령어를 가상으로 수행 합니다. 이것은 일반 사용자로 바이너리 패키지를 만들 때 유용 합니다."

#: C/getting_started.xml:95(term)
msgid ""
"<application>lintian</application> and <application>linda</application>"
msgstr ""
"<application>lintian</application> 과 <application>linda</application>"

#: C/getting_started.xml:97(para)
msgid ""
"dissect Debian packages and report bugs and Policy violations. They contain "
"automated checks for many aspects of Debian Policy as well as for common "
"errors."
msgstr ""
"데비안 패키지를 버그와 정책의 위반을 보고 합니다. 일반적인 에러 외에도 데비안 정책의 많은 측면을 자동 검사하는 것을 가지고 있습니다."

#: C/getting_started.xml:103(application)
msgid "pbuilder"
msgstr "pbuilder"

#: C/getting_started.xml:104(para)
msgid ""
"constructs a chroot system and builds a package inside the chroot. It is an "
"ideal system to use to check that a package has correct build dependencies "
"and to build clean packages to be tested and distributed."
msgstr ""
"chroot 시스템을 구성하고 패키지를 chroot 내에서 만들어 줍니다. 이것은 패키지가 올바른 빌드 의존성을 가졌는지 검사하는 것과, "
"테스트하고 배포할 깨끗한 패키지를 만드는 것에 사용하는 이상적인 시스템 입니다."

#: C/getting_started.xml:114(title)
msgid "The Personal Builder: pbuilder"
msgstr "개인적 빌드 도구: pbuilder"

#: C/getting_started.xml:116(para)
msgid ""
"Using pbuilder as a package builder allows you to build the package from "
"within a chroot environment. You can build binary packages without using "
"<application>pbuilder</application>, but you must have all the build "
"dependencies installed on your system first. However, pbuilder allows the "
"packager to check the build dependencies because the package is built within "
"a minimal &ubuntu; installation, and the build dependencies are downloaded "
"according to the <filename>debian/control</filename> file."
msgstr ""

#: C/getting_started.xml:125(para)
msgid ""
"The following is a brief guide to installing, using, and updating a pbuilder "
"environment, however, there are many details of "
"<application>pbuilder</application> usage that are outside the realm of this "
"guide. The <application>pbuilder</application> man page has lots of "
"information and should be consulted if you have problems or need more "
"detailed information."
msgstr ""
"다음은 pbuilder 환경을 설치, 사용, 갱신하기 위한 간략한 안내서 입니다. 그러나, "
"<application>pbuilder</application> 사용 예의 많은 상세한 점은 이 안내서의 범위 밖에 있습니다. 만약 "
"여러분이 이 프로그램의 사용에 문제가 있거나 좀 더 상세한 정보를 필요로 한다면, 많은 정보를 가진 "
"<application>pbuilder</application> man 페이지를 읽어 보시기 바랍니다."

#: C/getting_started.xml:134(title)
msgid "Installing and configuring a pbuilder environment"
msgstr "pbuilder 환경의 설치와 설정"

#: C/getting_started.xml:137(para)
msgid ""
"The first, and perhaps most obvious, thing to do is to install "
"<application>pbuilder</application>. If you want to create a "
"<application>pbuilder</application> for a release newer than the one you "
"currently have installed, you will need to manually install the "
"<application>debootstrap</application> .deb (from <ulink "
"url=\"&p.u.c;\">&p.u.c;</ulink>) from the newer release. To create a "
"pbuilder execute:"
msgstr ""

#: C/getting_started.xml:145(screen)
#, no-wrap
msgid ""
"\n"
"sudo pbuilder create --distribution &lt;distro&gt; \\\n"
"\t--othermirror \"deb http://archive.ubuntu.com/ubuntu &lt;distro&gt; "
"universe multiverse\"\n"
"\t\t"
msgstr ""
"\n"
"sudo pbuilder create --distribution &lt;distro&gt; \\\n"
"\t--othermirror \"deb http://archive.ubuntu.com/ubuntu &lt;distro&gt; "
"universe multiverse\"\n"
"\t\t"

#: C/getting_started.xml:150(para)
msgid ""
"where &lt;distro&gt; is the release you want "
"(<emphasis>&ubuntuplus1;</emphasis> for instance) to create the pbuilder "
"for. If you would like to create more than one "
"<application>pbuilder</application> environment you can append the "
"<emphasis>--basetgz</emphasis> flag with the desired location for the "
"compressed <application>pbuilder</application> environment. The default is "
"<filename>/var/cache/pbuilder/base.tgz</filename>. If you do choose to use "
"<emphasis>--basetgz</emphasis> you will need to use it with the other "
"<application>pbuilder</application> commands so "
"<application>pbuilder</application> knows which compressed build environment "
"to use."
msgstr ""

#: C/getting_started.xml:165(para)
msgid ""
"Creating a pbuilder environment will take some time as "
"<application>debootstrap</application> essentially downloads a minimal "
"&ubuntu; installation."
msgstr ""

#: C/getting_started.xml:169(para)
msgid ""
"A more flexible way to create a pbuilder (and perhaps multiple pbuilders) is "
"to you a shell script."
msgstr ""

#: C/getting_started.xml:175(title)
msgid "Using the pbuilder"
msgstr "pbuilder 사용 하기"

#: C/getting_started.xml:176(para)
msgid ""
"Now that you have a running pbuilder you can build binary packages from the "
"source package by invoking:"
msgstr ""
"이제 여러분은 다음의 명령을 실행하는 것처럼 소스 패키지에서 바이너리 패키지를 빌드할 수 있는, 동작하는 pbuilder 를 가졌습니다:"

#: C/getting_started.xml:179(screen)
#, no-wrap
msgid "sudo pbuilder build *.dsc"
msgstr "sudo pbuilder build *.dsc"

#: C/getting_started.xml:181(para)
msgid ""
"This will build all the source packages in the current directory. The "
"resulting .debs and source packages can be found in "
"<filename>/var/cache/pbuilder/result/</filename> (which can be changed with "
"the <emphasis>--buildresult</emphasis> flag)."
msgstr ""
"이것은 현재 디렉토리 내의 모든 소스 패키지를 빌드 합니다. 결과의 .deb 과 소스 패키지는 "
"<filename>/var/cache/pbuilder/result/</filename> 에서 찾을 수 있습니다. (이 위치는  "
"<emphasis>--buildresult</emphasis> 플랙으로 변경할 수 있습니다.)"

#: C/getting_started.xml:189(title)
msgid "Updating the pbuilder"
msgstr "pbuilder 업데이트 하기"

#: C/getting_started.xml:191(para)
msgid ""
"You should always have a current pbuilder whenever you are testing your "
"source packages, especially when you are building for a development release "
"that is rapidly changing, to ensure that the dependencies are properly "
"found. To update your pbuilder, use:"
msgstr ""
"여러분은 적절한 의존 패키지를 찾는 것을 확신하기 위해, 여러분의 소스 패키지를 테스팅 하는 어떤 때에도, 특히 빠르게 변경하는 개발 "
"릴리스를 위하여 빌드를 하는 때는 현재의 pbuilder 를 항상 가져야 합니다. 여러분의 pbuilder를 갱신하기 위해, 다음을 사용 "
"합니다:"

#: C/getting_started.xml:196(screen)
#, no-wrap
msgid "sudo pbuilder update"
msgstr "sudo pbuilder update"

#: C/getting_started.xml:200(para)
msgid ""
"If you would like to upgrade you pbuilder to a new release you can use "
"<application>pbuilder update</application> in combination with the "
"<emphasis>--distribution</emphasis> flag:"
msgstr ""
"만약 새로운 릴리스의 pbuilder 로 업그레이드 하기를 원한다면, <application>pbuilder "
"update</application> 를 <emphasis>--distribution</emphasis> 플랙과 함께 사용할 수 있습니다:"

#: C/getting_started.xml:204(screen)
#, no-wrap
msgid ""
"sudo pbuilder update --distribution &lt;newdistro&gt; --override-config"
msgstr ""
"sudo pbuilder update --distribution &lt;newdistro&gt; --override-config"

#: C/getting_started.xml:209(title)
msgid "Multiple pbuilders"
msgstr ""

#: C/getting_started.xml:211(para)
msgid ""
"All of the information so far in this section on "
"<application>pbuilder</application> has applied to having a single "
"<application>pbuilder</application>. If you want to create more than one "
"<application>pbuilder</application> you can create a shell script to handle "
"the configuration for each <application>pbuilder</application> you want to "
"create. An example of such a shell script can be found in "
"<filename>/usr/share/doc/pbuilder/examples/pbuilder-"
"distribution.sh</filename>. You can simply copy this example file somewhere "
"in your path (putting it in <filename>~/bin/</filename> and adding this "
"directory to your execution path is convenient) and then edit it according "
"your needs. Normally you will need to only change DISTRIBUTION and add --"
"othermirror as above. You can then call this script instead of "
"<application>pbuilder</application> directly."
msgstr ""

#: C/build-helpers.xml:17(title)
msgid "Build Helpers"
msgstr ""

#: C/build-helpers.xml:18(para)
msgid "Good stuff about debhelper and CDBS goes here"
msgstr ""

#: C/build-helpers.xml:21(title) C/basic.xml:691(title)
msgid "Packaging with Debhelper"
msgstr "Debhelper 로 패키징"

#: C/build-helpers.xml:23(para) C/basic.xml:693(para)
msgid ""
"<emphasis role=\"bold\">Requirements:</emphasis> The requirements from <xref "
"linkend=\"basic-scratch\"/> plus debhelper and dh-make"
msgstr ""
"<emphasis role=\"bold\">요구 사항:</emphasis> <xref linkend=\"basic-scratch\"/> "
"영역에 있는 요구 사항들에 debhelper와 dh-make를 더합니다."

#: C/build-helpers.xml:27(para) C/basic.xml:697(para)
msgid ""
"As a packager, you will rarely create packages from scratch as we have done "
"in the previous section. As you can imagine, many of the tasks and "
"information in the <filename>rules</filename> file, for instance, are common "
"to packages. To make packaging easier and more efficient, you can use "
"<application>debhelper</application> to help with these tasks. Debhelper is "
"a set of Perl scripts (prefixed with <emphasis>dh_</emphasis>) that automate "
"the process of package-building. With these scripts, building a Debian "
"package becomes quite simple."
msgstr ""
"패키지 관리자로써, 여러분은 이전 부분에서 마쳤던 것처럼 아무 도구없이 패키지를 만드는 것은 극히 적습니다. 여러분이 상상할 수 있는 "
"것처럼, 예를 들어, <filename>rules</filename> 파일에 있는 많은 작업과 정보는 패키지의 공통적인 사항 입니다. "
"패키징을 좀 더 쉽고 효과적으로 하려면, 이러한 작업을 돕기 위하여 <application>debhelper</application> 를 "
"사용할 수 있습니다. Debhelper 는 패키지-빌딩의 과정을 자동화 하는 (<emphasis>dh_</emphasis> 로 시작하는) "
"펄 스크립트의 집합 입니다. 이 스크립트들로, 데비안 패키지를 만드는 것은 아주 단순해 졌습니다."

#: C/build-helpers.xml:38(para) C/basic.xml:708(para)
msgid ""
"In this example, we will again build the GNU Hello package, but this time we "
"will be comparing our work to the Ubuntu <application>hello-"
"debhelper</application> package. Again, create a directory where you will be "
"working:"
msgstr ""

#: C/build-helpers.xml:43(screen) C/basic.xml:713(screen)
#, no-wrap
msgid ""
"mkdir ~/hello-debhelper\n"
"cd ~/hello-debhelper\n"
"wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz\n"
"mkdir ubuntu\n"
"cd ubuntu"
msgstr ""
"mkdir ~/hello-debhelper\n"
"cd ~/hello-debhelper\n"
"wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz\n"
"mkdir ubuntu\n"
"cd ubuntu"

#: C/build-helpers.xml:50(para) C/basic.xml:720(para)
msgid "Then, get the Ubuntu source package:"
msgstr ""

#: C/build-helpers.xml:52(screen) C/basic.xml:722(screen)
#, no-wrap
msgid ""
"apt-get source hello-debhelper\n"
"cd .."
msgstr ""
"apt-get source hello-debhelper\n"
"cd .."

#: C/build-helpers.xml:55(para) C/basic.xml:725(para)
msgid ""
"Like the previous example, the first thing we need to do is unpack the "
"original (upstream) tarball."
msgstr "이전의 예제와 마찬가지로, 우리가 할 필요가 있는 첫 번째 일은 원래의 (업스트림) tarball을 압축 푸는 것 입니다."

#: C/build-helpers.xml:58(screen) C/basic.xml:728(screen)
#, no-wrap
msgid "tar -xzvf hello-2.1.1.tar.gz"
msgstr "tar -xzvf hello-2.1.1.tar.gz"

#: C/build-helpers.xml:60(para) C/basic.xml:730(para)
msgid ""
"Instead of copying the upstream tarball to "
"<filename>hello_2.1.1.orig.tar.gz</filename> as we did in the previous "
"example, we will let <application>dh_make</application> do the work for us. "
"The only thing you have to do is rename the source folder so it is in the "
"form of <emphasis>&lt;packagename&gt;-&lt;version&gt;</emphasis> where "
"packagename is lowercase. In this case, just untarring the tarball produces "
"a correctly named source directory so we can move into it:"
msgstr ""
"이전 예제에서 우리가 했던 것처럼 업스트림의 tarball을 "
"<filename>hello_2.1.1.orig.tar.gz</filename> 로 복사하는 대신에, 우리는 "
"<application>dh_make</application> 가 우리를 위하여 그 작업을 하도록 시킬 겁니다. 오직 여러분이 해야하는 "
"것은 소스 폴더의 이름을 변경하는 것 입니다. 그래서 그것은 <emphasis>&lt;packagename&gt;-"
"&lt;version&gt;</emphasis> 형식이 되고 패키지 이름은 소문자 입니다. 이 경우에, 단지 tarball의 압축을 푸는 "
"것으로 정확한 이름의 소스 디렉토리를 생성하고 그래야 우리는 그 곳으로 이동할 수 있습니다:"

#: C/build-helpers.xml:70(screen) C/basic.xml:740(screen)
#, no-wrap
msgid "cd hello-2.1.1"
msgstr "cd hello-2.1.1"

#: C/build-helpers.xml:72(para) C/basic.xml:742(para)
msgid ""
"To create the initial \"debianization\" of the source we will use "
"<application>dh_make</application>."
msgstr ""
"소스의 초기 \"데비안화\"를 만들기 위해, 우리는 <application>dh_make</application> 를 사용 합니다."

#: C/build-helpers.xml:75(screen) C/basic.xml:745(screen)
#, no-wrap
msgid ""
"\n"
"dh_make -e your.maintainer@address -f ../hello-2.1.1.tar.gz\n"
"\t\t"
msgstr ""
"\n"
"dh_make -e your.maintainer@address -f ../hello-2.1.1.tar.gz\n"
"\t\t"

#: C/build-helpers.xml:79(para) C/basic.xml:749(para)
msgid "dh_make will then ask you a series of questions:"
msgstr "dh_make는 여러분에게 연속되는 질문들을 물어 봅니다:"

#: C/build-helpers.xml:83(emphasis) C/basic.xml:753(emphasis)
msgid "s"
msgstr "s"

#: C/build-helpers.xml:81(screen) C/basic.xml:751(screen)
#, no-wrap
msgid ""
"\n"
"Type of package: single binary, multiple binary, library, kernel module or "
"cdbs?\n"
"[s/m/l/k/b] <placeholder-1/>"
msgstr ""
"\n"
"Type of package: single binary, multiple binary, library, kernel module or "
"cdbs?\n"
"[s/m/l/k/b] <placeholder-1/>"

#: C/build-helpers.xml:93(emphasis) C/basic.xml:763(emphasis)
msgid "Enter"
msgstr "Enter"

#: C/build-helpers.xml:85(screen) C/basic.xml:755(screen)
#, no-wrap
msgid ""
"\n"
"Maintainer name : Captain Packager\n"
"Email-Address   : packager@coolness.com\n"
"Date            : Thu,  6 Apr 2006 10:07:19 -0700\n"
"Package Name    : hello\n"
"Version         : 2.1.1\n"
"License         : blank\n"
"Type of Package : Single\n"
"Hit &lt;enter&gt; to confirm: <placeholder-1/>"
msgstr ""
"\n"
"Maintainer name : Captain Packager\n"
"Email-Address : packager@coolness.com\n"
"Date : Thu, 6 Apr 2006 10:07:19 -0700\n"
"Package Name : hello\n"
"Version : 2.1.1\n"
"License : blank\n"
"Type of Package : Single\n"
"Hit &lt;enter&gt; to confirm: <placeholder-1/>"

#: C/build-helpers.xml:95(para) C/basic.xml:765(para)
msgid ""
"Only run <application>dh_make -e</application> once. If you run it again "
"after you do it the first time, it will not work properly. If you want to "
"change it or made a mistake, remove the source directory and untar the "
"upstream tarball afresh. Then you can migrate into the source directory and "
"try again."
msgstr ""
"오직 한 번만 <application>dh_make -e</application> 를 실행 합니다. 그것은 첫 번째 실행한 후에 다시 "
"실행 한다면, 그것은 적절하게 동작하지 않습니다. 그것을 변경하기를 원하거나 실수를 하였다면, 소스 디렉토리를 삭제하고 새로운 업스트림 "
"tarball을 압축 풉니다. 그런 후에 그 소스 디렉토리로 이전할 수 있고 다시 시도 합니다."

#: C/build-helpers.xml:101(para) C/basic.xml:771(para)
msgid "Running <application>dh_make -e</application> does two things:"
msgstr "<application>dh_make -e</application> 실행하는 것은 두 가지 일을 합니다:"

#: C/build-helpers.xml:106(para) C/basic.xml:776(para)
msgid ""
"Creates the <filename>hello_2.1.1.orig.tar.gz</filename> file in the parent "
"directory,"
msgstr "상위 디렉토리에 <filename>hello_2.1.1.orig.tar.gz</filename> 파일을 만듭니다."

#: C/build-helpers.xml:110(para) C/basic.xml:780(para)
msgid ""
"Creates the basic files needed in <filename>debian/</filename> and many "
"template files (.ex) that may be needed."
msgstr ""
"<filename>debian/</filename> 에 필요한 기본 파일들과 필요할 수 있는 많은 양식 파일(.ex)들을 만듭니다."

#: C/build-helpers.xml:116(para) C/basic.xml:786(para)
msgid ""
"The <application>Hello</application> program is not very complicated, and as "
"we have seen in <xref linkend=\"basic-scratch\"/>, packaging it does not "
"require much more than the basic files. Therefore, let us remove the "
"<filename>.ex</filename> files:"
msgstr ""
"우리가 <xref linkend=\"basic-scratch\"/> 에서 본 것 처럼, "
"<application>Hello</application> 프로그램은 매우 복잡하지 않고, 패키징은 기본 파일보다 훨씬 많은 것을 "
"요구하지 않습니다. 그래서, <filename>.ex</filename> 파일들을 다음과 같이 삭제 합니다:"

#: C/build-helpers.xml:122(screen) C/basic.xml:792(screen)
#, no-wrap
msgid ""
"cd debian\n"
"rm *.ex *.EX"
msgstr ""
"cd debian\n"
"rm *.ex *.EX"

#: C/build-helpers.xml:125(para) C/basic.xml:795(para)
msgid ""
"For <application>hello</application>, you will also not need "
"<filename>README.Debian</filename> (README file for specific Debian issues, "
"not the program's README), <filename>dirs</filename> (used by "
"<application>dh_installdirs</application> to create needed directories), "
"<filename>docs</filename> (used by <application>dh_installdocs</application> "
"to install program documentation), or <filename>info</filename> (used by "
"<application>dh_installinfo</application> to install the info file) files "
"into the <filename>debian</filename> directory. For more information on "
"these files, see <xref linkend=\"appendix-examples\"/>."
msgstr ""
"<filename>README.Debian</filename>(프로그램 일반적인 사항을 담은 README가 아니라 데비안에만 해당하는 "
"사항을 담은 README)이나 <filename>dirs</filename>(필요한 디렉토리를 "
"<application>dh_installdirs</application> 프로그램을 통해 만들 때 사용), "
"<filename>docs</filename>(문서를 <application>dh_installdocs</application> "
"프로그램을 통해 설치하고자 할 때 사용), <filename>info</filename>(info 파일을 "
"<application>dh_installinfo</application> 프로그램을 통해 설치하고자 할 때 사용) 역시 꼭 필요한 것은 "
"아닙니다. 자세한 정보는 <xref linkend=\"appendix-examples\"/>를 참조해 주십시오."

#: C/build-helpers.xml:137(para) C/basic.xml:807(para)
msgid ""
"At this point, you should have only <filename>changelog</filename>, "
"<filename>compat</filename>, <filename>control</filename>, "
"<filename>copyright</filename>, and <filename>rules</filename> files in the "
"<filename>debian</filename> directory. From <xref linkend=\"basic-"
"scratch\"/>, the only file that is new is <filename>compat</filename>, which "
"is a file that contains the <application>debhelper</application> version (in "
"this case 4) that is used."
msgstr ""
"이 시점에서, 여러분은 오직 <filename>changelog</filename>, <filename>compat</filename>, "
"<filename>control</filename>, <filename>copyright</filename>, 그리고 "
"<filename>rules</filename> 파일을 <filename>debian</filename> 디렉토리 내에 가져야만 합니다. "
"<xref linkend=\"basic-scratch\"/> 에서, 새로운 파일은 오직 <filename>compat</filename> "
"입니다, 이것은 사용된 <application>debhelper</application> 버전을 가지고 있습니다. (이 경우에는 4 "
"입니다.)"

#: C/build-helpers.xml:147(para) C/basic.xml:817(para)
msgid ""
"You will need to adjust the <filename>changelog</filename> slightly in this "
"case to reflect that this package is named <application>hello-"
"debhelper</application> rather than just <application>hello</application>:"
msgstr ""

#: C/build-helpers.xml:153(screen)
#, no-wrap
msgid ""
"\n"
"hello-debhelper (2.1.1-1) dapper; urgency=low\n"
"\n"
"  * Initial release\n"
"\n"
"  -- Captain Packager &lt;packager@coolness.com&gt;  Thu,  6 Apr 2006 "
"10:07:19 -0700"
msgstr ""
"\n"
"hello-debhelper (2.1.1-1) dapper; urgency=low\n"
"\n"
"  * Initial release\n"
"\n"
"  -- Captain Packager &lt;packager@coolness.com&gt; Thu, 6 Apr 2006 10:07:19 "
"-0700"

#: C/build-helpers.xml:160(para) C/basic.xml:830(para)
msgid ""
"By using <application>debhelper</application>, the only things we need to "
"change in <filename>control</filename> are the name (substituting "
"<application>hello</application> for <application>hello-"
"debhelper</application>) and adding <application>debhelper (&gt;= "
"4.0.0)</application> to the <emphasis>Build-Depends</emphasis> field for the "
"source package. The Ubuntu package for <application>hello-"
"debhelper</application> looks like:"
msgstr ""

#: C/build-helpers.xml:169(screen) C/basic.xml:839(screen)
#, no-wrap
msgid ""
"\n"
"Source: hello-debhelper\n"
"Section: devel\n"
"Priority: extra\n"
"Maintainer: Capitan Packager &lt;packager@coolness.com&gt;\n"
"Standards-Version: 3.6.1\n"
"Build-Depends: debhelper (&gt;= 4)\n"
"\n"
"Package: hello-debhelper\n"
"Architecture: any\n"
"Depends: ${shlibs:Depends}\n"
"Conflicts: hello\n"
"Provides: hello\n"
"Replaces: hello\n"
"Description: The classic greeting, and a good example\n"
" The GNU hello program produces a familiar, friendly greeting.  It\n"
" allows non-programmers to use a classic computer science tool which\n"
" would otherwise be unavailable to them.\n"
" .\n"
" Seriously, though: this is an example of how to do a Debian package.\n"
" It is the Debian version of the GNU Project's `hello world' program\n"
" (which is itself an example for the GNU Project).\n"
" .\n"
" This is the same as the hello package, except it uses debhelper to\n"
" make the deb.  Please see debhelper as to what it is.\n"
"\t\t"
msgstr ""
"\n"
"Source: hello-debhelper\n"
"Section: devel\n"
"Priority: extra\n"
"Maintainer: Capitan Packager &lt;packager@coolness.com&gt;\n"
"Standards-Version: 3.6.1\n"
"Build-Depends: debhelper (>= 4)\n"
"\n"
"Package: hello-debhelper\n"
"Architecture: any\n"
"Depends: ${shlibs:Depends}\n"
"Conflicts: hello\n"
"Provides: hello\n"
"Replaces: hello\n"
"Description: The classic greeting, and a good example\n"
" The GNU hello program produces a familiar, friendly greeting. It\n"
" allows non-programmers to use a classic computer science tool which\n"
" would otherwise be unavailable to them.\n"
" .\n"
" Seriously, though: this is an example of how to do a Debian package.\n"
" It is the Debian version of the GNU Project's `hello world' program\n"
" (which is itself an example for the GNU Project).\n"
" .\n"
" This is the same as the hello package, except it uses debhelper to\n"
" make the deb. Please see debhelper as to what it is.\n"
"\t\t"

#: C/build-helpers.xml:196(para) C/basic.xml:866(para)
msgid ""
"We can copy the <filename>copyright</filename> file and the "
"<filename>postinst</filename> and <filename>prerm</filename> scripts from "
"the Ubuntu <application>hello-debhelper</application> package, as they have "
"not changed since <xref linkend=\"basic-scratch\"/>. We will also copy the "
"<filename>rules</filename> file so we can inspect it."
msgstr ""

#: C/build-helpers.xml:204(screen) C/basic.xml:874(screen)
#, no-wrap
msgid ""
"\n"
"cp ../../ubuntu/hello-debhelper-2.1.1/debian/copyright .\n"
"cp ../../ubuntu/hello-debhelper-2.1.1/debian/postinst .\n"
"cp ../../ubuntu/hello-debhelper-2.1.1/debian/prerm .\n"
"cp ../../ubuntu/hello-debhelper-2.1.1/debian/rules ."
msgstr ""

#: C/build-helpers.xml:210(para) C/basic.xml:880(para)
msgid ""
"The last file we need to look at is <filename>rules</filename>, where the "
"power of <application>debhelper</application> scripts can be seen. The "
"<application>debhelper</application> version of <filename>rules</filename> "
"is somewhat smaller (54 lines as opposed to 72 lines in the version from "
"<xref linkend=\"basic-scratch-rules\"/>)."
msgstr ""
"마지막으로 봐야할 파을은 <filename>rules</filename>입니다. 이 파일에서 "
"<application>debhelper</application> 스크립트의 기능을 확인해보실 수 있습니다. "
"<filename>rules</filename>의 54줄 짜리 <application>debhelper</application>용 버전은 "
"72줄 짜리 <xref linkend=\"basic-scratch-rules\"/>용 버전보다 좀 짧습니다."

#: C/build-helpers.xml:217(para) C/basic.xml:887(para)
msgid "The <application>debhelper</application> version looks like:"
msgstr "<application>debhelper</application> 버전은 다음과 비슷합니다:"

#: C/build-helpers.xml:219(screen) C/basic.xml:889(screen)
#, no-wrap
msgid ""
" #!/usr/bin/make -f\n"
"\n"
"package = hello-debhelper\n"
"\n"
"CC = gcc\n"
"CFLAGS = -g -Wall\n"
"\n"
"ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n"
"  CFLAGS += -O2\n"
"endif\n"
"\n"
"#export DH_VERBOSE=1\n"
"\n"
"clean:\n"
"        dh_testdir\n"
"        dh_clean\n"
"        rm -f build\n"
"        -$(MAKE) -i distclean\n"
"\n"
"install: build\n"
"        dh_clean\n"
"        dh_installdirs\n"
"        $(MAKE) prefix=$(CURDIR)/debian/$(package)/usr \\\n"
"                mandir=$(CURDIR)/debian/$(package)/usr/share/man \\\n"
"                infodir=$(CURDIR)/debian/$(package)/usr/share/info \\\n"
"                install\n"
"\n"
"build:\n"
"        ./configure --prefix=/usr\n"
"        $(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n"
"        touch build\n"
"\n"
"binary-indep: install\n"
"# There are no architecture-independent files to be uploaded\n"
"# generated by this package.  If there were any they would be\n"
"# made here.\n"
"\n"
"binary-arch: install\n"
"        dh_testdir -a\n"
"        dh_testroot -a\n"
"        dh_installdocs -a NEWS\n"
"        dh_installchangelogs -a ChangeLog\n"
"        dh_strip -a\n"
"        dh_compress -a\n"
"        dh_fixperms -a\n"
"        dh_installdeb -a\n"
"        dh_shlibdeps -a\n"
"        dh_gencontrol -a\n"
"        dh_md5sums -a\n"
"        dh_builddeb -a\n"
"\n"
"binary: binary-indep binary-arch\n"
"\n"
".PHONY: binary binary-arch binary-indep clean checkroot\n"
"\t\t\t"
msgstr ""
" #!/usr/bin/make -f\n"
"\n"
"package = hello-debhelper\n"
"\n"
"CC = gcc\n"
"CFLAGS = -g -Wall\n"
"\n"
"ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n"
"  CFLAGS += -O2\n"
"endif\n"
"\n"
"#export DH_VERBOSE=1\n"
"\n"
"clean:\n"
"        dh_testdir\n"
"        dh_clean\n"
"        rm -f build\n"
"        -$(MAKE) -i distclean\n"
"\n"
"install: build\n"
"        dh_clean\n"
"        dh_installdirs\n"
"        $(MAKE) prefix=$(CURDIR)/debian/$(package)/usr \\\n"
"                mandir=$(CURDIR)/debian/$(package)/usr/share/man \\\n"
"                infodir=$(CURDIR)/debian/$(package)/usr/share/info \\\n"
"                install\n"
"\n"
"build:\n"
"        ./configure --prefix=/usr\n"
"        $(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n"
"        touch build\n"
"\n"
"binary-indep: install\n"
"# There are no architecture-independent files to be uploaded\n"
"# generated by this package. If there were any they would be\n"
"# made here.\n"
"\n"
"binary-arch: install\n"
"        dh_testdir -a\n"
"        dh_testroot -a\n"
"        dh_installdocs -a NEWS\n"
"        dh_installchangelogs -a ChangeLog\n"
"        dh_strip -a\n"
"        dh_compress -a\n"
"        dh_fixperms -a\n"
"        dh_installdeb -a\n"
"        dh_shlibdeps -a\n"
"        dh_gencontrol -a\n"
"        dh_md5sums -a\n"
"        dh_builddeb -a\n"
"\n"
"binary: binary-indep binary-arch\n"
"\n"
".PHONY: binary binary-arch binary-indep clean checkroot\n"
"\t\t\t"

#: C/build-helpers.xml:275(para) C/basic.xml:945(para)
msgid ""
"Notice that tasks like testing if you are in the right directory "
"(<application>dh_testdir</application>), making sure you are building the "
"package with root privileges (<application>dh_testroot</application>), "
"installing documentation (<application>dh_installdocs</application> and "
"<application>dh_installchangelogs</application>), and cleaning up after the "
"build (<application>dh_clean</application>) are handled automatically. Many "
"packages much more complicated than <application>hello</application> have "
"<filename>rules</filename> files no bigger because the "
"<application>debhelper</application> scripts handle most of the tasks. For a "
"complete list of <application>debhelper</application> scripts, please see "
"<xref linkend=\"appendix-debhelper\"/>. They are also well documented in "
"their respective <application>man</application> pages. It is a useful "
"exercise to read the man page (they are well written and not lengthy) for "
"each helper script used in the above <filename>rules</filename> file."
msgstr ""
"참고로, 현재 올바른 디렉트리에 있는지(<application>dh_testdir</application>), 루트 권한으로 패키지를 "
"빌드하고 있는지(<application>dh_testroot</application>) 확인하는 작업, 문서를 "
"설치하고((<application>dh_installdocs</application>와 "
"<application>dh_installchangelogs</application>), 빌드가 끝난 후 정리하는 "
"작업(<application>dh_clean</application>)은 모두 자동으로 처리됩니다. "
"<application>hello</application> 패키지보다 훨씬 복잡한 패키지들도 "
"filename>rules</filename>파일의 크기가 별반 다르지 않습니다. 그 이유는 "
"<application>debhelper</application> 스크립트에서 필요한 작업을 대부분 처리하기 때문입니다. "
"<application>debhelper</application> 스크립트의 완전한 목록을 보기 위해서는 <xref "
"linkend=\"appendix-debhelper\"/>를 참조하시기 바랍니다. 이 스크립트들에 관한 정보는 "
"<application>man</application>페이지에도 잘 정리되어 있습니다. 앞에  "
"<filename>rules</filename> 파일에 있는 스크립트 맨페이지에 해당 스크립트에 관한 설명이 잘 정리되어 있고 길이가 "
"길지 않기 때문에 맨페이지를 읽는 것을 권장합니다."

#: C/build-helpers.xml:294(title) C/basic.xml:631(title) C/basic.xml:964(title)
msgid "Building the Source Package"
msgstr "소스 패키지 만들기"

#: C/build-helpers.xml:296(para) C/basic.xml:966(para)
msgid ""
"Now that we have gone through the files in the <filename>debian</filename> "
"directory for <application>hello-debhelper</application>, we can build the "
"source (and binary) packages. First, let us move back into the source "
"directory:"
msgstr ""
"이제 우리는 <application>hello-debhelper</application> 를 위한 "
"<filename>debian</filename> 디렉토리 내의 파일들을 모두 살펴 보았고, 소스(그리고 바이너리) 패키지를 만들 수 "
"있습니다. 우선은, 소스 디렉토리로 다시 이동합니다:"

#: C/build-helpers.xml:302(screen) C/basic.xml:639(screen) C/basic.xml:972(screen)
#, no-wrap
msgid "cd .."
msgstr "cd .."

#: C/build-helpers.xml:304(para) C/basic.xml:974(para)
msgid ""
"Now we build the source package using <application>debuild</application>, a "
"wrapper script for <application>dpkg-buildpackage</application>:"
msgstr ""
"이제 우리는 <application>dpkg-buildpackage</application> 를 위한 랩퍼 스크립트인, "
"<application>debuild</application> 를 사용하여 소스 패키지를 만듭니다:"

#: C/build-helpers.xml:308(screen) C/basic.xml:978(screen)
#, no-wrap
msgid "debuild -S"
msgstr "debuild -S"

#: C/build-helpers.xml:310(para) C/basic.xml:980(para)
msgid "the binary package, using <application>pbuilder</application>:"
msgstr "바이너리 패키지, <application>pbuilder</application> 사용:"

#: C/build-helpers.xml:313(screen) C/basic.xml:671(screen) C/basic.xml:983(screen)
#, no-wrap
msgid "sudo pbuilder build ../*.dsc"
msgstr "sudo pbuilder build ../*.dsc"

#: C/build-helpers.xml:315(para) C/basic.xml:985(para)
msgid ""
"and finally check the source package for common mistakes using "
"<application>lintian</application>:"
msgstr ""
"그리고 마지막으로 <application>lintian</application> 을 사용하여 소스 패키지의 일반적인 실수를 점검 합니다:"

#: C/build-helpers.xml:318(screen) C/basic.xml:683(screen) C/basic.xml:988(screen)
#, no-wrap
msgid ""
"cd ..\n"
"lintian -i *.dsc"
msgstr ""
"cd ..\n"
"lintian -i *.dsc"

#: C/build-helpers.xml:326(title) C/basic.xml:996(title)
msgid "Packaging With CDBS"
msgstr "CDBS로 패키징"

#: C/build-helpers.xml:328(para) C/basic.xml:998(para)
msgid ""
"CDBS is a tool that uses debhelper to make building and maintaining Debian "
"packages even easier. It has many advantages:"
msgstr ""
"CDBS는 데비안 패키지를 만들고 유지관리 하는 것을 보다 쉽게 만들기 위해 debhelper를 사용하는 도구 입니다. 이것은 많은 "
"장점을 가지고 있습니다:"

#: C/build-helpers.xml:332(para) C/basic.xml:1002(para)
msgid ""
"It produces a short, readable, and efficient "
"<filename>debian/rules</filename>"
msgstr "이것은 간결한, 읽기쉬운, 그리고 효과적인 <filename>debian/rules</filename> 을 생산 합니다."

#: C/build-helpers.xml:335(para) C/basic.xml:1005(para)
msgid ""
"It automates debhelper and autotools for you, so you do not have to worry "
"about repetitive tasks"
msgstr ""
"이것은 여러분을 위하여 debhelper와 autotools를 자동화 하고, 그래서 여러분은 반복적인 작업에 대해 걱정하지 않아도 됩니다."

#: C/build-helpers.xml:338(para) C/basic.xml:1008(para)
msgid ""
"It helps you focus on more important packaging problems, because it helps "
"without limiting customization"
msgstr "그것은 커스터마이징에 제한하는 것 없이 도울 수 있으므로 보다 중요한 패키징 문제에 여러분이 집중할 수 있도록 돕습니다"

#: C/build-helpers.xml:341(para) C/basic.xml:1011(para)
msgid ""
"Its classes have been well tested, so you can avoid dirty hacks to solve "
"common problems"
msgstr ""
"그것의 클래스는 매우 잘 테스트 되었으므로 공통적인 문제를 해결하기 위해 지저분하게 여기저기를 고치는 것을 피할 수 있습니다"

#: C/build-helpers.xml:344(para) C/basic.xml:1014(para)
msgid "Switching to CDBS is easy"
msgstr "CDBS로 전환하는 것은 쉽습니다"

#: C/build-helpers.xml:346(para) C/basic.xml:1016(para)
msgid "It is extensible"
msgstr "이것은 확장가능 합니다"

#: C/build-helpers.xml:350(title) C/basic.xml:1020(title)
msgid "Using CDBS in packages"
msgstr "패키지에 CDBS 사용 하기"

#: C/build-helpers.xml:352(para) C/basic.xml:1022(para)
msgid ""
"Using CDBS for Ubuntu packages is very easy. After adding "
"<application>cdbs</application> to the Build-Depends in "
"<filename>debian/control</filename>, a basic "
"<filename>debian/rules</filename> file using CDBS can fit in 2 lines. For a "
"simple C/C++ application with no extra rules, such as "
"<application>hello</application>, <filename>debian/rules</filename> can look "
"like this :"
msgstr ""

#: C/build-helpers.xml:360(screen) C/basic.xml:1030(screen)
#, no-wrap
msgid ""
"#!/usr/bin/make -f\n"
"\t\t\t\t\n"
"include /usr/share/cdbs/1/rules/debhelper.mk\n"
"include /usr/share/cdbs/1/class/autotools.mk"
msgstr ""
"#!/usr/bin/make -f\n"
"\t\t\t\t\n"
"include /usr/share/cdbs/1/rules/debhelper.mk\n"
"include /usr/share/cdbs/1/class/autotools.mk"

#: C/build-helpers.xml:365(para) C/basic.xml:1035(para)
msgid ""
"That is all you need to build the program! CDBS handles installing and "
"cleaning. You can then use the <filename>.install</filename> and "
"<filename>.info</filename> files to tune your package with the usual "
"debhelper functions in the various sections for "
"<filename>debian/rules</filename>."
msgstr ""
"이것은 프로그램을 빌드하기 위해 여러분이 필요한 전부 입니다! CDBS 가 설치와 지우는 것을 관리 합니다. 여러분은 그런 후에 "
"<filename>debian/rules</filename> 를 위한 다양한 영역에 있는 보통의 debhelper 기능과 함께 여러분의 "
"패키지를 조정하기 위해 <filename>.install</filename> 과  <filename>.info</filename> 파일을 "
"사용할 수 있습니다."

#: C/build-helpers.xml:371(para) C/basic.xml:1041(para)
msgid ""
"Do not use DEB_AUTO_UPDATE_DEBIAN_CONTROL:=yes to automatically change "
"<filename>debian/control</filename>. It can cause bad things, and Debian "
"considers it a reason to reject a package from entering the archives. See "
"<ulink url=\"http://ftp-master.debian.org/REJECT-FAQ.html\"> http://ftp-"
"master.debian.org/REJECT-FAQ.html</ulink> for more information."
msgstr ""
"<filename>debian/control</filename> 파일을 자동적으로 변경하기 위하여 "
"DEB_AUTO_UPDATE_DEBIAN_CONTROL:=yes 를 사용하지 마십시오, 그것은 안 좋은 일을 일으키고, 데비안에서는 "
"그러한 패키지가 저장소에 들어올 때 거절을 하는 이유로 고려를 하고 있습니다. 더 많은 정보는, <ulink "
"url=\"http://ftp-master.debian.org/REJECT-FAQ.html\"> http://ftp-"
"master.debian.org/REJECT-FAQ.html</ulink> 을 보십시오."

#: C/build-helpers.xml:379(para) C/basic.xml:1049(para)
msgid ""
"As you can see, CDBS mostly works by including <filename>.mk</filename> "
"Makefiles in <filename>debian/rules</filename>. The "
"<application>cdbs</application> package provides such files in "
"<filename>/usr/share/cdbs/1/</filename> that allow you to do quite a lot of "
"packaging tasks. Other packages, such as <application>quilt</application>, "
"add modules to CDBS and can be used as Build-Depends. Note that you can also "
"use your own CDBS rules and include them in the package. The most useful "
"modules included with the <application>cdbs</application> package are:"
msgstr ""
"여러분이 보는 것처럼, CDBS는 <filename>debian/rules</filename> 내의 "
"<filename>.mk</filename> Makefiles 를 포함하는 것에 의해 대부분 동작 합니다. "
"<application>cdbs</application> 패키지는 여러분이 아주 많은 패키징 작업을 할 수 있도록 허용하는 "
"<filename>/usr/share/cdbs/1/</filename> 내에 그러한 파일들을 제공 합니다. "
"<application>quilt</application> 와 같은 다른 패키지들은, 모듈을 CDBS에 추가하고 Build-Depends "
"로 사용되어 질 수 있습니다. 여러분은 또한 여러분 소유의 CDBS 규칙들을 사용할 수 있고 그것들을 패키지에 포함할 수 있음을 주의 "
"하십시오. <application>cdbs</application> 패키지에 포함되는 가장 유용한 모듈들은 다음과 같습니다:"

#: C/build-helpers.xml:391(para) C/basic.xml:1061(para)
msgid ""
"<filename>rules/debhelper.mk</filename>: Calls debhelper in all required "
"sections"
msgstr ""
"<filename>rules/debhelper.mk</filename>: 모든 필요한 영역에 debhelper를 호출 합니다."

#: C/build-helpers.xml:394(para) C/basic.xml:1064(para)
msgid ""
"<filename>rules/dpatch.mk</filename>: Allows you to use dpatch to ease "
"patching the source"
msgstr ""
"<filename>rules/dpatch.mk</filename>: 여러분이 소스를 쉽게 패칭하기 위해 dpatch를 사용하는 것을 허용 "
"합니다."

#: C/build-helpers.xml:397(para) C/basic.xml:1067(para)
msgid ""
"<filename>rules/simple-patchsys.mk</filename>: Provides a very easy way to "
"patch the source"
msgstr ""
"<filename>rules/simple-patchsys.mk</filename>: 소스를 패치하는 아주 쉬운 방법을 제공 합니다."

#: C/build-helpers.xml:400(para) C/basic.xml:1070(para)
msgid ""
"<filename>rules/tarball.mk</filename>: Allows you to build packages using "
"the compressed tarball in the package"
msgstr ""
"<filename>rules/tarball.mk</filename>: 여러분이 패키지에서 압축된 tarball을 사용하여 패키지를 만드는 "
"것을 허용 합니다."

#: C/build-helpers.xml:404(para) C/basic.xml:1074(para)
msgid ""
"<filename>class/autotools.mk</filename>: Calls autotools in all required "
"sections"
msgstr ""
"<filename>class/autotools.mk</filename>: 모든 필요한 영역에 autotools를 호출 합니다."

#: C/build-helpers.xml:407(para) C/basic.xml:1077(para)
msgid ""
"<filename>class/gnome.mk</filename>: Builds GNOME programs (requires the "
"proper Build-Depends in <filename>debian/control</filename>)"
msgstr ""
"<filename>class/gnome.mk</filename>: GNOME 프로그램을 만듭니다. "
"(<filename>debian/control</filename> 내에 적절한 Build-Depends 을 요구 합니다.)"

#: C/build-helpers.xml:411(para) C/basic.xml:1081(para)
msgid ""
"<filename>class/kde.mk</filename>: Builds KDE programs (requires the proper "
"Build-Depends in <filename>debian/control</filename>)"
msgstr ""
"<filename>class/kde.mk</filename>: KDE 프로그램을 만듭니다. "
"(<filename>debian/control</filename> 내에 적절한 Build-Depends 을 요구 합니다.)"

#: C/build-helpers.xml:415(para) C/basic.xml:1085(para)
msgid ""
"<filename>class/python-distutils.mk</filename>: Facilitates packaging Python "
"programs"
msgstr ""
"<filename>class/python-distutils.mk</filename>: 파이썬 프로그램의 패키징을 용이하게 합니다."

#: C/build-helpers.xml:422(title) C/basic.xml:1092(title)
msgid "More information on CDBS"
msgstr "CDBS에 대한 더 많은 정보"

#: C/build-helpers.xml:424(para) C/basic.xml:1094(para)
msgid ""
"For more information on CDBS, see Marc Dequènes's guide at <ulink "
"url=\"https://perso.duckcorp.org/duck/cdbs-doc/cdbs-"
"doc.xhtml\">https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml</ulink>."
msgstr ""
"CDBS에 대한 더 많은 정보는, <ulink url=\"https://perso.duckcorp.org/duck/cdbs-"
"doc/cdbs-doc.xhtml\">https://perso.duckcorp.org/duck/cdbs-doc/cdbs-"
"doc.xhtml</ulink> 에 있는 Marc Dequènes 의 안내서를 보십시오."

#: C/bugs.xml:15(title)
msgid "Bugs"
msgstr "버그"

#: C/bugs.xml:17(para)
msgid ""
"One thing that you will almost certainly face as a packager is a bug in the "
"software itself or in your packaging. Packaging bugs are often fairly easy "
"and straightforward to fix. However, as packagers often act as the initial "
"contact for software bugs for the users of their distribution(s), they also "
"implement temporary fixes and are responsible for forwarding bug reports and "
"fixes to the original (upstream) authors."
msgstr ""
"패키지 관리자로써 여러분이 마주치게 될 확실한 한 가지는 소프트웨어 자체 또는 여러분의 패키징에 있는 버그 입니다. 패키징의 버그는 종종 "
"고치는 것이 굉장히 쉽고 단순 합니다. 그러나, 패키지 관리자는 배포판 사용자를 위하여 소프트웨어 버그의 최초 접촉자로써 자주 역할을 "
"하고, 또한 임시 픽스를 적용하고 버그 리포팅과 픽스를 원래의 (업스트림) 저작자에게 전달하는 책임을 가집니다."

#: C/bugs.xml:24(para)
msgid ""
"The <ulink url=\"https://wiki.ubuntu.com/BugSquad\">Ubuntu Bug Squad</ulink> "
"is the Quality Assurance (QA) team for &ubuntu;. The people in the team work "
"tirelessly to make &ubuntu; a better place. They keep track of all the bugs "
"in the &ubuntu; Distribution and make sure that major bugs don't go "
"unnoticed by the developers. Anyone can join the Bug Squad and it is a great "
"entry point for people wanting to contribute to &ubuntu;. The Bug Squad can "
"be found on the <emphasis>#ubuntu-bugs</emphasis> IRC channel on "
"<emphasis>&irc-server;</emphasis>"
msgstr ""

#: C/bugs.xml:35(title)
msgid "Bug Tracking Systems"
msgstr "버그 추적 시스템"

#: C/bugs.xml:37(para)
msgid ""
"In order to track bugs (both software and packaging), many distributions "
"have developed bug tracking systems to manage bug reports and to notify the "
"package maintainers and reporters of changes. The table below shows some of "
"the Debian and &ubuntu; tools for tracking bugs."
msgstr ""

#: C/bugs.xml:42(emphasis)
msgid "Bug Tracking Systems (BTS)"
msgstr "버그 추적 시스템 (BTS)"

#: C/bugs.xml:43(para)
msgid ""
"Debian : <ulink url=\"http://bugs.debian.org\">http://bugs.debian.org</ulink>"
msgstr ""
"데비안 : <ulink url=\"http://bugs.debian.org\">http://bugs.debian.org</ulink>"

#: C/bugs.xml:44(para)
msgid ""
"&ubuntu; : <ulink "
"url=\"http://launchpad.net/malone/distros/ubuntu\">http://la"
"unchpad.net/malone/distros/ubuntu</ulink>"
msgstr ""

#: C/bugs.xml:46(emphasis)
msgid "Bugs for Specific Packages"
msgstr "특정 패키지의 버그"

#: C/bugs.xml:47(para)
msgid ""
"Debian : http://bugs.debian.org/<emphasis>&lt;packagename&gt;</emphasis>"
msgstr ""
"데비안 : http://bugs.debian.org/<emphasis>&lt;packagename&gt;</emphasis>"

#: C/bugs.xml:48(para)
msgid "&ubuntu; : use search at &ubuntu; BTS"
msgstr ""

#: C/bugs.xml:49(emphasis)
msgid "Bugs for Source Packages"
msgstr "소스 패키지의 버그"

#: C/bugs.xml:50(para)
msgid ""
"Debian : http://bugs.debian.org/src:<emphasis>&lt;packagename&gt;</emphasis>"
msgstr ""
"데비안 : http://bugs.debian.org/src:<emphasis>&lt;packagename&gt;</emphasis>"

#: C/bugs.xml:51(para)
msgid ""
"&ubuntu; : "
"https://launchpad.net/distros/ubuntu/+source/<emphasis>&lt;packagen"
"ame&gt;</emphasis>/+bugs"
msgstr ""

#: C/bugs.xml:52(emphasis)
msgid "Package Information"
msgstr "패키지 정보"

#: C/bugs.xml:53(para)
msgid ""
"Debian : <ulink "
"url=\"http://packages.debian.org\">http://packages.debian.org</ulink> or "
"http://packages.qa.debian.org/<emphasis>&lt;packagename&gt;</emphasis>"
msgstr ""

#: C/bugs.xml:55(para)
msgid ""
"&ubuntu; : <ulink "
"url=\"http://packages.ubuntu.com\">http://packages.ubuntu.com</ulink> or "
"https"
"://launchpad.net/distros/ubuntu/+source/<emphasis>&lt;packagename&gt;</em"
"phasis> for source packages"
msgstr ""

#: C/bugs.xml:63(title)
msgid "Bug Tips"
msgstr "버그 팁"

#: C/bugs.xml:66(title)
msgid "Proper source package"
msgstr "적절한 소스 패키지"

#: C/bugs.xml:68(para)
msgid ""
"Assigning bugs to packages helps direct bug reports to the developer(s) most "
"likely to be able to help. By ensuring that this information is accurate, "
"you increase the chances of the bug being fixed promptly. Often, it is "
"unclear which package contains the bug, and in these cases it is appropriate "
"to file the bug in Ubuntu. If a bug is assigned to a package which is "
"clearly not correct, and you don't know the correct package, change it to "
"Ubuntu."
msgstr ""
"버그를 패키지에 지정하는 것은 도움이 가능한 개발자에게 버그 리포트를 가리키는 것을 돕습니다. 이 정보가 정확한 것을 확신하는 것으로, "
"여러분은 즉시 버그가 고쳐질 수 있는 기회를 높이게 됩니다. 자주, 어느 패키지가 버그를 가지고 있는지가 불분명하고, 이런 경우는 "
"Ubuntu(역주: 특정 소스 패키지의 지정이 어려울 때 사용할 수 있음)로 버그를 파일하는 것이 적당 합니다. 만약 버그에 지정된 "
"패키지가 확실히 틀렸거나, 올바른 패키지를 모른다면, 패키지를 Ubuntu로 변경 하십시오."

#: C/bugs.xml:76(para)
msgid ""
"The correct package for bugs in the Linux kernel is "
"<application>linux</application>, regardless of which particular package is "
"in use (there are many packages which contain Linux kernels)."
msgstr ""
"리눅스 커널 내의 버그를 위한 올바른 패키지는, 사용하는 (리눅스 커널을 포함하는 많은 패키지가 있습니다) 특정 패키지와 관계없이 "
"<application>linux</application> 입니다."

#: C/bugs.xml:82(title)
msgid "Confirming problems"
msgstr "문제 확인 하기"

#: C/bugs.xml:84(para)
msgid ""
"If a bug is marked as Unconfirmed, it is helpful for you to try to reproduce "
"the problem and record the results in Malone. If you are able to confirm the "
"problem, you may change the status to Confirmed. If you are unable to "
"confirm the problem, that is also useful information that should be recorded "
"in a comment."
msgstr ""
"만약 버그가 Unconfirmed 로 표시되어 있다면, 여러분이 문제를 재현하는 것을 시도하고 그 결과를 Malone에 기록하는 것이 "
"도움이 됩니다. 만약 문제를 확인할 수 있다면, 그 버그의 상태를 Confirmed 로 변경 하십시오. 문제를 확인하는 것이 불가능 "
"하다면, 덧글로 그것을 기록하는 것도 역시 유용한 정보가 됩니다."

#: C/bugs.xml:90(emphasis)
msgid "Forwarding bugs upstream"
msgstr "업스트림으로 버그 전달 하기"

#: C/bugs.xml:93(para)
msgid "You can forward bugs to the authors of the software (upstream), if"
msgstr "여러분은 다음의 경우, 소프트웨어 (업스트림)의 저작자에게 버그를 전달할 수 있습니다"

#: C/bugs.xml:98(para)
msgid ""
"you made sure that the bug doesn't occur because of Ubuntu related changes"
msgstr "버그가 우분투 관련 변경에 의해 일어나지 않았음을 확신하였을 경우"

#: C/bugs.xml:103(para)
msgid ""
"the change is too hard to be fixed by yourself or anyone else on the team"
msgstr "여러분과 팀의 다른 사람이 버그를 고치는 변경을 하는 것이 너무 어려울 경우"

#: C/bugs.xml:107(para)
msgid ""
"If you do this, be sure to include all the necessary information, such as"
msgstr "버그를 전달하는 경우, 다음과 같은 모든 필요한 정보를 포함하는 것을 확신 하십시오"

#: C/bugs.xml:112(para)
msgid "how to reproduce the bug"
msgstr "어떻게 버그를 재현 하는지"

#: C/bugs.xml:114(para)
msgid ""
"which version is used (which version of dependent libraries, if the bug "
"indicates problems there)"
msgstr "어느 버전이 사용 되었는지 (만약 버그의 문제가 의존된 라이브러리에 있다면 그 버전)"

#: C/bugs.xml:117(para)
msgid "who reported it"
msgstr "누가 버그를 리포트 하였는지"

#: C/bugs.xml:119(para)
msgid "where the whole conversation can be found"
msgstr "어디서 전체 대화를 찾을 수 있는지"

#: C/bugs.xml:124(para)
msgid "Make sure to also create a bug watch in Malone for this bug."
msgstr "또한 이 버그를 위해 Malone의 버그 감시를 만드는 것을 확신 하십시오."

#: C/bugs.xml:129(title)
msgid "How to Deal with Feature Requests"
msgstr "기능 요청 처리 하기"

#: C/bugs.xml:131(para)
msgid ""
"If you feel that the bug reported is a feature request disguised as a bug "
"report, please introduce the reporter gently to the <emphasis>specification "
"process</emphasis> we have. Be sure to mention the following specification "
"resources: FeatureSpecifications, SpecSpec, SpecTemplate, and <ulink "
"url=\"http://launchpad.net/specs\">http://launchpad.net/specs</ulink>"
msgstr ""

#: C/bugs.xml:140(title)
msgid "How to deal with Support Requests"
msgstr "지원 요청 처리 하기"

#: C/bugs.xml:142(para)
msgid ""
"If you feel that the bug reported is a support request disguised as a bug "
"report, please introduce the reporter gently to the Support Tracker we have. "
"Be sure to mention <ulink "
"url=\"http://launchpad.net/support\">http://launchpad.net/support</ulink>."
msgstr ""
"만약 여러분이 어느 보고된 버그가 지원 요청을 버그 리포트로 꾸몄다고 느낀다면, 보고자에게 우리가 가진 지원 추적을 친절하게 소개 "
"하십시오. <ulink "
"url=\"http://launchpad.net/support\">http://launchpad.net/support</ulink> 를 "
"언급하는 것을 확신 하십시오."

#: C/bugs.xml:149(title)
msgid "How to deal with suggestions for changing defaults"
msgstr "기본 설정을 변경하는 제안을 처리 하기"

#: C/bugs.xml:151(para)
msgid ""
"If you feel that the bug reported is a suggestion for changing defaults "
"disguised as a bug report, please kindly reroute the discussion to an "
"appropriate mailing list or discussion forum. If this change has already "
"been discussed and rejected, explain the reasons to the user and direct him "
"or her to the relevant discussion for further suggestions/comments."
msgstr ""
"만약 여러분이 어느 보고된 버그가 기본 설정을 변경하는 제안을 버그 리포트로 꾸몄다고 느낀다면, 친절하게 그 논의를 적절한 메일링 리스트 "
"또는 토론 포럼으로 돌리십시오. 그 변경이 이미 논의되었고 거부되었다면, 그 사용자에게 사유를 설명하고 더 이상의 제안과 의견을 위한 "
"타당한 논의를 가리켜 주십시오."

#: C/bugs.xml:159(title)
msgid "Finding Duplicates"
msgstr "중복된 버그 찾기"

#: C/bugs.xml:161(para)
msgid ""
"Finding duplicates of bugs is a very valuable contribution in the Bug "
"community. Users sometimes don't know how to check if the same bug has "
"already been filed, and sometimes they don't care. Weeding out simple ME TOO "
"messages and aggregating information is crucial to the process of fixing a "
"bug."
msgstr ""
"중복된 버그를 찾는 것은 버그 커뮤니티에서 매우 가치있는 기여 입니다. 사용자들은 때로 이미 파일된 같은 버그가 있는지를 어떻게 "
"검사하는지 모르고, 상관하지 않습니다. 간단한 ME TOO 메세지를 제거하고 정보를 집합하는 것은 버그를 고치는 과정에 매우 중요 합니다."

#: C/bugs.xml:167(para)
msgid ""
"There are quite a few measures you can take to assist with this aspect. One "
"is to search for bugs filed for the same component. Also try to rephrase "
"your search, and concentrate on actions and words that describe the items "
"involved to reproduce the bug."
msgstr ""
"이 측면에 여러분이 도움을 가질 수 있는 아주 약간의 수단이 있습니다. 하나는 같은 구성 요소 (역주: 소스패키지와 관련 라이브러리등) "
"의 파일된 버그를 찾는 것 입니다. 또한 여러분의 검색을 고쳐서 시도해 보고, 버그를 재현하는데 관계된 아이템을 기술하는 행위와 단어에 "
"집중 합니다."

#: C/bugs.xml:172(emphasis)
msgid "Examples:"
msgstr "예:"

#: C/bugs.xml:175(para)
msgid ""
"Easy ones: <ulink url=\"https://launchpad.net/malone/bugs/24932\">DAAP "
"support</ulink> is a duplicate of <ulink "
"url=\"https://launchpad.net/malone/bugs/24860\">please enable daap</ulink>."
msgstr ""
"쉬운 예: <ulink url=\"https://launchpad.net/malone/bugs/24932\">DAAP "
"support</ulink> 는 <ulink "
"url=\"https://launchpad.net/malone/bugs/24860\">please enable daap</ulink> 의 "
"중복 입니다."

#: C/bugs.xml:180(para)
msgid ""
"More difficult ones: <ulink "
"url=\"https://launchpad.net/malone/bugs/24011\">plug:spdif on emu10k1 gone "
"after breezy upgrade</ulink> is a duplicate of <ulink "
"url=\"https://launchpad.net/malone/bugs/21804\"> Muted sound after dist-"
"upgrade from Hoary to Breezy</ulink>."
msgstr ""
"약간 어려운 예: <ulink url=\"https://launchpad.net/malone/bugs/24011\">plug:spdif "
"on emu10k1 gone after breezy upgrade</ulink> 는 <ulink "
"url=\"https://launchpad.net/malone/bugs/21804\"> Muted sound after dist-"
"upgrade from Hoary to Breezy</ulink> 의 중복 입니다."

#: C/bugs.xml:188(para)
msgid ""
"If you can't find it in the list of open bugs, you could try to find it in "
"the list of closed ones. Don't feel discouraged if you don't find duplicates "
"quickly in the beginning. After some time, you will recognize the usual "
"suspects and will be able to identify them more easily."
msgstr ""
"만약 여러분이 그것을 오픈된 버그의 목록에서 찾을 수 없다면, 종료된 것의 목록에서 찾기를 시도할 수도 있습니다. 시작하면서 빨리 중복된 "
"것을 찾을 수 없다고 해도 의욕 상실을 느끼지 마십시오. 얼마간의 시간이 흐른 후에, 여러분은 보통의 의심되는 것을 인식하고 그것들을 "
"보다 쉽게 구별할 수 있게 됩니다."

#: C/bugs.xml:193(para)
msgid ""
"If you encounter a bug that has a terrible/unintelligible title, rephrase it "
"so people find it more quickly."
msgstr ""
"만약 여러분이 어느 버그가 형편없는/이해할 수 없는 제목을 가지고 있는 것을 보게 되면, 그것을 바꾸고 그러면 사람들이 보다 빨리 버그를 "
"찾습니다."

#: C/bugs.xml:199(title)
msgid "Reminder of the Code of Conduct"
msgstr "Code of Conduct를 알려 주기"

#: C/bugs.xml:201(para)
msgid ""
"Note that the Code of Conduct applies to conversations in bug reports too. "
"If you observe people being disrespectful, please direct them to the <ulink "
"url=\"http://www.ubuntu.com/community/conduct\">Ubuntu Code of "
"Conduct</ulink>."
msgstr ""
"Code of Conduct는 버그 리포트의 대화에도 적용이 되는 것을 주의 하십시오. 만약 사람들이 공경치 않음을 관찰하게 된다면, "
"그들에게 <ulink url=\"http://www.ubuntu.com/community/conduct\">우분투 Code of "
"Conduct</ulink> 를 가리켜 주십시오."

#: C/bugs.xml:210(title)
msgid "Managing Status"
msgstr "상태 관리 하기"

#: C/bugs.xml:212(para)
msgid ""
"As a bug triager or developer bug status an important tool to categorize "
"bugs and have a good overview of the state of packages and software."
msgstr ""

#: C/bugs.xml:215(para)
msgid "Here's a brief list and explanation of the various statuses:"
msgstr "여러 가지 상태에 대한 간략한 목록과 설명이 여기 있습니다:"

#: C/bugs.xml:219(para)
msgid ""
"<emphasis role=\"bold\">Unconfirmed:</emphasis> Bugs start with this status. "
"Bugs marked Unconfirmed sometimes lack information, are not ready, or are "
"not confirmed yet. Most of them have not yet been triaged."
msgstr ""
"<emphasis role=\"bold\">Unconfirmed:</emphasis> 버그는 이 상태에서 시작을 합니다. "
"Unconfirmed 으로 표시는 버그는 때로는 부족한 정보, 준비가 안된 또는 확인이 안된 것 입니다. 그 버그 중의 대부분은 아직 "
"선별되지 않았습니다."

#: C/bugs.xml:224(para)
msgid ""
"<emphasis role=\"bold\">Needs Info:</emphasis> If you have to ask the "
"reporter questions, please set this bug to \"Needs Info\". A regular task "
"for Needs Info bugs is to ask back. If there are no answers after a "
"reasonable period, close them saying \"If you have more information on this "
"bug, please reopen.\""
msgstr ""
"<emphasis role=\"bold\">Needs Info:</emphasis> 만약 여러분이 버그 보고자에게 물어볼 질문이 있다면, "
"그 버그를 \"Needs Info\" 로 정하십시오. Needs Info 버그의 보통 일은 역으로 물어보는 것 입니다. 적당한 기간이 "
"지난 후에도 만약 대답이 없다면, 그 버그를 \"If you have more information on this bug, please "
"reopen.\" 라고 이야기 하며 닫으십시오."

#: C/bugs.xml:231(para)
msgid ""
"<emphasis role=\"bold\">Rejected:</emphasis> Bugs marked as Rejected are "
"closed. Be sure to triple-check a bug before you reject it."
msgstr ""
"<emphasis role=\"bold\">Rejected:</emphasis> Rejected 로 표시된 버그는 종료된 것 입니다. "
"버그를 거절하기 전에 세 번 점검하는 것을 확신 하십시오."

#: C/bugs.xml:235(para)
msgid ""
"<emphasis role=\"bold\">Confirmed:</emphasis> Confirmed bugs require "
"somebody else to confirm. Please don't confirm your own bugs."
msgstr ""
"<emphasis role=\"bold\">Confirmed:</emphasis> 확인된 버그는 버그 버고자가 아닌 타인의 확인이 필요 "
"합니다. 여러분 자신의 버그를 확인하지 마십시오."

#: C/bugs.xml:239(para)
msgid ""
"<emphasis role=\"bold\">In Progress:</emphasis> If you start working on a "
"bug, set it to In Progress so people know someone is working on the bug."
msgstr ""
"<emphasis role=\"bold\">In Progress:</emphasis> 만약 여러분이 버그를 고치는 작업을 시작하면, "
"버그의 상태를 In Progress 로 정하십시오. 그래서 사람들은 누군가 그 버그에 대한 작업을 하는 것을 알게 됩니다."

#: C/bugs.xml:243(para)
msgid ""
"<emphasis role=\"bold\">Fix Committed:</emphasis> For upstream projects this "
"means the fix is in CVS/SVN/bzr or committed somewhere. For package "
"maintainers it means that the changes are pending and to be uploaded soon "
"(it is what PENDINGUPLOAD is in Bugzilla)"
msgstr ""
"<emphasis role=\"bold\">Fix Committed:</emphasis> 이 상태는 픽스가 업스트림의 "
"CVS/SVN/bzr 또는 다른 곳에 커밋되었음을 의미 합니다. 패키지 관리자에게 이것은 변경은 잠시 멈춰있고 조만간 업로드 될 것이라는 "
"것을 의미 합니다. (이것은 버그질라의 PENDINGUPLOAD 입니다.)"

#: C/bugs.xml:249(para)
msgid ""
"<emphasis role=\"bold\">Fix Released:</emphasis> For upstream projects this "
"means that a release tarball was announced and is publicly available. For "
"package maintainers this means that a fix was uploaded. Please don't be "
"hesitant to add a changelog as a comment, so people know which changes "
"affect their bug(s)."
msgstr ""
"<emphasis role=\"bold\">Fix Released:</emphasis> 업스트림 프로젝트를 위해 이것은 릴리스 "
"tarball이 발표되었고 공개적으로 사용이 가능함을 의미 합니다. 패키지 관리자에게 이것은 픽스가 업로드 되었음을 의미 합니다. 덧글로 "
"changelog 를 추가하는 것에 주저하지 마시고, 그래야 사람들이 그들의 버그에 어떤 변경이 영향을 주었는지 알 수 있습니다."

#: C/bugs.xml:260(title)
msgid "Managing Importance"
msgstr ""

#: C/bugs.xml:262(para)
msgid "Launchpad uses the following guidelines for assigning importance:"
msgstr ""

#: C/bugs.xml:265(para)
msgid ""
"<emphasis role=\"bold\">Untriaged:</emphasis> the bug report has not be "
"triaged yet. This is the default importance for new bugs."
msgstr ""

#: C/bugs.xml:267(para)
msgid ""
"<emphasis role=\"bold\">Wishlist:</emphasis> a request to add a new feature "
"to one of the programs in Ubuntu. Use this for bugs which aren't really bugs "
"but ideas for new features which do not yet exist."
msgstr ""
"<emphasis role=\"bold\">Wishlist:</emphasis> 우분투 내의 프로그램에 새 기능을 추가하는 요청. 이것은 "
"버그가 정말로 버그가 아니라 아직 있지 않는 새 기능을 위한 아이디어일 때 사용 합니다."

#: C/bugs.xml:272(para)
msgid ""
"<emphasis role=\"bold\">Low:</emphasis> bugs that affect functionality, but "
"to a lesser extent than most bugs"
msgstr ""

#: C/bugs.xml:276(para)
msgid ""
"<emphasis role=\"bold\">Mediam:</emphasis> a functionality bug of the "
"standard variety. Most bugs are of \"Medium\" severity."
msgstr ""

#: C/bugs.xml:280(para)
msgid ""
"<emphasis role=\"bold\">High:</emphasis> a bug that has a severe impact on a "
"small portion of Ubuntu users (estimated) or has a moderate impact on a "
"large portion of Ubuntu users (estimated)"
msgstr ""

#: C/bugs.xml:285(para)
msgid ""
"<emphasis role=\"bold\">Critical:</emphasis> a bug which has a severe impact "
"on a large portion of Ubuntu users"
msgstr ""
"<emphasis role=\"bold\">Critical:</emphasis> 버그가 우분투 사용자의 큰 부분에 심각한 영향을 가지고 "
"있을 때 사용 합니다."

#: C/bookinfo.xml:18(title)
msgid "Credits and License"
msgstr "명예와 저작권"

#: C/bookinfo.xml:19(para)
msgid ""
"The following Ubuntu Documentation Team authors maintain this document:"
msgstr "다음의 우분투 문서화 팀 작성자가 이 문서를 유지관리 합니다:"

#: C/bookinfo.xml:23(para)
msgid "Jordan Mantha"
msgstr "Jordan Mantha"

#: C/bookinfo.xml:26(para)
msgid "The Ubuntu Packaging Guide is also based on the contributions of:"
msgstr "우분투 패키징 안내서는 또한 이 분들의 공헌에 기반 합니다:"

#: C/bookinfo.xml:29(para)
msgid "Alexandre Vassalotti"
msgstr "Alexandre Vassalotti"

#: C/bookinfo.xml:32(para)
msgid "Jonathan Patrick Davies"
msgstr "Jonathan Patrick Davies"

#: C/bookinfo.xml:35(para)
msgid "Ankur Kotwal"
msgstr "Ankur Kotwal"

#: C/bookinfo.xml:38(para)
msgid "Rapha&euml;l Pinson"
msgstr "Rapha&euml;l Pinson"

#: C/bookinfo.xml:41(para)
msgid "Daniel Chen"
msgstr "Daniel Chen"

#: C/bookinfo.xml:44(para)
msgid "Martin Pitt"
msgstr ""

#: C/bookinfo.xml:48(para)
msgid ""
"Portions of the Ubuntu Packaging Guide are derived from the Debian New "
"Maintainer's Guide and the Debian Policy Manual."
msgstr ""

#: C/bookinfo.xml:51(para)
msgid ""
"This document is made available under the GNU General Public License (GPL)."
msgstr "이 문서는 GNU 일반 공개 저작권 (GPL) 하에 사용하도록 만들어 졌습니다."

#: C/bookinfo.xml:52(para)
msgid ""
"You are free to modify, extend, and improve the Ubuntu documentation source "
"code under the terms of this license. All derivative works must be released "
"under this license."
msgstr ""
"여러분의 이 라이센스 하에 우분투 문서의 소스 코드를 변경, 확장 그리고 개선하는데 자유롭습니다. 모든 파생된 작업은 반드시 이 라이센스 "
"하에 발표되어야 합니다."

#: C/bookinfo.xml:54(para)
msgid ""
"This documentation is distributed in the hope that it will be useful, but "
"WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY "
"or FITNESS FOR A PARTICULAR PURPOSE AS DESCRIBED IN THE DISCLAIMER."
msgstr ""
"이 문서는 유용하게 사용될 것이라는 희망으로 배포 합니다만, 어떠한 품질 보증; 즉 매매의 암묵적인 보장 또는 경고문에 기술된 특정 "
"목적을 위한 적합 같은 보증이 없습니다."

#: C/bookinfo.xml:57(para)
msgid ""
"Copies of the license are available in the appendices section of this book "
"and online at &gpl-url;."
msgstr ""

#: C/bookinfo.xml:65(para)
msgid ""
"The Ubuntu Packaging Guide is an introduction to packaging programs for "
"Ubuntu and other Debian based distributions"
msgstr "우분투 패키징 안내서는 우분투와 여타 데비안 기반 배포판을 위한 프로그램을 패키징하는 소개 입니다."

#: C/basic.xml:15(title)
msgid "Basic Packaging"
msgstr "패키징 기초"

#: C/basic.xml:17(para)
msgid ""
"Two of the problems that many novice packagers face are that there are "
"multiple ways of packaging, and there is more than one tool to do the job. "
"We will go through three examples with the common build systems. First, we "
"will use no build helper. This approach is usually the most difficult and is "
"not often used in practice but gives the most straightforward look at the "
"packaging process. Second, we will use <application>debhelper</application>, "
"the most common build system in Debian. It helps the packager by automating "
"repetitive tasks. Third, we will briefly cover the <emphasis "
"role=\"bold\">C</emphasis>ommon <emphasis role=\"bold\">D</emphasis>ebian "
"<emphasis role=\"bold\">B</emphasis>uild <emphasis "
"role=\"bold\">S</emphasis>ystem (<application>CDBS</application>), a more "
"streamlined build system that uses <application>debhelper</application>."
msgstr ""
"많은 초보 패키지 관리자가 직면하는 두 가지 문제는 패키징을 하는 여러가지 방법이 있다는 것과 그 일을 하기 위한 하나의 도구보다 많은 "
"것은 있다는 것 입니다. 우리는 일반 빌드 시스템을 가지고 세 가지 예제를 읽어보게 됩니다. 첫 번째, 우리는 아무 빌드 도움 프로그램도 "
"사용하지 않습니다. 이 접근 방법은 보통 가장 어렵고 실제에 자주 사용하지 않지만 패키징 과정을 들여보는데 가장 단순한 것을 줍니다. 두 "
"번째, 우리는 데비안에서 가장 일반적인 빌드 시스템인 <application>debhelper</application> 를 사용할 것 "
"입니다. 이것은 반복적인 작업을 자동화 함으로서 패키지 관리자를 돕습니다. 세 번째, 우리는 간략하게, "
"<application>debhelper</application> 를 사용하는 것보다 좀 더 간소화 된 <emphasis "
"role=\"bold\">C</emphasis>ommon <emphasis role=\"bold\">D</emphasis>ebian "
"<emphasis role=\"bold\">B</emphasis>uild <emphasis "
"role=\"bold\">S</emphasis>ystem (<application>CDBS</application>) 에 대해 알아볼 것 "
"입니다."

#: C/basic.xml:33(para)
msgid ""
"Package development often requires installing many packages (especially "
"<application>-dev</application> packages containing headers and other common "
"development files) that are not part of a normal desktop &ubuntu; "
"installation. If you want to avoid installing extra packages or would like "
"to develop for a different &ubuntu; release (the development one, for "
"instance) from what you currently have, the use of a chroot environment is "
"highly recommended. A guide to setting up a <xref linkend=\"appendix-"
"chroot\"/> can be found in the Appendix."
msgstr ""

#: C/basic.xml:46(title)
msgid "Packaging From Scratch"
msgstr "도구없이 패키징 하기"

#: C/basic.xml:48(para)
msgid ""
"<emphasis role=\"bold\">Requirements:</emphasis> build-essential, automake, "
"gnupg, lintian, fakeroot and <xref linkend=\"gs-pbuilder\"/>."
msgstr ""
"<emphasis role=\"bold\">요구사항:</emphasis> build-essential, automake, gnupg, "
"lintian, fakeroot 그리고 <xref linkend=\"gs-pbuilder\"/>."

#: C/basic.xml:52(para)
msgid ""
"In this example we will be using the GNU <application><ulink "
"url=\"http://www."
"gnu.org/software/hello/hello.html\">hello</ulink></application> program as "
"our example. You can download the source tarball from <ulink "
"url=\"http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz\">ftp.gnu.org</ulink>. "
"For the purposes of this example, we will be using the "
"<filename>~/hello/</filename> directory."
msgstr ""
"이 예제에서 우리는 GNU <application><ulink "
"url=\"http://www.gnu.org/software/hello/hel"
"lo.html\">hello</ulink></application> 프로그램을 예로 사용할 것 입니다. 여러분은 소스 tarball을 "
"<ulink url=\"http://ftp.gnu.org/gnu/hello/hello-"
"2.1.1.tar.gz\">ftp.gnu.org</ulink> 에서 내려 받을 수 있습니다. 이 예제의 용도를 위해, 우리는 "
"<filename>~/hello/</filename> 디렉토리를 사용할 것 입니다."

#: C/basic.xml:59(screen)
#, no-wrap
msgid ""
"\n"
"mkdir ~/hello\n"
"cd ~/hello\n"
"wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz"
msgstr ""
"\n"
"mkdir ~/hello\n"
"cd ~/hello\n"
"wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz"

#: C/basic.xml:64(para)
msgid ""
"We will also compare our package to one that is already packaged in the "
"&ubuntu; repository. For now, we will place it in the "
"<filename>ubuntu</filename> directory so we can look at it later. To get the "
"source package, make sure you have a \"deb-src\" line in your "
"<filename>/etc/apt/sources.list</filename> file for the Main repository. "
"Then, simply execute:"
msgstr ""

#: C/basic.xml:72(screen)
#, no-wrap
msgid ""
"\n"
"mkdir ubuntu\n"
"cd ubuntu\n"
"apt-get source hello\n"
"cd .."
msgstr ""
"\n"
"mkdir ubuntu\n"
"cd ubuntu\n"
"apt-get source hello\n"
"cd .."

#: C/basic.xml:78(para)
msgid ""
"Unlike most <application>apt-get</application> commands, you do not need to "
"have root privileges to get the source package, because it is downloaded to "
"the current directory. In fact, it is recommended that you "
"<emphasis>only</emphasis> use <application>apt-get source</application> as a "
"regular user, because then you can edit files in the source package without "
"needing root privileges."
msgstr ""
"대부분의 <application>apt-get</application> 명령과는 다르게, 소스 패키지는 현재 디렉토리로 내려 받아지기 "
"때문에, 여러분은 소스 패키지를 가지기 위해 루트 권한을 가질 필요가 없습니다. 실제로, 여러분은 "
"<emphasis>오직</emphasis> 일반 사용자로써 <application>apt-get source</application> 를 "
"사용하는 것이 권장 됩니다, 왜냐면 루트의 권한이 필요한 것 없이 소스 패키지 내의 파일을 편집할 수 있어야 하기 때문 입니다."

#: C/basic.xml:85(para)
msgid "What the <application>apt-get source</application> command does is:"
msgstr "<application>apt-get source</application> 명령이 하는 것은 다음 입니다:"

#: C/basic.xml:89(para)
msgid ""
"Download the source package. A source package commonly contains a .dsc file "
"describing the package and giving md5sums for the source package, an "
".orig.tar.gz file containing the source code from the author(s), and a "
".diff.gz file containing patches applied against the source code with the "
"packaging information."
msgstr ""
"소스 패키지를 내려 받습니다. 소스 패키지는 보통 그 패키지를 기술하고 소스 패키지의 md5sum을 주는 .dsc 파일과, 저작자의 소스 "
"코드를 가지는 .orig.tar.gz 파일, 그리고 패키징 정보와 함께 소스 코드에 적용된 패치를 가지는 .diff.gz 파일을 포함하고 "
"있습니다."

#: C/basic.xml:95(para)
msgid "Untar the .orig.tar.gz file into the current directory."
msgstr "현재 디렉토리로 .orig.tar.gz 파일을 untar 합니다."

#: C/basic.xml:98(para)
msgid "Apply the gunzipped .diff.gz to the unpacked source directory."
msgstr "gnuzipped .diff.gz 파일은 압축 풀려진 소스 디렉토리에 적용 합니다."

#: C/basic.xml:103(para)
msgid ""
"If you manually download the source package (.dsc, .orig.tar.gz, and "
".diff.gz files), you can unpack them in the same way <application>apt-get "
"source</application> does by using <application>dpkg-source</application> as "
"follows:"
msgstr ""
"만약 여러분이 소스 패키지를 (.dsc, .orig.tar.gz, and .diff.gz files) 수동으로 내려 받았다면, 다음과 "
"같이 <application>dpkg-source</application> 를 사용하여 <application>apt-get "
"source</application> 가 하는 같은 방법으로 패키지를 압축 풀 수 있습니다:"

#: C/basic.xml:107(screen)
#, no-wrap
msgid "dpkg-source -x *.dsc"
msgstr "dpkg-source -x *.dsc"

#: C/basic.xml:109(para)
msgid ""
"The first thing you will need to do is make a copy of the original "
"(sometimes called \"upstream\") tarball in the following format: "
"<filename>&lt;packagename&gt;_&lt;version&gt;.orig.tar.gz</filename>. This "
"step does two things. First, it creates two copies of the source code. If "
"you accidentally change or delete the working copy you can use the one you "
"downloaded. Second, it is considered poor packaging practice to change the "
"original source tarball unless absolutely necessary. See <xref "
"linkend=\"basic-mistakes\"/> for reasons."
msgstr ""
"여러분이 해야할 첫 번째 일은 다음의 형식으로 원래 (때로는 \"업스트림\"으로 불리는) tarball의 복사본을 만드는 것 입니다: "
"<filename>&lt;packagename&gt;_&lt;version&gt;.orig.tar.gz</filename> 이 단계는 두 "
"가지 일을 합니다. 첫 번째, 이것은 소스 코드 두 본을 만듭니다. 만약 작업하는 복사본을 실수로 변경하거나 삭제하였다면, 여러분은 "
"내려받은 것을 사용할 수 있습니다. 두 번째, 이것은 절대적으로 필요하지 않는 한 원래의 소스 tarball을 변경하는 것은 좋지 않은 "
"패키징 작업으로 여겨 집니다. 사유는 <xref linkend=\"basic-mistakes\"/> 를 보십시오."

#: C/basic.xml:120(screen)
#, no-wrap
msgid ""
"\n"
"cp hello-2.1.1.tar.gz hello_2.1.1.orig.tar.gz\n"
"tar -xzvf hello_2.1.1.orig.tar.gz"
msgstr ""
"\n"
"cp hello-2.1.1.tar.gz hello_2.1.1.orig.tar.gz\n"
"tar -xzvf hello_2.1.1.orig.tar.gz"

#: C/basic.xml:124(para)
msgid ""
"The underscore, \"_\", between the package name (hello) and the version "
"(2.1.1), as opposed to a hyphen, \"-\", is very important. Your source "
"package will incorrectly be built as a Debian native package."
msgstr ""
"패키지 이름(hello)와 버전(2.1.1) 사이에 있는 언더스코어 \"_\" 는 하이픈 \"-\"과 대조되고, 매우 중요 합니다. "
"하이픈 일때는 여러분의 소스 패키지는 데비안 패키지에 맞지 않게 잘못 만들어지게 됩니다."

#: C/basic.xml:129(para)
msgid ""
"We now have a <filename>hello-2.1.1</filename> directory containing the "
"source files. Now we need to create the customary "
"<application>debian</application> directory where all the packaging "
"information is stored, allowing us to separate the packaging files from the "
"application source files."
msgstr ""
"우리는 이제 소스 파일을 포함하는 <filename>hello-2.1.1</filename> 디렉토리를 가졌습니다. 이제 우리는 패키지 "
"정보를 저장하고, 프로그램 소스 파일에서 분리하여 패키징 파일을 허용하는 우리가 정의한 "
"<application>debian</application> 디렉토리를 만들 필요가 있습니다."

#: C/basic.xml:135(screen)
#, no-wrap
msgid ""
"\n"
"mkdir hello-2.1.1/debian\n"
"cd hello-2.1.1/debian/"
msgstr ""
"\n"
"mkdir hello-2.1.1/debian\n"
"cd hello-2.1.1/debian/"

#: C/basic.xml:139(para)
msgid ""
"We now need to create the essential files for any &ubuntu; source package: "
"<filename>changelog</filename>, <filename>control</filename>, "
"<filename>copyright</filename>, and <filename>rules</filename>. These are "
"the files needed to create the binary packages (.deb files) from the "
"original (upstream) source code. Let us look at each one in turn."
msgstr ""

#: C/basic.xml:147(title)
msgid "changelog"
msgstr "changelog"

#: C/basic.xml:149(para)
msgid ""
"The <filename>changelog</filename> file is, as its name implies, a listing "
"of the changes made in each version. It has a specific format that gives the "
"package name, version, distribution, changes, and who made the changes at a "
"given time. If you have a GPG key, make sure to use the same name and email "
"address in <filename>changelog</filename> as you have in your key. The "
"following is a template <filename>changelog</filename>:"
msgstr ""
"<filename>changelog</filename> 파일은, 그것의 이름이 뜻하는 대로, 각 버전에서 만들어진 변경들의 목록 입니다. "
"이것은 패키지 이름, 버전, 배포, 변경과 주어진 시간에 누가 변경을 하였는지의 특정 형식을 가지고 있습니다. 만약 여러분이 GPG 키를 "
"가지고 있다면, <filename>changelog</filename> 에 사용하는 이름과 이메일 주소는 여러분의 키에 있는 것과 같은 "
"것을 사용하는 것을 확신 하십시오. 다음은 <filename>changelog</filename> 의 양식 입니다:"

#: C/basic.xml:157(screen)
#, no-wrap
msgid ""
"\n"
"package (version) distribution; urgency=urgency\n"
"\n"
"  * change details\n"
"    more change details\n"
"  * even more change details\n"
"\n"
"-- maintainer name &lt;email address&gt;[two spaces]  date"
msgstr ""
"\n"
"package (version) distribution; urgency=urgency\n"
"\n"
"  * change details\n"
"    more change details\n"
"  * even more change details\n"
"\n"
"-- maintainer name &lt;email address&gt;[two spaces] date"

#: C/basic.xml:166(para)
msgid ""
"The format (especially of the date) is important. The date should be in "
"RFC822 format, which can be obtained from the <application>822-"
"date</application> program."
msgstr ""
"이 형식은 (특히 날짜 형식) 중요 합니다. 날짜는 반드시 RFC822 형식이어야 하고, 그것은 <application>822-"
"date</application> 에서 얻을 수 있습니다."

#: C/basic.xml:170(para)
msgid ""
"Here is a sample <filename>changelog</filename> file for "
"<application>hello</application>:"
msgstr ""
"여기에 <application>hello</application> 프로그램을 위한 예제 "
"<filename>changelog</filename> 파일이 있습니다:"

#: C/basic.xml:173(screen)
#, no-wrap
msgid ""
"\n"
"hello (2.1.1-1) edgy; urgency=low\n"
"\n"
"   * New upstream release with lots of bug fixes.\n"
"\n"
"-- Captain Packager &lt;packager@coolness.com&gt;  Wed,  5 Apr 2006 22:38:49 "
"-0700"
msgstr ""

#: C/basic.xml:180(para)
msgid ""
"Notice that the version has a -1 appended to it, or what is called the "
"Debian revision, which is used so that the packaging can be updated (to fix "
"bugs for example) with new uploads within the same source release version."
msgstr ""
"버전에 -1 이 덧붙여졌음을, 그리고 이것은 데비안 개정 번호라 불리고, 같은 소스 릴리스 버전 내에서 (예를 들어 버그를 고치기 위해) "
"새 업로드로 패키지가 업데이트 될 때 사용을 하는 것을 주의 하십시오."

#: C/basic.xml:185(para)
msgid ""
"&ubuntu; and Debian have slightly different package versioning schemes to "
"avoid conflicting packages with the same source version. If a Debian package "
"has been changed in &ubuntu;, it has <emphasis>ubuntuX</emphasis> (where "
"<emphasis>X</emphasis> is the &ubuntu; revision number) appended to the end "
"of the Debian version. So if the Debian <application>hello</application> "
"package was changed by &ubuntu;, the version string would be <filename>2.1.1-"
"1ubuntu1</filename>. If a package for the application does not exist in "
"Debian, then the Debian revision is <emphasis>0</emphasis> "
"(<emphasis>e.g.</emphasis>, <filename>2.1.1-0ubuntu1</filename>)."
msgstr ""

#: C/basic.xml:199(para)
msgid ""
"Now look at the <filename>changelog</filename> for the &ubuntu; source "
"package that we downloaded earlier:"
msgstr ""

#: C/basic.xml:202(screen)
#, no-wrap
msgid ""
"\n"
"less ../../ubuntu/hello-2.1.1/debian/changelog"
msgstr ""
"\n"
"less ../../ubuntu/hello-2.1.1/debian/changelog"

#: C/basic.xml:205(para)
msgid ""
"Notice that in this case the <emphasis>distribution</emphasis> is "
"<emphasis>unstable</emphasis> (a Debian branch), because the Debian package "
"has not been changed by &ubuntu;. Remember to set the "
"<emphasis>distribution</emphasis> to your target distribution release."
msgstr ""

#: C/basic.xml:211(para)
msgid ""
"At this point create a <filename>changelog</filename> file in the "
"<filename>debian</filename> directory where you should still be."
msgstr ""
"이제 <filename>changelog</filename> 파일을 여러분이 아직 있어야 할 "
"<filename>debian</filename> 디렉토리에 만듭니다."

#: C/basic.xml:218(title)
msgid "control"
msgstr "control"

#: C/basic.xml:219(para)
msgid ""
"The control file contains the information that the package manager (such as "
"<application>apt-get</application>, <application>synaptic</application>, and "
"<application>aptitude</application>) uses, build-time dependencies, "
"maintainer information, and much more."
msgstr ""
"control 파일은 패키지 관리 프로그램이 (<application>apt-get</application>, "
"<application>synaptic</application>, 그리고 <application>aptitude</application> "
"와 같은) 사용할 정보, 빌드-타임 의존, 패키지 관리자 정보 그리고 훨씬 많은 것들을 가지고 있습니다."

#: C/basic.xml:224(para)
msgid ""
"For the &ubuntu; <application>hello</application> package, the control file "
"looks something like:"
msgstr ""

#: C/basic.xml:226(screen)
#, no-wrap
msgid ""
"Source: hello\n"
"Section: devel\n"
"Priority: optional\n"
"Maintainer: Captain Packager &lt;packager@coolness.com&gt; \n"
"Standards-Version: 3.6.1\n"
"\n"
"Package: hello\n"
"Architecture: any\n"
"Depends: ${shlibs:Depends}\n"
"Description: The classic greeting, and a good example\n"
" The GNU hello program produces a familiar, friendly greeting.  It\n"
" allows non-programmers to use a classic computer science tool which\n"
" would otherwise be unavailable to them.\n"
" .\n"
" Seriously, though: this is an example of how to do a Debian\n"
" package.\n"
" It is the Debian version of the GNU Project's `hello world' program\n"
" (which is itself an example for the GNU Project)."
msgstr ""
"Source: hello\n"
"Section: devel\n"
"Priority: optional\n"
"Maintainer: Captain Packager &lt;packager@coolness.com&gt; \n"
"Standards-Version: 3.6.1\n"
"\n"
"Package: hello\n"
"Architecture: any\n"
"Depends: ${shlibs:Depends}\n"
"Description: The classic greeting, and a good example\n"
" The GNU hello program produces a familiar, friendly greeting. It\n"
" allows non-programmers to use a classic computer science tool which\n"
" would otherwise be unavailable to them.\n"
" .\n"
" Seriously, though: this is an example of how to do a Debian\n"
" package.\n"
" It is the Debian version of the GNU Project's `hello world' program\n"
" (which is itself an example for the GNU Project)."

#: C/basic.xml:245(para)
msgid ""
"Create <filename>control</filename> using the information above (making sure "
"to provide your information for the <emphasis>Maintainer</emphasis> field)."
msgstr ""
"위의 정보를 사용하여 <filename>control</filename> 파일을 만듭니다. "
"(<emphasis>Maintainer</emphasis> 필드에 여러분의 정보를 제공하는 것은 확신 하십시오.)"

#: C/basic.xml:249(para)
msgid ""
"The first paragraph gives information about the source package. Let us go "
"through each line:"
msgstr "첫번째 문단은 소스 패키지에 대한 정보를 줍니다. 각각의 줄을 읽어보도록 하죠:"

#: C/basic.xml:253(para)
msgid ""
"<emphasis role=\"bold\">Source:</emphasis> This is the name of the source "
"package, in this case, <emphasis>hello</emphasis>."
msgstr ""
"<emphasis role=\"bold\">Source:</emphasis> 이것은 소스 패키지의 이름이고, 이 경우에는,  "
"<emphasis>hello</emphasis> 입니다."

#: C/basic.xml:257(para)
msgid ""
"<emphasis role=\"bold\">Section:</emphasis> The apt repositories are split "
"up into sections for ease of browsing and categorization of software. In "
"this case, <application>hello</application> belongs in the "
"<emphasis>devel</emphasis> section."
msgstr ""
"<emphasis role=\"bold\">Section:</emphasis> apt 저장소는 열람하기 쉽고 소프트웨어의 분류를 위하여 "
"영역으로 나누어 집니다. 이 경우에는, <application>hello</application> 는 "
"<emphasis>devel</emphasis> 영역에 속합니다."

#: C/basic.xml:263(para)
msgid ""
"<emphasis role=\"bold\">Priority:</emphasis> This sets the importance of the "
"package to users. It should be one of the following:"
msgstr ""
"<emphasis role=\"bold\">Priority:</emphasis> 이것은 사용자에게 패키지의 중요도를 지정 합니다. 이것은 "
"반드시 다음 중의 하나이어야만 합니다:"

#: C/basic.xml:269(para)
msgid ""
"<emphasis role=\"bold\">Required</emphasis> - packages that are essential "
"for the system to work properly. If they are removed it is highly likely "
"that your system will break in an unrecoverable way."
msgstr ""
"<emphasis role=\"bold\">Required</emphasis> - 패키지가 시스템이 적절히 동작하기 위해 필수적일 때 "
"입니다. 만약 이 패키지가 삭제되면, 여러분의 시스템은 회복할 수 없게 고장이 나는 것이기가 아주 쉽습니다."

#: C/basic.xml:275(para)
msgid ""
"<emphasis role=\"bold\">Important</emphasis> - minimal set of packages for a "
"usable system. Removing these packages will not produce an unrecoverable "
"breakage of your system, but they are generally considered important tools "
"without which any Linux installation would be incomplete. Note: This does "
"not include things like Emacs or even the X Window System."
msgstr ""
"<emphasis role=\"bold\">Important</emphasis> - 시스템 사용을 위한 최소한의 패키지의 집합에 속할 때 "
"입니다. 이 패키지를 삭제하는 것은 여러분의 시스템이 회복 불능한 고장을 만들지는 않지만, 일반적으로 어떤 리눅스 설치도 이것이 없으면 "
"불완전하다고 여겨지는 중요한 도구 입니다. 주의: 이것은 Emacs 또는 심지어 X 윈도우 시스템 같은 것을 포함하지 않습니다."

#: C/basic.xml:283(para)
msgid ""
"<emphasis role=\"bold\">Standard</emphasis> - Somewhat self explanatory."
msgstr "<emphasis role=\"bold\">Standard</emphasis> - 약간은 스스로 설명하고 있죠."

#: C/basic.xml:286(para)
msgid ""
"<emphasis role=\"bold\">Optional</emphasis> - in essence this category is "
"for non-required packages, or the bulk of packages. However, these packages "
"should not conflict with each other."
msgstr ""
"<emphasis role=\"bold\">Optional</emphasis> - 실제로 이 분류는 요구되지 않는 패키지를 위하거나 "
"대부분의 패키지들을 위해서 입니다. 그러나, 이 패키지들은 각기 다른 패키지들과 충돌이 없어야만 합니다."

#: C/basic.xml:291(para)
msgid ""
"<emphasis role=\"bold\">Extra</emphasis> - packages that may conflict with "
"packages in one of the above categories. Also used for specialized packages "
"that would only be useful to people who already know the purpose of the "
"package."
msgstr ""
"<emphasis role=\"bold\">Extra</emphasis> - 이 곳의 패키지는 위의 분류 중 하나에 있는 패키지와 충돌이 "
"있을 수도 있습니다. 또한 이미 패키지의 목적을 알고 있는 사람들에게만 유용한 특정한 패키지를 위하여 사용 됩니다."

#: C/basic.xml:300(para)
msgid ""
"<emphasis role=\"bold\">Maintainer:</emphasis> The package maintainer with "
"email address."
msgstr ""
"<emphasis role=\"bold\">Extra</emphasis> 이메일 주소와 함께 패키지 관리자 이름을 적습니다."

#: C/basic.xml:303(para)
msgid ""
"<emphasis role=\"bold\">Standards-Version:</emphasis> The version of the "
"<ulink url=\"http://www.debian.org/doc/debian-policy/\">Debian "
"Policy</ulink> to which the package adheres (in this case, version 3.6.1). "
"An easy way to find the current version is <emphasis>apt-cache show debian-"
"policy | grep Version</emphasis>."
msgstr ""
"<emphasis role=\"bold\">Standards-Version:</emphasis> 패키지에 부착하는 <ulink "
"url=\"http://www.debian.org/doc/debian-policy/\">Debian Policy</ulink> 의 버전 "
"입니다. (이 경우는, 3.6.1 버전 입니다.)  현재 버전을 찾는 쉬운 방법은 <emphasis>apt-cache show "
"debian-policy | grep Version</emphasis> 입니다."

#: C/basic.xml:311(para)
msgid ""
"<emphasis role=\"bold\">Build-Depends:</emphasis> One of the most important "
"fields and often the source of bugs, this line lists the binary packages "
"(with versions if necessary) that need to be installed in order to create "
"the binary package(s) from the source package. Packages that are essential "
"are required by <emphasis>build-essential</emphasis> and do not need to be "
"included in the Build-Depends line. In the case of "
"<application>hello</application>, all the needed packages are a part of "
"build-essential, so a Build-Depends line is not needed. The list of build-"
"essential packages can be found at <filename>/usr/share/doc/build-"
"essential/list</filename>."
msgstr ""
"<emphasis role=\"bold\">Build-Depends:</emphasis> 가장 중요한 필드의 하나이고 종종 버그의 원천이 "
"됩니다. 이 줄은 소스 패키지로 부터 바이너리 패키지를 만들기 위해 설치가 필요한 바이너리 패키지의 (필요하다면 버전과 함께) 목록 "
"입니다. <emphasis>build-essential</emphasis> 에 의해 요구되는 필수적인 패키지는 Build-Depends "
"줄에 포함될 필요가 없습니다. <application>hello</application> 프로그램의 경우는, 모든 필요한 패키지가 "
"build-essential 의 부분 이므로 Build-Depends 줄은 필요가 없습니다. build-essential 패키지의 목록은 "
"<filename>/usr/share/doc/build-essential/list</filename> 에서 찾을 수 있습니다."

#: C/basic.xml:327(para)
msgid ""
"The second paragraph is for the binary package that will be built from the "
"source. If multiple binary packages are built from the source package, there "
"should be one section for <emphasis>each</emphasis> one. Again, let us go "
"through each line:"
msgstr ""
"두번째 문단은 소스로 부터 만들어질 바이너리 패키지를 위해서 입니다. 만약 소스 패키지로 부터 다수의 바이너리 패키지가 만들어지면, "
"<emphasis>각각의</emphasis> 것을 위한 영역이 반드시 있어야 합니다. 다시, 각각의 줄을 읽어 보겠습니다:"

#: C/basic.xml:334(para)
msgid ""
"<emphasis role=\"bold\">Package:</emphasis> The name for the binary package. "
"Many times for simple programs (such as <application>hello</application>), "
"the source and binary packages' names are identical."
msgstr ""
"<emphasis role=\"bold\">Package:</emphasis> 바이너리 패키지의 이름 입니다. 많은 경우의 단순한 "
"프로그램은 (<application>hello</application> 과 같은), 소스와 바이너리 패키지의 이름이 동일 합니다."

#: C/basic.xml:339(para)
msgid ""
"<emphasis role=\"bold\">Architecture:</emphasis> The architectures for which "
"the binary package(s) will be built. Examples are:"
msgstr ""
"<emphasis role=\"bold\">Architecture:</emphasis> 바이너리 패키지가 만들어질 아키덱쳐 입니다. 예들 "
"들어:"

#: C/basic.xml:345(para)
msgid ""
"<emphasis role=\"bold\">all</emphasis> - The source is "
"<emphasis>not</emphasis> architecture-dependent. Programs that use Python or "
"other interpreted languages would use this. The resulting binary package "
"would end with <filename>_all.deb</filename>."
msgstr ""
"<emphasis role=\"bold\">all</emphasis> - 소스가 아키텍쳐-의존이 "
"<emphasis>아닌</emphasis> 경우 입니다. 파이썬과 다른 인터프리터 언어를 사용하는 프로그램들이 이 아키텍쳐 값을 사용 "
"합니다. 결과의 바이너리 패키지는 <filename>_all.deb</filename> 로 끝나게 됩니다."

#: C/basic.xml:351(para)
msgid ""
"<emphasis role=\"bold\">any</emphasis> - The source <emphasis>is</emphasis> "
"architecture-dependent and should compile on all the supported "
"architectures. There will be a .deb file for each architecture ( "
"<filename>_i386.deb</filename> for instance)"
msgstr ""
"<emphasis role=\"bold\">any</emphasis> - 소스가 아키텍쳐-의존 "
"<emphasis>이고</emphasis>, 모든 지원되는 아키텍쳐에서 컴파일이 되어야 합니다. 각각의 아키텍쳐를 위한 .deb 파일이 "
"있게 됩니다. (예를 들어 <filename>_i386.deb</filename>)"

#: C/basic.xml:358(para)
msgid ""
"A subset of architectures (i386, amd64, ppc, etc.) can be listed to indicate "
"that the source is architecture-dependent and does not work for all "
"architectures supported by &ubuntu;."
msgstr ""

#: C/basic.xml:365(para)
msgid ""
"<emphasis role=\"bold\">Depends:</emphasis> The list of packages that the "
"binary package depends on for functionality. For "
"<application>hello</application>, we see "
"<filename>${shlibs:Depends}</filename>, which is a variable that substitutes "
"in the needed shared libraries. See the <filename>dpkg-source</filename> man "
"page for more information."
msgstr ""
"<emphasis role=\"bold\">Depends:</emphasis> 기능성을 위하여 바이너리 패키지가 의존하는 패키지의 목록 "
"입니다. <application>hello</application> 을 위해, 우리는 "
"<filename>${shlibs:Depends}</filename> 를 보게 되고, 이것은 필요한 공유 라이브러리로 대체하게 되는 변수 "
"입니다. 더 많은 정보는 <filename>dpkg-source</filename> man 페이지를 보십시오."

#: C/basic.xml:373(para)
msgid ""
"<emphasis role=\"bold\">Recommends:</emphasis> Used for packages that are "
"highly recommended and usually are installed with the package. Some package "
"managers, most notably <application>aptitude</application>, automatically "
"install Recommended packages."
msgstr ""
"<emphasis role=\"bold\">Recommends:</emphasis> 강력히 권장하는 패키지에 사용되고 보통은 그 패키지와 "
"함께 설치가 됩니다. 몇 몇의 패키지 관리자 프로그램은, 잘 알려진 것으로  "
"<application>aptitude</application> 는, 권장 패키지를 자동으로 설치 합니다."

#: C/basic.xml:379(para)
msgid ""
"<emphasis role=\"bold\">Suggests:</emphasis> Used for packages that are "
"similar or useful when this package is installed."
msgstr ""
"<emphasis role=\"bold\">Suggests:</emphasis> 이 패키지가 설치될 때 비슷한 또는 유용한 패키지를 "
"위하여 사용 됩니다."

#: C/basic.xml:383(para)
msgid ""
"<emphasis role=\"bold\">Conflicts:</emphasis> Used for packages that will "
"conflict with this package. Both cannot be installed at the same time. If "
"one is being installed, the other will be removed."
msgstr ""
"<emphasis role=\"bold\">Conflicts:</emphasis> 이 패키지와 충돌이 일어나는 패키지를 위하여 사용 "
"됩니다. 동시에 양쪽 모두를 설치할 수 없습니다. 하나가 설치되면, 다른 하나는 삭제 됩니다."

#: C/basic.xml:388(para)
msgid ""
"<emphasis role=\"bold\">Description:</emphasis> Both short and long "
"descriptions are used by package managers. The format is:"
msgstr ""
"<emphasis role=\"bold\">Description:</emphasis> 패키지 관리자에 의해 짧은 그리고 긴 설명 모두를 "
"적는 항목으로 사용 됩니다. 형식은 다음과 같습니다:"

#: C/basic.xml:392(screen)
#, no-wrap
msgid ""
"Description: &lt;single line synopsis&gt;\n"
" &lt;extended description over several lines&gt;"
msgstr ""
"Description: &lt;한 줄의 개요&gt;\n"
" &lt;몇 줄에 걸친 확장된 설명&gt;"

#: C/basic.xml:395(para)
msgid ""
"Note that there is one space at the beginning of each line in the long "
"description. More information on how to make a good description can be found "
"at <ulink "
"url=\"http://people.debian.org/~walters/descriptions.html\">http://p"
"eople.debian.org/~walters/descriptions.html</ulink>."
msgstr ""
"긴 설명 란의 각각의 줄의 시작에 하나의 공백이 있음을 주의 하십시오. 어떻게 좋은 설명을 만드는지에 대한 더 많은 설명은 <ulink "
"ur"
"l=\"http://people.debian.org/~walters/descriptions.html\">http://people.debi"
"an.org/~walters/descriptions.html</ulink> 에서 찾을 수 있습니다."

#: C/basic.xml:406(title)
msgid "copyright"
msgstr "copyright"

#: C/basic.xml:408(para)
msgid ""
"This file gives the copyright information. Generally, copyright information "
"is found in the <filename>COPYING</filename> file in the program's source "
"directory. This file should include such information as the names of the "
"author and the packager, the URL from which the source came, a Copyright "
"line with the year and copyright holder, and the text of the copyright "
"itself. An example template would be:"
msgstr ""
"이 파일은 저작권 정보를 줍니다. 일반적으로, 저작권 정보는 프로그램의 소스 디렉토리에 있는 "
"<filename>COPYING</filename> 파일에서 찾아 봅니다. 이 파일은 저작자와 패키지 관리자의 이름과 같은 정보, 어디서 "
"소스가 왔는지를 알리는 URL, 연도와 저작권 소유자를 알리는 저작권 줄, 그리고 저작권 자체의 텍스트를 포함하여야만 합니다. 예제 "
"양식은 다음과 같습니다:"

#: C/basic.xml:415(screen)
#, no-wrap
msgid ""
"This package was debianized by {Your Name} &lt;your email address&gt;\n"
"{Date}\n"
"\n"
"It was downloaded from: {URL of webpage} \n"
"\n"
"Upstream Author(s): {Name(s) and email address(es) of author(s)}\n"
"\n"
"Copyright:\n"
"\tCopyright (C) {Year(s)} by {Author(s)} {Email address(es)}\n"
"\n"
"License:\n"
"\n"
msgstr ""
"This package was debianized by {Your Name} &lt;your email address&gt;\n"
"{Date}\n"
"\n"
"It was downloaded from: {URL of webpage} \n"
"\n"
"Upstream Author(s): {Name(s) and email address(es) of author(s)}\n"
"\n"
"Copyright:\n"
"\tCopyright (C) {Year(s)} by {Author(s)} {Email address(es)}\n"
"\n"
"License:\n"
"\n"

#: C/basic.xml:429(para)
msgid ""
"As one can imagine, <application>hello</application> is released under the "
"GPL license. In this case it is easiest to just copy the "
"<filename>copyright</filename> file from the &ubuntu; package:"
msgstr ""

#: C/basic.xml:434(screen)
#, no-wrap
msgid ""
"\n"
"cp ../../ubuntu/hello-2.1.1/debian/copyright ."
msgstr ""
"\n"
"cp ../../ubuntu/hello-2.1.1/debian/copyright ."

#: C/basic.xml:437(para)
msgid ""
"You must include the complete copyright unless it is is GPL, LGPL, BSD, or "
"Artistic License, in which case you can refer to the corresponding file in "
"the <filename>/usr/share/common-licenses/</filename> directory."
msgstr ""
"여러분은 저작권이 GPL, LGPL, BSD, 또는 Artistic License 아니면 완전한 저작권을 반드시 포함시켜야 합니다. 앞에 "
"언급된 저작권의 경우는 <filename>/usr/share/common-licenses/</filename> 디렉토리에 있는 대응하는 "
"파일을 참조할 수 있습니다."

#: C/basic.xml:441(para)
msgid ""
"Notice that the &ubuntu; package's <filename>copyright</filename> includes a "
"license statement for the manual. It is important that "
"<emphasis>all</emphasis> the files in the source be covered by a license "
"statement."
msgstr ""

#: C/basic.xml:449(title)
msgid "rules"
msgstr "rules"

#: C/basic.xml:451(para)
msgid ""
"The <filename>rules</filename> file is an executable Makefile that has rules "
"for building the binary package from the source packages. For "
"<application>hello</application>, it will be easier to use the "
"<filename>rules</filename> from the &ubuntu; package:"
msgstr ""

#: C/basic.xml:457(screen)
#, no-wrap
msgid ""
"#!/usr/bin/make -f\n"
"# Sample debian/rules file - for GNU Hello.\n"
"# Copyright 1994,1995 by Ian Jackson.\n"
"# I hereby give you perpetual unlimited permission to copy,\n"
"# modify and relicense this file, provided that you do not remove\n"
"# my name from the file itself.  (I assert my moral right of\n"
"# paternity under the Copyright, Designs and Patents Act 1988.)\n"
"# This file may have to be extensively modified\n"
"\n"
"package = hello\n"
"docdir = debian/tmp/usr/share/doc/$(package)\n"
"\n"
"CC = gcc\n"
"CFLAGS = -g -Wall\n"
"INSTALL_PROGRAM = install\n"
"\n"
"ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n"
"  CFLAGS += -O2\n"
"endif\n"
"ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))\n"
"  INSTALL_PROGRAM += -s\n"
"endif\n"
"\n"
"build:\n"
"        $(checkdir)\n"
"        ./configure --prefix=/usr\n"
"        $(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n"
"        touch build\n"
"\n"
"clean:\n"
"        $(checkdir)\n"
"        rm -f build\n"
"        -$(MAKE) -i distclean\n"
"        rm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars\n"
"\n"
"binary-indep:   checkroot build\n"
"        $(checkdir)\n"
"# There are no architecture-independent files to be uploaded\n"
"# generated by this package.  If there were any they would be\n"
"# made here.\n"
"\n"
"binary-arch:    checkroot build\n"
"        $(checkdir)\n"
"        rm -rf debian/tmp\n"
"        install -d debian/tmp/DEBIAN $(docdir)\n"
"        install -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN\n"
"        $(MAKE) INSTALL_PROGRAM=\"$(INSTALL_PROGRAM)\" \\\n"
"                prefix=$$(pwd)/debian/tmp/usr install\n"
"        cd debian/tmp &amp;&amp; mv usr/info usr/man usr/share\n"
"        cp -a NEWS debian/copyright $(docdir)\n"
"        cp -a debian/changelog $(docdir)/changelog.Debian\n"
"        cp -a ChangeLog $(docdir)/changelog\n"
"        cd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian\n"
"        gzip -r9 debian/tmp/usr/share/man\n"
"        gzip -9 debian/tmp/usr/share/info/*\n"
"        dpkg-shlibdeps debian/tmp/usr/bin/hello\n"
"        dpkg-gencontrol -isp\n"
"        chown -R root:root debian/tmp\n"
"        chmod -R u+w,go=rX debian/tmp\n"
"        dpkg --build debian/tmp ..\n"
"\n"
"define checkdir\n"
"        test -f src/$(package).c -a -f debian/rules\n"
"endef\n"
"\n"
"binary: binary-indep binary-arch\n"
"\n"
"checkroot:\n"
"        $(checkdir)\n"
"        test $$(id -u) = 0\n"
"\n"
".PHONY: binary binary-arch binary-indep clean checkroot\n"
msgstr ""
"#!/usr/bin/make -f\n"
"# Sample debian/rules file - for GNU Hello.\n"
"# Copyright 1994,1995 by Ian Jackson.\n"
"# I hereby give you perpetual unlimited permission to copy,\n"
"# modify and relicense this file, provided that you do not remove\n"
"# my name from the file itself. (I assert my moral right of\n"
"# paternity under the Copyright, Designs and Patents Act 1988.)\n"
"# This file may have to be extensively modified\n"
"\n"
"package = hello\n"
"docdir = debian/tmp/usr/share/doc/$(package)\n"
"\n"
"CC = gcc\n"
"CFLAGS = -g -Wall\n"
"INSTALL_PROGRAM = install\n"
"\n"
"ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n"
"  CFLAGS += -O2\n"
"endif\n"
"ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))\n"
"  INSTALL_PROGRAM += -s\n"
"endif\n"
"\n"
"build:\n"
"        $(checkdir)\n"
"        ./configure --prefix=/usr\n"
"        $(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n"
"        touch build\n"
"\n"
"clean:\n"
"        $(checkdir)\n"
"        rm -f build\n"
"        -$(MAKE) -i distclean\n"
"        rm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars\n"
"\n"
"binary-indep: checkroot build\n"
"        $(checkdir)\n"
"# There are no architecture-independent files to be uploaded\n"
"# generated by this package. If there were any they would be\n"
"# made here.\n"
"\n"
"binary-arch: checkroot build\n"
"        $(checkdir)\n"
"        rm -rf debian/tmp\n"
"        install -d debian/tmp/DEBIAN $(docdir)\n"
"        install -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN\n"
"        $(MAKE) INSTALL_PROGRAM=\"$(INSTALL_PROGRAM)\" \\\n"
"        prefix=$$(pwd)/debian/tmp/usr install\n"
"        cd debian/tmp &amp;&amp; mv usr/info usr/man usr/share\n"
"        cp -a NEWS debian/copyright $(docdir)\n"
"        cp -a debian/changelog $(docdir)/changelog.Debian\n"
"        cp -a ChangeLog $(docdir)/changelog\n"
"        cd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian\n"
"        gzip -r9 debian/tmp/usr/share/man\n"
"        gzip -9 debian/tmp/usr/share/info/*\n"
"        dpkg-shlibdeps debian/tmp/usr/bin/hello\n"
"        dpkg-gencontrol -isp\n"
"        chown -R root:root debian/tmp\n"
"        chmod -R u+w,go=rX debian/tmp\n"
"        dpkg --build debian/tmp ..\n"
"\n"
"define checkdir\n"
"        test -f src/$(package).c -a -f debian/rules\n"
"endef\n"
"\n"
"binary: binary-indep binary-arch\n"
"\n"
"checkroot:\n"
"        $(checkdir)\n"
"        test $$(id -u) = 0\n"
"\n"
".PHONY: binary binary-arch binary-indep clean checkroot\n"

#: C/basic.xml:531(para)
msgid ""
"Let us go through this file in some detail. One of the first parts you will "
"see is the declaration of some variables:"
msgstr "이 파일을 더 자세하게 읽어 보도록 합시다. 첫 번째 부분에 여러분이 보는 것은 몇 가지 변수에 대한 정의 입니다:"

#: C/basic.xml:533(screen)
#, no-wrap
msgid ""
"package = hello\n"
"docdir = debian/tmp/usr/share/doc/$(package)\n"
"\n"
"CC = gcc\n"
"CFLAGS = -g -Wall\n"
"INSTALL_PROGRAM = install\n"
"\n"
"ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n"
"  CFLAGS += -O2\n"
"endif\n"
"ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))\n"
"  INSTALL_PROGRAM += -s\n"
"endif\n"
msgstr ""
"package = hello\n"
"docdir = debian/tmp/usr/share/doc/$(package)\n"
"\n"
"CC = gcc\n"
"CFLAGS = -g -Wall\n"
"INSTALL_PROGRAM = install\n"
"\n"
"ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n"
"  CFLAGS += -O2\n"
"endif\n"
"ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))\n"
"  INSTALL_PROGRAM += -s\n"
"endif\n"

#: C/basic.xml:547(para)
msgid ""
"This section sets the CFLAGS for the compiler and also handles the "
"<filename>noopt</filename> and <filename>nostrip</filename> "
"DEB_BUILD_OPTIONS for debugging."
msgstr ""
"이 영역은 컴파일러를 위한 CFLAGS 를 지정하고 또한 디버깅을 위한 <filename>noopt</filename> 와 "
"<filename>nostrip</filename> DEB_BUILD_OPTIONS 을 관리 합니다."

#: C/basic.xml:551(para)
msgid "Next is the <filename>build</filename> rule:"
msgstr "다음은 <filename>build</filename> 규칙 입니다:"

#: C/basic.xml:552(screen)
#, no-wrap
msgid ""
"build:\n"
"\t$(checkdir)\n"
"\t./configure --prefix=/usr\n"
"\t$(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n"
"\ttouch build"
msgstr ""
"build:\n"
"\t$(checkdir)\n"
"\t./configure --prefix=/usr\n"
"\t$(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n"
"\ttouch build"

#: C/basic.xml:557(para)
msgid ""
"This rule runs <emphasis>./configure</emphasis> with the proper prefix, runs "
"<emphasis>make</emphasis>, and creates a <filename>build</filename> file "
"that is a timestamp of the build to prevent erroneous multiple compilations."
msgstr ""
"이 규칙은 적절한 접두 명칭과 함께 <emphasis>./configure</emphasis> 을 실행하고, "
"<emphasis>make</emphasis> 를 실행하며, 그리고 오류가 있을 수 있는 여러 번의 컴파일을 막기 위해 빌드의 시각을 "
"가지는 <filename>build</filename> 파일을 만듭니다."

#: C/basic.xml:560(para)
msgid ""
"The next rule is <filename>clean</filename>, which runs <emphasis>make -i "
"distclean</emphasis> and removes the files that are made during the package "
"building."
msgstr ""
"다음 규칙은 <filename>clean</filename> 입니다, 이것은 <emphasis>make -i "
"distclean</emphasis> 을 실행하고 패키지가 빌드되는 동안에 만들어진 파일들을 삭제 합니다."

#: C/basic.xml:563(screen)
#, no-wrap
msgid ""
"clean:\n"
"\t$(checkdir)\n"
"\trm -f build\n"
"\t-$(MAKE) -i distclean\n"
"\trm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars"
msgstr ""
"clean:\n"
"\t$(checkdir)\n"
"\trm -f build\n"
"\t-$(MAKE) -i distclean\n"
"\trm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars"

#: C/basic.xml:569(para)
msgid ""
"Next we see an empty <filename>binary-indep</filename> rule, because there "
"are no architecture-independent files created in this package."
msgstr ""
"다음으로 우리는 빈 <filename>binary-indep</filename> 규칙을 봅니다, 왜냐면 이 패키지에는 생성된 아키텍쳐-"
"독립 파일이 없기 때문 입니다."

#: C/basic.xml:572(para)
msgid ""
"There are, however, many architecture-dependent files, so <filename>binary-"
"arch</filename> is used:"
msgstr ""
"그러나, 많은 아키텍쳐-의존 파일이 있고, 그래서 <filename>binary-arch</filename> 이 사용 됩니다:"

#: C/basic.xml:575(screen)
#, no-wrap
msgid ""
"binary-arch:    checkroot build\n"
"\t\t$(checkdir)\n"
"\t\trm -rf debian/tmp\n"
"\t\tinstall -d debian/tmp/DEBIAN $(docdir)\n"
"\t\tinstall -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN\n"
"\t\t$(MAKE) INSTALL_PROGRAM=\"$(INSTALL_PROGRAM)\" \\\n"
"\t\tprefix=$$(pwd)/debian/tmp/usr install\n"
"\t\tcd debian/tmp &amp;&amp; mv usr/info usr/man usr/share\n"
"\t\tcp -a NEWS debian/copyright $(docdir)\n"
"\t\tcp -a debian/changelog $(docdir)/changelog.Debian\n"
"\t\tcp -a ChangeLog $(docdir)/changelog\n"
"\t\tcd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian\n"
"\t\tgzip -r9 debian/tmp/usr/share/man\n"
"\t\tgzip -9 debian/tmp/usr/share/info/*\n"
"\t\tdpkg-shlibdeps debian/tmp/usr/bin/hello\n"
"\t\tdpkg-gencontrol -isp\n"
"\t\tchown -R root:root debian/tmp\n"
"\t\tchmod -R u+w,go=rX debian/tmp\n"
"\t\tdpkg --build debian/tmp .."
msgstr ""
"binary-arch: checkroot build\n"
"\t\t$(checkdir)\n"
"\t\trm -rf debian/tmp\n"
"\t\tinstall -d debian/tmp/DEBIAN $(docdir)\n"
"\t\tinstall -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN\n"
"\t\t$(MAKE) INSTALL_PROGRAM=\"$(INSTALL_PROGRAM)\" \\\n"
"\t\tprefix=$$(pwd)/debian/tmp/usr install\n"
"\t\tcd debian/tmp && mv usr/info usr/man usr/share\n"
"\t\tcp -a NEWS debian/copyright $(docdir)\n"
"\t\tcp -a debian/changelog $(docdir)/changelog.Debian\n"
"\t\tcp -a ChangeLog $(docdir)/changelog\n"
"\t\tcd $(docdir) && gzip -9 changelog changelog.Debian\n"
"\t\tgzip -r9 debian/tmp/usr/share/man\n"
"\t\tgzip -9 debian/tmp/usr/share/info/*\n"
"\t\tdpkg-shlibdeps debian/tmp/usr/bin/hello\n"
"\t\tdpkg-gencontrol -isp\n"
"\t\tchown -R root:root debian/tmp\n"
"\t\tchmod -R u+w,go=rX debian/tmp\n"
"\t\tdpkg --build debian/tmp .."

#: C/basic.xml:595(para)
msgid ""
"First, notice that this rule calls the <filename>checkroot</filename> rule "
"to make sure the package is built as root and calls the "
"<filename>build</filename> rule to compile the source. Then the "
"<filename>debian/tmp/DEBIAN</filename> and "
"<filename>debian/tmp/usr/share/doc/hello</filename> files are created, and "
"the <filename>postinst</filename> and the <filename>prerm&gt;</filename> "
"scripts are installed to <filename>debian/tmp/DEBIAN</filename>. Then "
"<emphasis>make install</emphasis> is run with a prefix that installs to the "
"<filename>debian/tmp/usr</filename> directory. Afterward the documentation "
"files (NEWS, ChangeLog, and the debian changelog) are gzipped and installed. "
"<emphasis>dpkg-shlibdeps</emphasis> is invoked to find the shared library "
"dependencies of the <application>hello</application> executable, and it "
"stores the list in the <filename>debian/substvars</filename> file for the "
"${shlibs:Depends} variable in <filename>control</filename>. Then "
"<emphasis>dpkg-gencontrol</emphasis> is run to create a control file for the "
"binary package, and it makes the substitutions created by <emphasis>dpkg-"
"shlibdeps</emphasis>. Finally, after the permissions of the "
"<filename>debian/tmp</filename> have been set, <emphasis>dpkg --"
"build</emphasis> is run to build the binary .deb package and place it in the "
"parent directory."
msgstr ""
"첫 번째, 이 규칙은 패키지가 root로써 만들어졌는지 확신하기 위하여 <filename>checkroot</filename> 를 "
"호출하고 소스를 컴파일 하기 위하여 <filename>build</filename> 규칙을 호출 하는 것을 주목 하십시오. 그 다음에, "
"<filename>debian/tmp/DEBIAN</filename> "
"과<filename>debian/tmp/usr/share/doc/hello</filename> 파일이 만들어지고, "
"<filename>postinst</filename> 와 <filename>prerm&gt;</filename> 스크립트가 "
"<filename>debian/tmp/DEBIAN</filename> 에 설치 됩니다. 그런 후 <emphasis>make "
"install</emphasis> 이 prefix와 함께 실행되어 <filename>debian/tmp/usr</filename> 로 "
"설치 됩니다. 이어서 문서 파일들이 (NEWS, ChangeLog, 와 그 debian changelog) 압축되고 설치 됩니다. "
"<emphasis>dpkg-shlibdeps</emphasis> 는 <application>hello</application> 실행 "
"파일의 공유 라이브러리 의존성을 찾기 위하여 수행되고, 그것은 <filename>control</filename> 내의 "
"${shlibs:Depends} 변수를 위한 <filename>debian/substvars</filename> 파일 내의 목록을 저장 "
"합니다. 그 다음에, <emphasis>dpkg-gencontrol</emphasis> 이 바이너리 패키지를 위한 control 파일을 "
"만들기 위하여 실행이 되고, <emphasis>dpkg-shlibdeps</emphasis> 에 의해 생성된 대체를 만듭니다. "
"마지막으로, <filename>debian/tmp</filename> 의 접근 권한이 지정된 후, <emphasis>dpkg --"
"build</emphasis> 가 바이너리 .deb 패키지를 만들고 상위 디렉토리에 그것을 옮겨놓기 위하여 실행이 됩니다."

#: C/basic.xml:613(title)
msgid "postinst and prerm"
msgstr "postinst and prerm"

#: C/basic.xml:615(para)
msgid ""
"The <filename>postinst</filename> and <filename>prerm</filename> files are "
"examples of maintainer scripts. They are shell scripts that are executed "
"after installation and before removal, respectively, of the package. In the "
"case of the &ubuntu; <application>hello</application> package, they are used "
"to install (and remove) the info file. Go ahead and copy them into the "
"current <filename>debian</filename> directory."
msgstr ""

#: C/basic.xml:624(screen)
#, no-wrap
msgid ""
"\n"
"cp ../../ubuntu/hello-2.1.1/debian/postinst .\n"
"cp ../../ubuntu/hello-2.1.1/debian/prerm ."
msgstr ""
"\n"
"cp ../../ubuntu/hello-2.1.1/debian/postinst .\n"
"cp ../../ubuntu/hello-2.1.1/debian/prerm ."

#: C/basic.xml:633(para)
msgid ""
"Now that we have gone through the files in the <filename>debian</filename> "
"directory for <application>hello</application> in detail, we can build the "
"source (and binary) packages. First let us move into the root of the "
"extracted source:"
msgstr ""
"이제 우리는 자세하게 <application>hello</application> 를 위한 "
"<filename>debian</filename> 디렉토리 내의 파일들을 읽어 보았고, 소스(그리고 바이너리) 패키지를 만들 수 "
"있습니다. 우선 압축이 풀려진 소스의 루트로 이동해 보도록 하겠습니다:"

#: C/basic.xml:641(para)
msgid ""
"Now we build the source package using <application>dpkg-"
"buildpackage</application>:"
msgstr ""
"이제 우리는 <application>dpkg-buildpackage</application> 를 사용하여 소스 패키지를 만듭니다:"

#: C/basic.xml:644(screen)
#, no-wrap
msgid "dpkg-buildpackage -S -rfakeroot"
msgstr "dpkg-buildpackage -S -rfakeroot"

#: C/basic.xml:646(para)
msgid ""
"The -S flag tells <application>dpkg-buildpackage</application> to build a "
"source package, and the -r flag tells it to use "
"<application>fakeroot</application> to allow us to have fake root privileges "
"when making the package. <application>dpkg-buildpackage</application> will "
"take the <filename>.orig.tar.gz</filename> file and produce a "
"<filename>.diff.gz</filename> (the difference between the original tarball "
"from the author and the directory we have created, "
"<filename>debian/</filename> and its contents) and a "
"<filename>.dsc</filename> file that has the description and md5sums for the "
"source package. The <filename>.dsc</filename> and "
"<filename>*_source.changes</filename> (used for uploading the source "
"package) files are signed using your GPG key."
msgstr ""

#: C/basic.xml:662(para)
msgid ""
"If you do not have a <application>gpg</application> key set up you will get "
"an error from <application>debuild</application>. You can either set up a "
"<application>gpg</application> key or use the <emphasis>-us -uc</emphasis> "
"keys with <application>debuild</application> to turn off signing. However, "
"you will not be able to have your packages uploaded to Ubuntu without "
"signing them."
msgstr ""

#: C/basic.xml:664(para)
msgid ""
"To make sure <application>debuild</application> finds the right "
"<application>gpg</application> key you should set the DEBFULLNAME and "
"DEBEMAIL environment variables (in your <filename>~/.bashrc</filename> for "
"instance) to the name and email address you use for your "
"<application>gpg</application> key and in the "
"<filename>debian/changelog</filename>"
msgstr ""

#: C/basic.xml:664(para)
msgid ""
"Some people have reported that they were unable to get "
"<application>debuild</application> to find their "
"<application>gpg</application> key properly, even after setting the above "
"environment variables. To get around this you can give "
"<application>debuild</application> the <emphasis>-k&lt;keyid&gt;</emphasis> "
"flag where &lt;keyid&gt; is your <application>gpg</application> key ID."
msgstr ""

#: C/basic.xml:667(para)
msgid ""
"In addition to the source package, we can also build the binary package with "
"<application>pbuilder</application>:"
msgstr ""
"소스 패키지에 더하여, 우리는 또한 <application>pbuilder</application> 를 가지고 바이너리 패키지를 만들 수 "
"있습니다:"

#: C/basic.xml:673(para)
msgid ""
"Using <application>pbuilder</application> to build the binary packages is "
"very important. It ensures that the build dependencies are correct, because "
"<application>pbuilder</application> provides only a minimal environment, so "
"all the build-time dependencies are determined by the "
"<filename>control</filename> file."
msgstr ""
"바이너리 패키지를 만들기 위해 <application>pbuilder</application> 를 사용하는 것은 매우 중요 합니다. "
"이것은 <application>pbuilder</application> 는 오직 최소한의 환경을 제공하므로, 모든 빌드-타임 의존성은 "
"<filename>control</filename> 파일에 의해서 결정되기 때문에 빌드 의존성을 정확히 하는 것을 확신하게 합니다."

#: C/basic.xml:680(para)
msgid ""
"We can check the source package for common mistakes using "
"<application>lintian</application>:"
msgstr ""
"우리는 <application>lintian</application> 을 가지고 소스 패키지의 일반적인 실수를 점검할 수 있습니다:"

#: C/basic.xml:823(screen)
#, no-wrap
msgid ""
"\n"
"hello-debhelper (2.1.1-1) edgy; urgency=low\n"
"\n"
"  * Initial release\n"
"\n"
"  -- Captain Packager &lt;packager@coolness.com&gt;  Thu,  6 Apr 2006 "
"10:07:19 -0700"
msgstr ""

#: C/basic.xml:1102(title)
msgid "Common Mistakes"
msgstr "일반적인 실수"

#: C/basic.xml:1105(title)
msgid "dh_make Example Files"
msgstr "dh_make 예제 파일"

#: C/basic.xml:1107(para)
msgid ""
"When you use dh_make to create the initial \"debianization\", example files "
"for various tasks are created in the <filename>debian/</filename> directory. "
"The templates have a .ex extension. If you want to use one, rename it to "
"remove the extension. If you do not need it, remove it to keep the "
"<filename>debian/</filename> directory clean."
msgstr ""
"여러분이 초기 \"데비안화\"를 만들기 위하여 dh_make를 사용할 때, 다양한 작업을 위한 예제 파일은 "
"<filename>debian/</filename> 디렉토리에 만들어 집니다. 그 양식들은 .ex 확장자를 가지고 있습니다. 만약 "
"여러분이 하나를 사용하기를 원한다면, 그것은 확장자를 제거하여 이름을 변경 하십시오. 만약 그것이 필요하지 않다면, "
"<filename>debian/</filename> 디렉토리를 깨끗하게 유지하기 위하여 그것을 삭제 하십시오."

#: C/basic.xml:1116(title)
msgid "Changing the Original Tarball"
msgstr "원래의 Tarball 변경 하기"

#: C/basic.xml:1118(para)
msgid ""
"There are two types of source packages, native and non-native. A native "
"package is one that is specific to &ubuntu;/Debian. It has the "
"<application>debian/</application> directory containing the packaging "
"information and any changes to the source included in the tarball (usually "
"&lt;packagename&gt;_&lt;version&gt;.tar.gz). Non-native packages are more "
"common. A non-native package splits the source package into a "
"&lt;packagename&gt;_&lt;version&gt;.orig.tar.gz tarball that is identical "
"(hopefully including md5sum) to the source tarball downloaded from the "
"project's homepage and a .diff.gz file that contains all the differences "
"(<filename>debian/</filename> directory and patches) from the original "
"source tarball."
msgstr ""

#: C/basic.xml:1130(para)
msgid ""
"Here is a list of potential problems that can occur if you change the "
"original tarball:"
msgstr "만약 여러분이 원래의 tarball을 변경 한다면 일어날 수 있는 가능한 위험에 대한 목록이 여기에 있습니다:"

#: C/basic.xml:1135(para)
msgid "Reproducibility"
msgstr "재생 가능성"

#: C/basic.xml:1137(para)
msgid ""
"If you take just the .diff.gz and .dsc, you or someone else has no means to "
"reproduce the changes in the original tarball."
msgstr ""
"만약 여러분이 단지 .diff.gz 와 .dsc 만을 취한다면, 여러분 또는 다른 사람이 원래의 tarball에 있는 변경을 재생산할 "
"수단이 없습니다."

#: C/basic.xml:1141(para)
msgid "Upgradeability"
msgstr "업그레이드 가능성"

#: C/basic.xml:1143(para)
msgid ""
"It is much easier to upgrade to a new upstream (from the author) version if "
"the .orig.tar.gz is preserved and there is a clear separation between the "
"upstream source and the changes made to produce the &ubuntu; source package."
msgstr ""

#: C/basic.xml:1148(para)
msgid "Debian to &ubuntu; Synchronization"
msgstr ""

#: C/basic.xml:1150(para)
msgid ""
"Changing original tarballs makes it hard to automatically sync from Debian "
"to &ubuntu;. Normally, only the .diff.gz and .dsc files change within the "
"same upstream version, since the .orig.tar.gz file is shared by all the "
"Debian or &ubuntu; revisions. It is much more difficult to sync if the "
"md5sums of the .orig.tar.gz files are not the same."
msgstr ""

#: C/basic.xml:1157(para)
msgid "Usage of Revision Control for Debian package"
msgstr "데비안 패키지를 위한 개정 관리의 사용"

#: C/basic.xml:1159(para)
msgid ""
"If you use svn (<application>svn-buildpackage</application>) to handle your "
"Debian package, you usually don't store the original tarball inside. If "
"someone else does a checkout, he'll need to get the original tarball "
"separately. Other revision control systems can be used to track only the "
"packaging files (<filename>debian/</filename>, etc.) and not the whole "
"source. However, if the .orig.tar.gz is not the same, then obviously "
"problems can occur."
msgstr ""
"만약 여러분의 데비안 패키지를 관리하기 위하여 svn (<application>svn-buildpackage</application>) "
"을 사용한다면, 그것 내에 보통은 원래의 tarball을 저장하지 않습니다. 만약 다른 누군가 체크아웃을 한다면, 따로이 원래의 "
"tarball을 가지는 것이 필요 합니다. 다른 버전 관리 시스템은 오직 패키징 파일 "
"(<filename>debian/</filename>, 기타) 만을 추적하고 전체 소스는 추적하지 않는 것에 이용될 수 있습니다. "
"그러나, .orig.tar.gz 이 같지 않다면, 그것은 분명히 문제를 일으킬 수 있습니다."

#: C/basic.xml:1168(para)
msgid "Security tracking"
msgstr "보안 추적"

#: C/basic.xml:1170(para)
msgid ""
"Consider a situation where someone <emphasis>wants</emphasis> to introduce a "
"backdoor/rootkit or other evil stuff. If the original tarball is intact, it "
"can be scanned easily through the .diff.gz to see if the person who modified "
"the package tried to do something evil. If the tarball has changed, however, "
"you also need to check the differences between the tarball and the original "
"source."
msgstr ""
"어떤 사람이 backdoor/rootkit 또는 다른 나쁜 것을 포함하기를 <emphasis>원한다는</emphasis> 것을 "
"고려하십시오. 만약 원래의 tarball이 손상되지 않았다면, 그 사람이 무엇인가 나쁜 짓을 하기 위하여 패키지를 변경하였는 지를 보기 "
"위하여 diff.gz 를 통해 쉽게 검사를 할 수 있습니다. 그러나, 만약 tarball이 변경되었다면, 그 tarball과 원래의 소스 "
"간의 차이를 점검하는 것이 필요 합니다."

#: C/basic.xml:1177(para)
msgid ""
"You still have to trust the authors of the software not to do anything evil, "
"but that is the case regardless of whether the original is changed."
msgstr ""
"여러분은 여전히 그 소프트웨어의 저작자가 어떤 나쁜 것도 하지 않았다고 신뢰를 할 수 있지만, 그것은 원래의 소스가 변경되었는 여부에 "
"관계없는 경우 입니다."

#: C/basic.xml:1181(para)
msgid "The .diff.gz"
msgstr ".diff.gz 파일"

#: C/basic.xml:1183(para)
msgid ""
"The option to use the .diff.gz to reflect changes to the original tarball "
"already exists, so it is easy to make changes without touching the original "
"tarball."
msgstr ""
"이미 존재하는 원래의 tarball로 변경을 반영하기 위해 대신에 .diff.gz 를 사용하는 것이 선택 사항이고, 이것은 원래의 "
"tarball을 건드리는 것 없이 변경을 만드는 것을 쉽게 합니다."

#: C/basic.xml:1190(emphasis)
msgid ""
"It is acceptable to change the original tarball if one or more of the "
"following hold true:"
msgstr "만약 다음 중 하나 또는 그 이상이 진실일 경우 원래의 tarball을 변경하는 것은 받아질 수 있습니다:"

#: C/basic.xml:1195(para)
msgid ""
"It contains non-free parts that cannot be redistributed. Remove those parts, "
"and note it in the packaging. Often such packages use \"dfsg\" (which stands "
"for Debian Free Software Guidelines) in the package name and/or versioning "
"to indicate that non-free parts have been removed."
msgstr ""
"그것이 재배포할 수 없는 비자유 부분을 가지고 있고, 패키징 내에 그것을 기록 합니다. 자주 이러한 패키지는 이름 내에 \"dfsg\" "
"(Debian Free Software Guidelines 의 약어) 를 사용하고(또는), 비자유 부분이 삭제 되었음을 표시하는 버전 "
"매김을 합니다."

#: C/basic.xml:1201(para)
msgid "The authors only provide bzip2'ed source."
msgstr "저작자는 bzip2으로 압축된 소스만을 제공 합니다."

#: C/basic.xml:1204(para)
msgid ""
"Just <application>bunzip2</application> the .tar.bz2 and <application>gzip -"
"9 </application> the resulting tar."
msgstr ""
"단지, <application>bunzip2</application> 그 .tar.bz2 와 <application>gzip -9 "
"</application> 그 결과 tar 를 하십시오."

#: C/basic.xml:1208(para)
msgid "The md5sums of the .tar you provide and the original .tar must match!"
msgstr "여러분이 제공하는 .tar 파일과 원래의 .tar 파일의 md5sums 은 반드시 일치하여야 합니다!"

#: C/basic.xml:1211(para)
msgid ""
"Eventually provide a get-orig-source rule in debian/rules that does this "
"conversion automatically."
msgstr "실제로 debian/rules 에 get-orig-source 규칙을 제공 하는 것은 이 변환을 자동으로 합니다."

#: C/basic.xml:1218(para)
msgid "Directly imported from SVN"
msgstr "SVN에서 직접 가져오기"

#: C/basic.xml:1220(para)
msgid "Provide get-orig-source in debian/rules."
msgstr "debian/rules 에 get-orig-source 를 제공 합니다."

#: C/basic.xml:1226(emphasis)
msgid "not"
msgstr "아닙니다"

#: C/basic.xml:1226(emphasis)
msgid ""
"The following are <placeholder-1/> reasons to change the original tarball:"
msgstr "다음은 원래의 tarball을 변경하는 사유가 <placeholder-1/>:"

#: C/basic.xml:1231(para)
msgid "Wrong Directory Layout"
msgstr "잘못된 디렉토리 레이아웃"

#: C/basic.xml:1233(para)
msgid ""
"<application>dpkg-source</application> is quite flexible and manages to "
"produce the correct directory layout even if:"
msgstr ""
"<application>dpkg-source</application> 는 아주 유연하고, 심지어 다음의 경우에도 정확한 디렉토리 "
"레이아웃을 생산하는 것을 관리 합니다:"

#: C/basic.xml:1239(para)
msgid ""
"The directory inside the tarball is not named &lt;upstream&gt;-"
"&lt;version&gt;."
msgstr "tarball 내의 디렉토리는 &lt;upstream&gt;-&lt;version&gt; 로 이름지어질 수 없습니다."

#: C/basic.xml:1242(para)
msgid "There is no subdirectory inside the tarball."
msgstr "tarball 내에 서브디렉토리가 없습니다."

#: C/basic.xml:1248(para)
msgid ""
"Files need to be removed to keep the .diff.gz small (e.g., files created by "
"autotools). Everything that needs to be deleted should be removed in the "
"<application>clean</application> rule. Since the .diff.gz is created with "
"diff -u, you will not see removed files in the .diff.gz."
msgstr ""
".diff.gz 작게 유지를 하려면 (예를 들어, autotools에 의해 만들어진 ) 파일들을 삭제하는 것이 필요 합니다. 삭제되어야 "
"할 필요가 있는 모든 것들은 <application>clean</application> 규칙 내에서 지워져야 합니다. diff -u 로 "
".diff.gz 가 만들어지므로, diff.gz 에서 삭제된 파일을 볼 수 없게 됩니다."

#: C/basic.xml:1254(para)
msgid ""
"Files need to be modified. Files that need to be modified should to go into "
".diff.gz. That is its purpose!"
msgstr ""
"파일들은 변경되어야 할 필요가 있습니다. 변경이 필요한 파일들은 .diff.gz 로 가야만 합니다. 그것이 이것의 목적 입니다!"

#: C/basic.xml:1257(para)
msgid ""
"Wrong permissions on files. You can use <filename>debian/rules</filename> to "
"do this."
msgstr ""
"파일의 잘못된 접근 권한. 이것을 하기 위해 <filename>debian/rules</filename> 를 사용할 수 있습니다."

#: C/basic.xml:1263(para)
msgid ""
"What do I do with an .orig.tar.gz that already includes a "
"<filename>debian/</filename> dir?"
msgstr ""
".orig.tar.gz 이 이미 <filename>debian/</filename> dir을 포함하고 있다면 무엇을 해야 합니까?"

#: C/basic.xml:1266(para)
msgid ""
"Do not repackage it. You can ask the author(s) to delete the debian/ dir and "
"provide a diff.gz instead. This makes it easier to review their work, and it "
"separates packaging from program source."
msgstr ""
"그것을 다시 패키지하지 마십시오. 여러분은 저작자에게 debian/ dir 을 삭제하는 것과 대신에 diff.gz 를 제공하도록 문의할 "
"수 있습니다. 이것은 저작자의 작업을 검토하는 것을 쉽게 만들어 주고, 프로그램 소스에서 패키징을 구분할 수 있게 합니다."

#: C/basic.xml:1271(para)
msgid ""
"It is always a good idea to contact the program's author(s) and ask if you "
"may correct autoconf issues, directory layout, an outdated Free Software "
"Foundation address in COPYRIGHT files, or other things that are not specific "
"to the packaging but would be convenient for you so you do not need to "
"\"patch\" the source in .diff.gz."
msgstr ""
"프로그램의 저작자와 연락하는 것은 언제나 좋은 생각이고 만약 여러분이 autoconf 문제나, 디렉토리 레이아웃, COPYRIGHT 파일 "
"내의 오래된 Free Software Foundation 주소들을 고칠 수 있지만 그것이 여러분에게 불편할 때는 저작자에게 요청하고 "
"그래서 여러분은 .diff.gz 내의 소스를 \"패치\"할 필요가 없게 됩니다."

#: C/basic.xml:1280(title)
msgid "Copyright Information"
msgstr "저작권 정보"

#: C/basic.xml:1282(para)
msgid "The <filename>debian/copyright</filename> file should contain:"
msgstr "<filename>debian/copyright</filename> 파일은 반드시 다음을 포함해야 합니다:"

#: C/basic.xml:1286(para)
msgid ""
"The licensing information for <emphasis>all</emphasis> files in the source. "
"Sometimes author(s) put a license in <filename>COPYING</filename> but have "
"different licensing information for some files in the source."
msgstr ""
"소스 내의 <emphasis>모든</emphasis> 파일을 위한 사용허가 정보. 가끔씩 저작자가 소스 내의 몇 가지 파일을 위한 다른 "
"사용허가 정보를 가지는 <filename>COPYING</filename> 파일에 라이센스를 넣기도 합니다."

#: C/basic.xml:1291(para)
msgid "The copyright holder(s) and year(s)."
msgstr "저작권 보유자와 연도"

#: C/basic.xml:1293(para)
msgid ""
"The <emphasis>entire</emphasis> license unless it is one of the licenses "
"found in <filename>/usr/share/common-licenses</filename>, in which case you "
"should just include the preamble."
msgstr ""
"<filename>/usr/share/common-licenses</filename> 내에서 찾을 수 있는 하나의 사용허가가 아닌 한 "
"<emphasis>전체</emphasis> 라이센스는 여러분이 사용허가의 서문을 포함시켜야 합니다."

#: C/appendix.xml:15(title)
msgid "Appendix"
msgstr "부록"

#: C/appendix.xml:18(title)
msgid "Additional Resources"
msgstr "추가적 자원"

#: C/appendix.xml:20(emphasis)
msgid "Debian Resources"
msgstr "데비안 자원"

#: C/appendix.xml:23(para)
msgid ""
"<ulink url=\"http://www.debian.org/doc/manuals/maint-guide/\"> Debian New "
"Maintainers Guide</ulink> - Good resource for learning to package."
msgstr ""
"<ulink url=\"http://www.debian.org/doc/manuals/maint-guide/\"> 데비안 새 패키지 관리자 "
"안내서</ulink> - 패키지를 배우는 좋은 자원 입니다."

#: C/appendix.xml:28(para)
msgid ""
"<ulink url=\"http://www.debian.org/doc/debian-policy/\"> Debian "
"Policy</ulink> - The essential Policy manual for Debian and Debian-based "
"distros."
msgstr ""
"<ulink url=\"http://www.debian.org/doc/debian-policy/\"> 데비안 정책</ulink> - "
"데비안과 데비안 기반 배포판을 위한 필수적인 정책 지도서."

#: C/appendix.xml:33(para)
msgid ""
"<ulink url=\"http://www.debian.org/doc/manuals/developers-reference/\"> "
"Debian Developer's Reference</ulink> - Specific information for Debian "
"Developers but has some items of interest for packagers."
msgstr ""
"<ulink url=\"http://www.debian.org/doc/manuals/developers-reference/\"> 데비안 "
"개발자의 참조</ulink> - 데비안 개발자를 위한 특정 정보 그러나 몇 가지 패키지 관리자를 위한 흥미로운 아이템들을 가지고 있습니다."

#: C/appendix.xml:39(para)
msgid ""
"<ulink url=\"http://www.netfort.gr.jp/~dancer/column/libpkg-guide/libpkg-"
"guide.html\">Library Packaging Guide</ulink> - Guide for packaging libraries."
msgstr ""
"<ulink url=\"http://www.netfort.gr.jp/~dancer/column/libpkg-guide/libpkg-"
"guide.html\">라이브러리 패키징 안내서</ulink> - 라이브러리를 패키징 하기 위한 안내서."

#: C/appendix.xml:43(para)
msgid ""
"<ulink "
"url=\"http://women.alioth.debian.org/wiki/index.php/English/PackagingTu"
"torial\">Debian Women Packaging Tutorial</ulink> - Another good introduction "
"to Debian packaging."
msgstr ""
"<ulink "
"url=\"http://women.alioth.debian.org/wiki/index.php/English/PackagingTu"
"torial\">Debian Women 패키징 지침서</ulink> - 또다른 데비안 패키징에 대한 좋은 소개."

#: C/appendix.xml:50(emphasis)
msgid "Other Resources"
msgstr "여타 자원"

#: C/appendix.xml:54(ulink)
msgid "IBM Packaging Tutorial"
msgstr "IBM 패키징 지도서"

#: C/appendix.xml:58(ulink)
msgid "Duckcorp CDBS Documentation"
msgstr "Duckcorp CDBS 문서"

#: C/appendix.xml:62(ulink)
msgid "Ubuntu MOTU Documentation"
msgstr "우분투 MOTU 문서"

#: C/appendix.xml:67(ulink)
msgid "Kubuntu Packaging Guide"
msgstr "쿠분투 패키징 안내서"

#: C/appendix.xml:76(title)
msgid "Chroot Environment"
msgstr "Chroot 환경"

#: C/appendix.xml:78(para)
msgid ""
"A chroot environment is commonly used for development-related work and is "
"basically an install of build-related software. It is always a good idea to "
"do development work in a chroot environment, as it often requires the "
"installation of development packages (whose main purpose is for building "
"packages). An example is when a certain application requires the headers and "
"development version of a library to build (e.g. <application>libabc-"
"dev</application>). A normal user would not require the development version "
"of <application>libabc</application>. Thus it is better to install such "
"development packages in a chroot, leaving the normal operating environment "
"clean and uncluttered. First, install the required packages:"
msgstr ""
"chroot 환경은 개발과 관련된 작업을 위하여 일반적으로 사용이 되고 기본적으로 빌드 관련된 소프트웨어의 설치 입니다. chroot "
"환경에서 개발 작업을 하는 것은 언제나 좋은 생각이고, 그것은 자주 개발 패키지의 설치를 요구 합니다. (주요 목적이 패키지를 만들기 "
"위해서 입니다.) 하나의 예는, 특정 프로그램은 헤더와 라이브러리의 개발 버전을 (예를 들어, <application>libabc-"
"dev</application>) 요구 합니다. 보통의 사용자는 <application>libabc</application> 의 개발 "
"버전을 필요로 하지 않습니다. 그러므로 chroot 내에 그러한 개발 패키지를 설치하는 것이 좋고, 보통의 작업 환경은 깨끗하고 정돈되게 "
"남겨 둡니다. 우선은 필요한 패키지를 설치 합니다:"

#: C/appendix.xml:91(screen)
#, no-wrap
msgid "sudo apt-get install dchroot debootstrap"
msgstr "sudo apt-get install dchroot debootstrap"

#: C/appendix.xml:93(para)
msgid ""
"Make sure to install at least the version of "
"<application>debootstrap</application> that is from the &ubuntu; release for "
"which you are trying to create the chroot. You may have to download it from "
"<ulink url=\"http://packages.ubuntu.com\">packages.ubuntu.com</ulink> and "
"manually install it with <application>dpkg -i</application>."
msgstr ""

#: C/appendix.xml:101(para)
msgid ""
"The next steps are to create, configure, and enter the chroot environment."
msgstr "다음 단계는 chroot 환경을 만들고, 설정하고, 진입하는 것 입니다."

#: C/appendix.xml:104(screen)
#, no-wrap
msgid ""
"\n"
"sudo mkdir /var/chroot\n"
"echo \"mychroot /var/chroot\" | sudo tee -a /etc/dchroot.conf\n"
"sudo debootstrap --variant=buildd edgy /var/chroot/ "
"http://archive.ubuntu.com/ubuntu/"
msgstr ""

#: C/appendix.xml:109(para)
msgid ""
"Creating a chroot environment will take some time as "
"<application>debootstrap</application> downloads and configures a minimal "
"&ubuntu; installation."
msgstr ""

#: C/appendix.xml:113(screen)
#, no-wrap
msgid ""
"sudo cp /etc/resolv.conf /var/chroot/etc/resolv.conf\n"
"sudo cp /etc/apt/sources.list /var/chroot/etc/apt/\n"
"sudo chroot /var/chroot/"
msgstr ""
"sudo cp /etc/resolv.conf /var/chroot/etc/resolv.conf\n"
"sudo cp /etc/apt/sources.list /var/chroot/etc/apt/\n"
"sudo chroot /var/chroot/"

#: C/appendix.xml:117(para)
msgid ""
"In order to be able to use apt in the chroot, add Ubuntu sources to the "
"chroot's apt sources. For the moment, ignore any warnings about package "
"authentication:"
msgstr ""
"chroot에서 apt 사용을 하는 것이 가능하려면, chroot의 apt sources에 우분투 sources를 더합니다. 어떤 때, "
"패키지 인증에 대한 경고를 하는 것은 무시 합니다:"

#: C/appendix.xml:121(screen)
#, no-wrap
msgid ""
"\n"
"echo \"deb     http://archive.ubuntu.com/ubuntu edgy main restricted \\\n"
"\tuniverse multiverse\" &gt; /etc/apt/sources.list\n"
"echo \"deb-src http://archive.ubuntu.com/ubuntu edgy main restricted \\\n"
"\tuniverse multiverse\" &gt;&gt; /etc/apt/sources.list\n"
"apt-get update\n"
"apt-get install build-essential dh-make automake pbuilder gnupg lintian \\\n"
"\twget debconf devscripts gnupg sudo\n"
"apt-get update\n"
"exit"
msgstr ""

#: C/appendix.xml:132(para)
msgid "Run the following command to configure locales:"
msgstr "locales 를 설정하기 위해 다음의 명령을 실행 합니다:"

#: C/appendix.xml:134(screen)
#, no-wrap
msgid ""
"\n"
"sudo chroot /var/chroot/\n"
"apt-get install dialog language-pack-en\n"
"exit"
msgstr ""

#: C/appendix.xml:139(para)
msgid ""
"If you want support for a language other than English replace "
"<emphasis>en</emphasis> in <application>language-pack-en</application> with "
"the appropriate language code."
msgstr ""

#: C/appendix.xml:144(para)
msgid ""
"Next, fix the user and root passwords for the chroot environment. The last "
"line below is to avoid sudo warnings when resolving in the chroot "
"environment:"
msgstr ""
"다음은, chroot 환경을 위해 사용자와 루트의 암호를 고치는 것 입니다. 아래의 마지막 줄은 chroot 환경을 찾을 때 sudo "
"경고를 피하기 위해서 입니다."

#: C/appendix.xml:148(screen)
#, no-wrap
msgid ""
"\n"
"sudo cp /etc/passwd /var/chroot/etc/\n"
"sudo sed 's/\\([^:]*\\):[^:]*:/\\1:*:/' /etc/shadow | sudo tee "
"/var/chroot/etc/shadow\n"
"sudo cp /etc/group /var/chroot/etc/\n"
"sudo cp /etc/hosts /var/chroot/etc/"
msgstr ""
"\n"
"sudo cp /etc/passwd /var/chroot/etc/\n"
"sudo sed 's/\\([^:]*\\):[^:]*:/\\1:*:/' /etc/shadow | sudo tee "
"/var/chroot/etc/shadow\n"
"sudo cp /etc/group /var/chroot/etc/\n"
"sudo cp /etc/hosts /var/chroot/etc/"

#: C/appendix.xml:154(para)
msgid ""
"To enable sudo, set up your root password and the first sudo user in the "
"admin group (for the chroot environment). In the following commands, "
"substitute \"&lt;user&gt;\" with the username that will be used in the "
"chroot environment:"
msgstr ""
"sudo를 사용하려면, 여러분의 root 패스워드와 관리자 그룹(chroot 환경을 위한)에 첫 번째 sudo 사용자로 만듭니다. "
"chroot 환경에서 \"&lt;user&gt;\" 대신에 여러분의 사용자 이름을 넣고 다음 명령을 사용 합니다:"

#: C/appendix.xml:159(screen)
#, no-wrap
msgid ""
"\n"
"sudo cp /etc/sudoers /var/chroot/etc/\n"
"sudo chroot /var/chroot/\n"
"dpkg-reconfigure passwd\n"
"passwd &lt;user&gt;\n"
"exit"
msgstr ""
"\n"
"sudo cp /etc/sudoers /var/chroot/etc/\n"
"sudo chroot /var/chroot/\n"
"dpkg-reconfigure passwd\n"
"passwd &lt;user&gt;\n"
"exit"

#: C/appendix.xml:166(para)
msgid ""
"The system fstab needs to be modified so that the chroot environment will "
"have access to the system home directories, temp directory, etc. Note that "
"the actual system home directory is used in the chroot environment."
msgstr ""
"시스템 fstab은 변경될 필요가 있고 그래야 chroot 환경이 시스템 홈 디렉토리들, 임시 디렉토리 등을 사용할 수 있습니다. "
"chroot 환경에서 실제 시스템 홈 디렉토리가 사용되는 것을 주의 하십시오."

#: C/appendix.xml:170(screen)
#, no-wrap
msgid "sudo editor /etc/fstab"
msgstr "sudo editor /etc/fstab"

#: C/appendix.xml:172(para)
msgid "Add these lines:"
msgstr "이 줄들을 더합니다:"

#: C/appendix.xml:173(screen)
#, no-wrap
msgid ""
"\n"
"/home           /var/chroot/home        none    bind            0       0\n"
"/tmp            /var/chroot/tmp         none    bind            0       0 \n"
"proc-chroot     /var/chroot/proc        proc    defaults        0       0 \n"
"devpts-chroot   /var/chroot/dev/pts     devpts  defaults        0       0 "
msgstr ""
"\n"
"/home /var/chroot/home none bind 0 0\n"
"/tmp /var/chroot/tmp none bind 0 0 \n"
"proc-chroot /var/chroot/proc proc defaults 0 0 \n"
"devpts-chroot /var/chroot/dev/pts devpts defaults 0 0 "

#: C/appendix.xml:179(para)
msgid "Mount the new fstab entries"
msgstr "새로운 fstab 항목 마운트"

#: C/appendix.xml:181(screen)
#, no-wrap
msgid "sudo mount -a"
msgstr "sudo mount -a"

#: C/appendix.xml:183(para)
msgid ""
"The default bash profile includes chroot information in the prompt. To make "
"this visible:"
msgstr "기본 설정 bash 프로파일은 프롬프트에 chroot 정보를 포함 합니다. 이것을 보이게 만드려면:"

#: C/appendix.xml:186(screen)
#, no-wrap
msgid ""
"\n"
"sudo chroot /var/chroot/\n"
"echo mychroot &gt; /etc/debian_chroot\n"
"exit"
msgstr ""
"\n"
"sudo chroot /var/chroot/\n"
"echo mychroot &gt; /etc/debian_chroot\n"
"exit"

#: C/appendix.xml:191(para)
msgid ""
"Now use your chroot (you may omit the -c mychroot if there's only one or you "
"just want the first one in <filename>/etc/dchroot.conf</filename>). The -d "
"parameter means that your environment will be preserved. This parameter is "
"generally useful if you want chrooted applications to seamlessly use your X "
"server, your session manager, etc."
msgstr ""
"이제 여러분의 chroot를 사용 합니다. (아마도 혼자이거나 <filename>/etc/dchroot.conf</filename> 내의 "
"첫 번째 사용자가 되기를 원한다면 -c mychroot를 제외할 수 있습니다.) -d 파라미터는 여러분의 환경이 예약되었다는 의미 "
"입니다. 이 파라미터는 chroot된 프로그램이 X 서버, 세션 관리자 등을 끊임없이 사용한다면 보통 유용 합니다."

#: C/appendix.xml:198(screen)
#, no-wrap
msgid "dchroot -c mychroot -d"
msgstr "dchroot -c mychroot -d"

#: C/appendix.xml:203(title)
msgid "<application>dh_make</application> example files"
msgstr "<application>dh_make</application> 예제 파일"

#: C/appendix.xml:207(term)
msgid "Readme.Debian"
msgstr "Readme.Debian"

#: C/appendix.xml:209(para)
msgid ""
"This file is used to document changes that you have made to the original "
"upstream source that other people might need to know or information specific "
"to Debian or &ubuntu;."
msgstr ""

#: C/appendix.xml:217(term)
msgid "conffiles.ex"
msgstr "conffiles.ex"

#: C/appendix.xml:219(para)
msgid ""
"If the package installs a configuration file, when the package is upgraded "
"<application>dpkg</application> can prompt a user whether to keep his or her "
"version if modified or install the new version. Such configuration files "
"should be listed in <filename>conffiles</filename> (one per line). Do not "
"list configuration files that are only modified by the package or have to be "
"set up by the user to work."
msgstr ""
"만약 패키지가 설정 파일을 설치한다면,  패키지가 업그레이드될 때 <application>dpkg</application>는 변경된 "
"사용자의 버전을 간직할 것인지 또는 새 버전을 설치할 것인지를 사용자에게 물어볼 수 있습니다. 이러한 설정 파일은 한줄에 하나씩 "
"<filename>conffiles</filename> 파일 내에 반드시 나열되어야 합니다. 패키지에 의해서만 변경된 설정 파일이나 "
"사용자에 의해 작업을 하여 설정되어야 하는 파일은 나열하지 마십시오."

#: C/appendix.xml:233(term)
msgid "cron.d.ex"
msgstr "cron.d.ex"

#: C/appendix.xml:235(para)
msgid ""
"If your package requires regularly scheduled tasks to operate properly, you "
"can use this file to configure it. If you use this file, rename it to "
"<filename>cron.d</filename>."
msgstr ""
"만약 여러분의 패키지가 적절하게 동작하기 위하여 정기적으로 스케쥴된 작업을 요구한다면, 그것을 설정하기 위하여 이 파일을 사용할 수 "
"있습니다. 만약 이 파일을 사용한다면, 그것을 <filename>cron.d</filename> 로 이름을 변경 하십시오."

#: C/appendix.xml:243(term)
msgid "dirs"
msgstr "dirs"

#: C/appendix.xml:245(para)
msgid ""
"This file specifies the directories that are needed but the normal "
"installation procedure (<application>make install</application>application) "
"somehow doesn't create."
msgstr ""
"이 파일은 필요하지만 보통의 설치 절차(<application>make install</application> 프로그램)가 만들지 않은 "
"디렉토리를 지정 합니다."

#: C/appendix.xml:253(term)
msgid "docs"
msgstr "docs"

#: C/appendix.xml:255(para)
msgid ""
"This file specifies the filenames of documentation files that "
"<application>dh_installdocs</application> will install into the temporary "
"directory."
msgstr ""
"이 파일은 <application>dh_installdocs</application> 가 임시 디렉토리에 설치할 문서 파일들의 파일 "
"이름을 지정 합니다."

#: C/appendix.xml:263(term)
msgid "emacsen-*.ex"
msgstr "emacsen-*.ex"

#: C/appendix.xml:265(para)
msgid ""
"This file specifies Emacs files that will be bytecompiled at install time. "
"They are installed into the temporary directory by "
"<application>dh_installemacsen</application>."
msgstr ""
"이 파일은 설치시에 바이트 컴파일되는 Emacs 파일들을 지정 합니다. 그것들은 "
"<application>dh_installemacsen</application> 에 의해 임시 디렉토리에 설치 됩니다."

#: C/appendix.xml:273(term)
msgid "init.d.ex"
msgstr "init.d.ex"

#: C/appendix.xml:275(para)
msgid ""
"If your package is a daemon that needs to be run at system startup rename "
"this file to <filename>init.d</filename> and adjust it to your needs."
msgstr ""

#: C/appendix.xml:283(term)
msgid "manpage.1.ex and manpage.sgml.ex"
msgstr "manpage.1.ex 와 manpage.sgml.ex"

#: C/appendix.xml:285(para)
msgid ""
"These files are templates for <application>man</application> pages if the "
"package does not already have one."
msgstr ""
"이 파일들은, 패키지가 이미 가지고 있지 않을 경우, <application>man</application> 페이지를 위한 양식들 입니다."

#: C/appendix.xml:292(term)
msgid "menu.ex"
msgstr "menu.ex"

#: C/appendix.xml:294(para)
msgid ""
"This file is used to add your package to the Debian menu. &ubuntu; does not "
"use Debian menu files but uses the <ulink "
"url=\"http://www.freedesktop.org\">freedesktop.org</ulink> standard <ulink "
"url=\"http://standards.freedesktop.org/desktop-entry-"
"spec/latest/\">.desktop</ulink> files."
msgstr ""

#: C/appendix.xml:305(term)
msgid "watch.ex"
msgstr "watch.ex"

#: C/appendix.xml:307(para)
msgid ""
"The package maintainer can use the <application>uscan</application> program "
"and a <filename>watch</filename> file to check for a new upstream source "
"tarball."
msgstr ""
"패키지 관리자는 새로운 업스트림 소스 tarball을 점검하기 위하여 <application>uscan</application> "
"프로그램과 <filename>watch</filename> 파일을 사용할 수 있습니다."

#: C/appendix.xml:315(term)
msgid "ex.package.doc-base"
msgstr "ex.package.doc-base"

#: C/appendix.xml:317(para)
msgid ""
"This file is used to register your package's documentation (other than "
"<application>man</application> and <application>info</application> pages) "
"with <application>doc-base</application>."
msgstr ""
"이 파일은 <application>doc-base</application>로 여러분의 패키지 "
"문서(<application>man</application>과 <application>info</application> 페이지를 제외한) "
"를 등록하기 위하여 사용 합니다."

#: C/appendix.xml:326(term)
msgid "postinst.ex, preinst.ex, postrm.ex, and prerm.ex"
msgstr "postinst.ex, preinst.ex, postrm.ex, 그리고 prerm.ex"

#: C/appendix.xml:328(para)
msgid ""
"These maintainer scripts are run by <application>dpkg</application> when the "
"package is installed, upgraded, or removed."
msgstr ""
"이 패키지 관리자 스크립트는 <application>dpkg</application> 에 의해 패키지가 설치, 업그레이드, 또는 삭제될 "
"때 실행 됩니다."

#: C/appendix.xml:336(para)
msgid ""
"For more details refer to the <ulink url=\"http://www.debian.org/doc/maint-"
"guide/ch-dother.en.html\">Debian New Maintainer's Guide</ulink>."
msgstr ""
"더 상세한 것은 <ulink url=\"http://www.debian.org/doc/maint-guide/ch-"
"dother.en.html\">데비안 새로운 패키지 관리자 안내서</ulink> 를 참조 하십시오."

#: C/appendix.xml:344(title)
msgid "List of <application>debhelper</application> scripts"
msgstr "<application>debhelper</application> 스크립트 목록"

#: C/appendix.xml:349(para)
msgid "dh_builddeb"
msgstr "dh_builddeb"

#: C/appendix.xml:353(para)
msgid "dh_clean"
msgstr "dh_clean"

#: C/appendix.xml:357(para)
msgid "dh_compress"
msgstr "dh_compress"

#: C/appendix.xml:361(para)
msgid "dh_desktop"
msgstr "dh_desktop"

#: C/appendix.xml:365(para)
msgid "dh_fixperms"
msgstr "dh_fixperms"

#: C/appendix.xml:369(para)
msgid "dh_gconf"
msgstr "dh_gconf"

#: C/appendix.xml:373(para)
msgid "dh_gencontrol"
msgstr "dh_gencontrol"

#: C/appendix.xml:377(para)
msgid "dh_iconcache"
msgstr "dh_iconcache"

#: C/appendix.xml:381(para)
msgid "dh_install"
msgstr "dh_install"

#: C/appendix.xml:385(para)
msgid "dh_installcatalogs"
msgstr "dh_installcatalogs"

#: C/appendix.xml:389(para)
msgid "dh_installchangelogs"
msgstr "dh_installchangelogs"

#: C/appendix.xml:393(para)
msgid "dh_installcron"
msgstr "dh_installcron"

#: C/appendix.xml:397(para)
msgid "dh_installdeb"
msgstr "dh_installdeb"

#: C/appendix.xml:401(para)
msgid "dh_installdebconf"
msgstr "dh_installdebconf"

#: C/appendix.xml:405(para)
msgid "dh_installdefoma"
msgstr "dh_installdefoma"

#: C/appendix.xml:409(para)
msgid "dh_installdirs"
msgstr "dh_installdirs"

#: C/appendix.xml:413(para)
msgid "dh_installdocs"
msgstr "dh_installdocs"

#: C/appendix.xml:417(para)
msgid "dh_installemacsen"
msgstr "dh_installemacsen"

#: C/appendix.xml:421(para)
msgid "dh_installexamples"
msgstr "dh_installexamples"

#: C/appendix.xml:425(para)
msgid "dh_installinfo"
msgstr "dh_installinfo"

#: C/appendix.xml:429(para)
msgid "dh_installinit"
msgstr "dh_installinit"

#: C/appendix.xml:433(para)
msgid "dh_installlogcheck"
msgstr "dh_installlogcheck"

#: C/appendix.xml:437(para)
msgid "dh_installlogrotate"
msgstr "dh_installlogrotate"

#: C/appendix.xml:441(para)
msgid "dh_installman"
msgstr "dh_installman"

#: C/appendix.xml:445(para)
msgid "dh_installmenu"
msgstr "dh_installmenu"

#: C/appendix.xml:449(para)
msgid "dh_installmime"
msgstr "dh_installmime"

#: C/appendix.xml:453(para)
msgid "dh_installmodules"
msgstr "dh_installmodules"

#: C/appendix.xml:457(para)
msgid "dh_installpam"
msgstr "dh_installpam"

#: C/appendix.xml:461(para)
msgid "dh_installppp"
msgstr "dh_installppp"

#: C/appendix.xml:465(para)
msgid "dh_installtexfonts"
msgstr "dh_installtexfonts"

#: C/appendix.xml:469(para)
msgid "dh_installwm"
msgstr "dh_installwm"

#: C/appendix.xml:473(para)
msgid "dh_installxfonts"
msgstr "dh_installxfonts"

#: C/appendix.xml:477(para)
msgid "dh_installxmlcatalogs"
msgstr "dh_installxmlcatalogs"

#: C/appendix.xml:481(para)
msgid "dh_link"
msgstr "dh_link"

#: C/appendix.xml:485(para)
msgid "dh_listpackages"
msgstr "dh_listpackages"

#: C/appendix.xml:489(para)
msgid "dh_makeshlibs"
msgstr "dh_makeshlibs"

#: C/appendix.xml:493(para)
msgid "dh_md5sums"
msgstr "dh_md5sums"

#: C/appendix.xml:497(para)
msgid "dh_perl"
msgstr "dh_perl"

#: C/appendix.xml:501(para)
msgid "dh_python"
msgstr "dh_python"

#: C/appendix.xml:505(para)
msgid "dh_scrollkeeper"
msgstr "dh_scrollkeeper"

#: C/appendix.xml:509(para)
msgid "dh_shlibdeps"
msgstr "dh_shlibdeps"

#: C/appendix.xml:513(para)
msgid "dh_strip"
msgstr "dh_strip"

#: C/appendix.xml:517(para)
msgid "dh_testdir"
msgstr "dh_testdir"

#: C/appendix.xml:521(para)
msgid "dh_testroot"
msgstr "dh_testroot"

#: C/appendix.xml:525(para)
msgid "dh_usrlocal"
msgstr "dh_usrlocal"

#: C/appendix.xml:0(None)
msgid "translator-credits"
msgstr "atie H <atie.at.matrix@gmail.com>, 2005, 2006."