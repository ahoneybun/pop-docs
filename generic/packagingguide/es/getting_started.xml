<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % pg-common SYSTEM "../pg-common.ent">
%pg-common;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
]>
<chapter id="gs-chap" status="review">
	<title>Primeros pasos</title>

	<sect1 id="gs-bin_source" status="complete">
		<title>Paquetes binarios y fuentes</title>
		
		<para>Most users of a Debian-based distribution such as <phrase>Ubuntu</phrase> will never have
			to deal with the actual source code that is used to create all of the
			applications on their computers. Instead, the source code is compiled into
			<emphasis>binary</emphasis> packages from
			the <emphasis>source</emphasis> package that contains both
			the source code itself and the rules for making the binary
			package. Packagers upload the source packages with their
			changes to the build systems that then compile the binary
			packages for each architecture. A separate system
			distributes the generated binary .deb files and source
			changes to the repository mirrors.</para>

	</sect1>

	<sect1 id="gs-tools" status="review">
		<title>Herramientas de empaquetado</title>
		
		<para>Hay muchas herramientas escritas específicamente pata los sistemas basados en Debian. Muchas de ellas no son <emphasis>esenciales</emphasis> para crear paquetes pero que son de gran ayuda y a menudo automatizan tareas repetitivas. Sus páginas <application>man</application> e <application>info</application> son una buena fuente de información. De todas maneras, la siguiente es una lista de paquetes que se estiman necesarios para empezar a empaquetar.</para>

		<variablelist>
			<varlistentry>
				<term><application>build-essential</application></term>
				<listitem><para>es un metapaquete que depende de <application>libc6-dev</application>, <application>gcc</application>, <application>g++</application>, <application>make</application>, y <application>dpkg-dev</application>. Un paquete con el que podrías no estar familiarizado es </para></listitem>
			</varlistentry>

			<varlistentry>
				<term><application>devscripts</application></term>
				<listitem><para>contiene muchos scripts que facilitan el trabajo de mantenimiento del empaquetador. Algunos de los más usados son <application>debdiff</application>, <application>dch</application>, <application>debuild</application>, y <application>debsign</application>.</para></listitem>
			</varlistentry>

			<varlistentry><term><application>debhelper</application> y <application>dh-make</application></term>
				<listitem><para>son scripts que automatizan tareas comunes de empaquetado. <application>dh-make</application> puede ser usado para realizar la "debianización" inicial y proporciona muchos ficheros ejemplo.</para></listitem>
			</varlistentry>
				
			<varlistentry><term><application>diff</application> y <application>patch</application></term> <listitem><para>son usados para crear y aplicar parches, respectivamente. Se usan extensamente en el empaquetado por su mayor facilidad, limpieza, y eficacia para representar pequeños cambios como parches en vez de tener múltiples copias de un fichero.</para></listitem> </varlistentry>
			
			<varlistentry><term><application>gnupg</application></term>
				<listitem><para>es un completo y libre reemplazo de PGP usado para firmar ficheros digitalmente (incluidos paquetes).</para></listitem>
			</varlistentry>
				
			<varlistentry><term><application>fakeroot</application></term>
				<listitem><para>simula la ejecución de un comando con privilegios de root. Es útil para crear paquetes binarios como un usuario normal.</para></listitem>
			</varlistentry>
			
			<varlistentry><term><application>lintian</application> y <application>linda</application></term>
				<listitem><para>analiza los paquetes de Debian e informa de errores y violaciones de política. Contienen comprobaciones automatizadas para muchos de los aspectos de la Política de Debian así como para errores comunes</para></listitem>
			</varlistentry>
			
			<varlistentry><term><application>pbuilder</application></term>
				<listitem><para>genera un sistema chroot y construye un paquete dentro del chroot. Es un sistema ideal para comprobar que un paquete contiene las dependencias correctas de construcción y para construir paquetes limpios para probarlos y distribuirlos.</para></listitem> </varlistentry>
		</variablelist>

	</sect1>

		
	<sect1 id="gs-pbuilder" status="complete" xreflabel="pbuilder">
		<title>El Constructor Personal: pbuilder</title>
		
		<para>Using pbuilder as a package builder allows you to build
			the package from within a chroot environment. You can
			build binary packages without using
			<application>pbuilder</application>, but you must have all the build
			dependencies installed on your system first. However, pbuilder allows the
			packager to check the build dependencies because the package is built within a
			minimal <phrase>Ubuntu</phrase> installation, and the build dependencies are downloaded
			according to the <filename>debian/control</filename> file.</para>

		<para>The following is a brief guide to installing, using, and
			updating a pbuilder environment, however, there are many
			details of <application>pbuilder</application> usage that
			are outside the realm of this
			guide. The <application>pbuilder</application> man page
			has lots of information and should be consulted if you
			have problems or need more detailed information.</para>

	<sect2>
		<title>Instalando y configurando un entorno pbluider</title>
		
		<para>The first, and perhaps most obvious, thing to do is to
		install <application>pbuilder</application>. If you want to
		create a <application>pbuilder</application> for a release
		newer than the one you currently have installed, you will need
		to manually install the <application>debootstrap</application>
		.deb (from <ulink url="http://packages.ubuntu.com">http://packages.ubuntu.com</ulink>) from the
		newer release. To create a pbuilder execute:</para>
		
		<screen>
sudo pbuilder create --distribution &lt;distro&gt; \
	--othermirror "deb http://archive.ubuntu.com/ubuntu &lt;distro&gt; universe multiverse"
		</screen>

		<para>where &lt;distro&gt; is the release you want
			(<emphasis>edgy</emphasis> for instance) to create the
			pbuilder for. If you would like to create more than one
			<application>pbuilder</application> environment you can
			append the <emphasis>--basetgz</emphasis> flag with the
			desired location for the
			compressed <application>pbuilder</application>
			environment.  The default
			is <filename>/var/cache/pbuilder/base.tgz</filename>.  If
			you do choose to use <emphasis>--basetgz</emphasis> you
			will need to use it with the
			other <application>pbuilder</application> commands
			so <application>pbuilder</application> knows which
			compressed build environment to use.</para>
		
		<note><para>Creating a pbuilder environment will take some
		time as <application>debootstrap</application> essentially
		downloads a minimal <phrase>Ubuntu</phrase> installation.</para></note>

		<tip><para>A more flexible way to create a pbuilder (and
		perhaps multiple pbuilders) is to you a shell script.</para></tip>

	</sect2>	
	
	<sect2>
		<title>Usando pbuilder</title>
		<para>Ahora que ya estas  ejecutando pbuilder puedes construir paquetes desde su paquete fuente ejecutando:</para>

		<screen>sudo pbuilder build *.dsc</screen>

		<para>Esto construirá todos los paquetes fuente presentes del directorio. Los .debs resultantes y paquetes fuentes pueden ser encontrados en <filename>/var/cache/pbuilder/result/</filename> (puede ser cambiado con la opción <emphasis>--buildresult</emphasis>).</para>

	</sect2>

	<sect2>
		<title>Actualizando pbuilder</title>
		
		<para>You should always have a current pbuilder whenever you are testing your
			source packages, especially when you are building for a development
			release that is rapidly changing, to ensure that the dependencies are
			properly found. To update your pbuilder, use:</para>

		<screen>sudo pbuilder update</screen>

		<para/>
		
		<para>If you would like to upgrade you pbuilder to a new release you
			can use <application>pbuilder update</application> in combination
			with the <emphasis>--distribution</emphasis> flag:</para>

		<screen>sudo pbuilder update --distribution &lt;newdistro&gt; --override-config</screen>

	</sect2>
	
	<sect2>
		<title>Multiple pbuilders</title>
		
		<para>All of the information so far in this section on <application>pbuilder</application> has applied to having a single <application>pbuilder</application>. If you want to create more than one <application>pbuilder</application> you can create a shell script to handle the configuration for each <application>pbuilder</application> you want to create. An example of such a shell script can be found in <filename>/usr/share/doc/pbuilder/examples/pbuilder-distribution.sh</filename>. You can simply copy this example file somewhere in your path (putting it in <filename>~/bin/</filename> and adding this directory to your execution path is convenient) and then edit it according your needs. Normally you will need to only change DISTRIBUTION and add --othermirror as above. You can then call this script instead of <application>pbuilder</application> directly.</para></sect2>
	
</sect1>

</chapter>

