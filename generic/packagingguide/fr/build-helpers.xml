<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % pg-common SYSTEM "../pg-common.ent">
%pg-common;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
<!ENTITY ubuntu '<phrase>Ubuntu</phrase>'>
]>
<chapter id="bh-chap" status="writing">
	<title>Assitants de construction</title>
	<para>De bons trucs à propos de debhelper et CDBS se trouvent ici.</para>

	<sect1 id="basic-debhelper" status="complete">
		<title>Créer des paquets avec debhelper</title>
		
		<important><para><emphasis role="bold">Prérequis : </emphasis> Les prérequis de <xref linked="basic-scratch"/> ainsi que debhelper et dh-make</para> </important>

		<para>En tant qu'empaqueteur, vous créerez rarement des paquets de zéro comme nous venons de le faire dans la section précédente. Comme vous pouvez l'imaginer, plusieurs des tâches et une grande partie de l'information dans le fichier <filename>rules</filename> sont communs aux paquets. Afin de faciliter et de rendre plus efficace la mise en paquets, vous pouvez utiliser <application>debhelper</application> pour vous aider dans ces tâches. Dephelper est un ensemble de scripts Perl (préfixés par <emphasis>dh_</emphasis>) qui automatisent le processus de construction de paquets. Avec ces scripts, la construction d'un paquet Debian devient passablement simple.</para>

		<para>In this example, we will again build the GNU Hello package, but this
			time we will be comparing our work to the Ubuntu
			<application>hello-debhelper</application> package. Again,
			create a directory where you will be working: </para>

		<screen>mkdir ~/hello-debhelper
cd ~/hello-debhelper
wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz
mkdir ubuntu
cd ubuntu</screen>
		

		<para>Then, get the Ubuntu source package:</para>

		<screen>apt-get source hello-debhelper
cd ..</screen>

		<para>Comme dans l'exemple précédent, la première chose que nous devons faire et de décompresser l'archive tar originale (amont - upstream).</para>

		<screen>tar -xzvf hello-2.1.1.tar.gz</screen>

		<para>Au lieu de copier l'archive tar originale vers <filename>hello_2.1.1.orig.tar.gz</filename> comme nous l'avons fait dans l'exemple précédent, nous allons laisser <application>dh_make</application> faire le travail pour nous. La seule chose à faire est de renommer le paquet source afin qu'il soit de la forme <emphasis>&lt;nom_de_paquet&gt;-&lt;version&gt;</emphasis> ou nom_de_paquet est en minuscules. Dans ce cas, déballer simplement l'archive produit un répertoire source correctement nommé et nous pouvons nous y placer :</para>

		<screen>cd hello-2.1.1</screen>

		<para>Pour créer la «debianisation» initiale de la source nous allons utiliser <application>dh_make</application></para>

		<screen>
dh_make -e votre.adrresse@mainteneur -f ../hello-2.1.1.tar.gz
		</screen>

		<para>dh_make vous posera ensuite une série de questions:</para>

		<screen>
Type of package: single binary, multiple binary, library, kernel module or cdbs?
[s/m/l/k/b] <emphasis role="bold">s</emphasis></screen>

		<screen>
Maintainer name : Captain Packager
Email-Address : packager@coolness.com
Date : Thu, 6 Apr 2006 10:07:19 -0700
Package Name : hello
Version : 2.1.1
License : blank
Type of Package : Single
Hit &lt;enter&gt; to confirm: <emphasis role="bold">Entrée</emphasis></screen>

		<caution><para>Ne lancez <application>dh_make -e</application> qu'une seule fois. Si vous le lancez une seconde fois, il ne fonctionnera pas correctement. Si vous voulez effectuer une modification, ou si vous avez fait une erreur, supprimer le répertoire source et refaites une nouvelle décompression de l'archive tar originale. Ensuite vous pourrez revenir dans le répertoire source et réessayer.</para></caution>
		
		<para>La commande <application>dh_make -e</application> fait deux choses :</para>

		<orderedlist> 
			
			<listitem><para>Crée le fichier <filename>hello_2.1.1.orig.tar.gz</filename> dans le répertoire parent.</para></listitem>

			<listitem><para>Crée les fichiers de base utilisés dans <filename>debian/</filename> et plusieurs fichiers de gabarit (template) (.ex) qui peuvent être utiles.</para></listitem>
			
		</orderedlist>

		<para>Le programme <application>Hello</application> n'est pas très compliqué, et comme nous l'avons vu dans <xref linkend="basic-scratch"/>, la mise en paquet ne demande pas beaucoup plus que les fichiers basiques. À cet effet, retirons les fichiers <filename>.ex</filename> :</para>

		<screen>cd debian
rm *.ex *.EX</screen>

		<para>Pour <application>hello</application>, vous aurez aussi besoin des fichiers  <filename>README.Debian</filename> (fichier README (en français : LISEZ-MOI) pour les choses spécifiques à Debian, pas le README du programme), <filename>dirs</filename> (utilisé par <application>dh_installdirs</application> pour créer les répertoires nécessaires), <filename>docs</filename> (utilisé par <application>dh_installdocs</application> pour installer la documentation du programme) ou <filename>info</filename> (utilisé par <application>dh_installinfo</application> pour installer le fichier d'information) dans le répertoire <filename>debian</filename>. Pour plus d'information sur ces fichiers, voyez <xref linkend="appendix-examples"/>.</para>

		<para>À ce moment, vous ne devriez avoir que les fichiers <filename>changelog</filename>, <filename>compat</filename>, <filename>control</filename>, <filename>copyright</filename>, et <filename>rules</filename> dans le répertoire <filename>debian</filename>. Depuis <xref linkend="basic-scratch"/>, le seul nouveau fichier est <filename>compat</filename>, qui est un fichier contenant la version du <application>debhelper</application> (dans ce cas 4) utilisé.</para>

		<para>Dans ce cas, vous allez devoir faire un léger ajustement du fichier <filename>changelog</filename> pour refleter le changement du nom de paquet de <application>hello</application> en <application>hello-debhelper</application> :</para>

		<screen>
hello-debhelper (2.1.1-1) dapper; urgency=low

  * Initial release

  -- Captain Packager &lt;packager@coolness.com&gt; Thu, 6 Apr 2006 10:07:19 -0700</screen>
		
		<para>By using <application>debhelper</application>, the only
			things we need to change in <filename>control</filename> are the
			name (substituting <application>hello</application> for
			<application>hello-debhelper</application>) and adding
			<application>debhelper (&gt;= 4.0.0)</application> to the
			<emphasis>Build-Depends</emphasis> field for the source
			package. The Ubuntu package for
			<application>hello-debhelper</application> looks like:</para>

		<screen>
Source: hello-debhelper
Section: devel
Priority: extra
Maintainer: Capitan Packager &lt;packager@coolness.com&gt;
Standards-Version: 3.6.1
Build-Depends: debhelper (&gt;= 4)

Package: hello-debhelper
Architecture: any
Depends: ${shlibs:Depends}
Conflicts: hello
Provides: hello
Replaces: hello
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting. It
 allows non-programmers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).
 
This is the same as the hello package, except it uses debhelper to
 make the deb. Please see debhelper as to what it is.
		</screen>

		<para>We can copy the <filename>copyright</filename> file and the
			<filename>postinst</filename> and <filename>prerm</filename>
			scripts from the Ubuntu
			<application>hello-debhelper</application> package, as they have
			not changed since <xref linkend="basic-scratch"/>. We will also
			copy the <filename>rules</filename> file so we can inspect
			it.</para>

		<screen>
cp ../../ubuntu/hello-debhelper-2.1.1/debian/copyright .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/postinst .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/prerm .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/rules .</screen>

		<para>Le dernier fichier que nous devons examiner est <filename>rules</filename>, où la puissance des scripts <application>debhelper</application> peut être remarquée. La version <application>debhelper</application> de <filename>rules</filename> est légèrement plus compacte (54 lignes contre 72 lignes dans la version issue de <xref linkend="basic-scratch-rules"/>).</para>

		<para>La version de <application>debhelper</application> ressemble à :</para>

		<screen> #!/usr/bin/make -f

package = hello-debhelper

CC = gcc
CFLAGS = -g -Wall

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif

#export DH_VERBOSE=1

clean:
        dh_testdir
        dh_clean
        rm -f build
        -$(MAKE) -i distclean

install: build
        dh_clean
        dh_installdirs
        $(MAKE) prefix=$(CURDIR)/debian/$(package)/usr \
                mandir=$(CURDIR)/debian/$(package)/usr/share/man \
                infodir=$(CURDIR)/debian/$(package)/usr/share/info \
                install

build:
        ./configure --prefix=/usr
        $(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
        touch build

binary-indep: install
# There are no architecture-independent files to be uploaded
# generated by this package. If there were any they would be
# made here.

binary-arch: install
        dh_testdir -a
        dh_testroot -a
        dh_installdocs -a NEWS
        dh_installchangelogs -a ChangeLog
        dh_strip -a
        dh_compress -a
        dh_fixperms -a
        dh_installdeb -a
        dh_shlibdeps -a
        dh_gencontrol -a
        dh_md5sums -a
        dh_builddeb -a

binary: binary-indep binary-arch

.PHONY: binary binary-arch binary-indep clean checkroot
			</screen>

		<para>Vous remarquerez que les tâches comme tester si vous êtes dans le bon répertoire (<application>dh_testdir</application>), s'assurer que vous construisez le paquet avec les privilèges super-utilisateur (<application>dh_testroot</application>), installer la documentation (<application>dh_installdocs</application> et <application>dh_installchangelogs</application>), et nettoyer après la construction (<application>dh_clean</application>) sont prises en charge automatiquement. De nombreux paquets beaucoup plus complexes que <application>hello</application> ont des fichiers <filename>rules</filename> qui ne sont pas plus lourds car les scripts <application>debhelper</application> prennent en charge la plupart des tâches. Pour une liste complète des scripts <application>debhelper</application>, référez vous aux pages de <application>man</application>. C'est un exercice utile de lire la page de man (elle sont courtes et bien écrites) pour chaque script utilisé dans le fichier <filename>rules</filename> ci-dessus.</para>

			<sect2>
			<title>Construire le paquet source</title>
			
			<para>Maintenant que nous avons parcouru les fichiers du répertoire <filename>debian</filename> pour <application>hello-debhelper</application>, nous pouvons construire les paquets source et binaire. Tout d'abord revenons dans le répertoire source :</para>
			
			<para><screen>cd ..</screen></para>
			
			<para>Maintenant nous construisont le paquet source en utilisant <application>debuild</application>, un script d'emballage pour <application>dpkg-buildpackage</application> :</para>
			
			<para><screen>debuild -S</screen></para>
			
			<para>le paquet binaire en utilisant <application>pbuilder</application> :</para>
			
			<para><screen>sudo pbuilder build ../*.dsc</screen></para>

			<para>et finalement nous contrôlons le paquet source pour les erreurs courantes en utilisant <application>lintian</application> :</para>
			
			<screen>cd ..
lintian -i *.dsc</screen>
			
		</sect2>
	
	</sect1>

	<sect1 id="basic-cdbs" status="complete">
		<title>Empaqueter avec CDBS</title>

		<para>CDBS est un outil qui utilise debhelper pour afin de rendre la construction et la maintenance de paquets Debian encore plus simple. Il a plusieurs avantages :</para>

			<itemizedlist>
				<listitem><para>Il produit un <filename>debian/rules</filename> court, lisible et efficace.</para></listitem>
				
				<listitem><para>Il automatise debhelper et autotools pour vous, afin de ne pas avoir à se préoccuper des tâches répétitives.</para></listitem>
				
				<listitem><para>Il vous aide à vous concentrer sur les problèmes d'empaquetage plus importants, parce qu'il vous aide sans limiter la personnalisation.</para></listitem>
				
				<listitem><para>Ses fonctionnalités ont été largement testées, afin que vous ne dussiez point recourir à de sombres bidouilles pour résoudre des problèmes communs.</para></listitem>
				
				<listitem><para>Passer à CDBS est simple</para></listitem>
				
				<listitem><para>Il est extensible</para></listitem>
			</itemizedlist>
		
		<sect2>
			<title>Utiliser CDBS dans les paquets</title>
		
			<para>Using CDBS for Ubuntu packages is very easy. After adding 
				<application>cdbs</application> to the Build-Depends in 
				<filename>debian/control</filename>, a basic
				<filename>debian/rules</filename> file using CDBS can fit in 2 lines. 
				For a simple C/C++ application with no extra rules, such as
				<application>hello</application>, <filename>debian/rules</filename> can
				look like this :</para>

			<screen>#!/usr/bin/make -f
				
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/class/autotools.mk</screen>

			<para>C'est tout ce dont vous avez besoin pour construire un programme ! CDBS prend en charge l'installation et le nettoyage. Vous pouvez alors utiliser les fichiers <filename>.install</filename> et <filename>.info</filename> pour ajuster votre paquet avec les fonctions debhelper usuelles dans les diverses sections de <filename>debian/rules</filename>.</para>

			<warning><para>N'utilisez pas DEB_AUTO_UPDATE_DEBIAN_CONTROL:=yes pour modifier automatiquement <filename>debian/control</filename>. Cela peut engendrer des défauts, et Debian le considère comme un motif pour rejeter l'entrée d'un paquet dans les archives. Pour plus d'information, voyez <ulink url="http://ftp-master.debian.org/REJECT-FAQ.html"> http://ftp-master.debian.org/REJECT-FAQ.html</ulink>.</para></warning>
			
			<para>Comme vous pouvez le voir, CDBS travaille principalement en plaçant des fichiers Makefile <filename>.mk</filename> dans <filename>debian/rules</filename>. Le paquet <application>cdbs</application> fournit de tel fichiers dans filename&gt;/usr/share/cdbs/1/</para>

			<itemizedlist>
				
				<listitem><para><filename>rules/debhelper.mk</filename> : appelle debhelper dans toutes les sections requises</para></listitem>
			
				<listitem><para><filename>rules/dpatch.mk</filename> : Vous permet d'utiliser dpatch pour patcher facilement la source</para></listitem>
				
				<listitem><para><filename>rules/simple-patchsys.mk</filename> : Fournit un moyen très simple pour patcher la source</para></listitem>
				
				<listitem><para><filename>rules/tarball.mk</filename>: Vous permet de construire des paquets en utilisant l'archive compressé dans le paquet</para></listitem>
				
				<listitem><para><filename>class/autotools.mk</filename> : Appelle autotools dans toutes les sections requises</para></listitem>
				
				<listitem><para><filename>class/gnome.mk</filename> : Construit les applications GNOME (requiert un champ Build-Depends adéquat dans <filename>debian/control</filename>)</para></listitem>
				
				<listitem><para><filename>class/kde.mk</filename> : Construit les applications KDE (requiert un champ Build-Depends adéquat dans <filename>debian/control</filename>)</para></listitem>
				
				<listitem><para><filename>class/python-distutils.mk</filename> : Facilite l'empaquetage des programmes Python</para></listitem>
			
			</itemizedlist>
		</sect2>
		
		<sect2>
			<title>Plus d'information sur CDBS</title>
		
			<para>Pour plus d'information sur CDBS, consulter le guide de Marc Dequènes sur <ulink url="https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml">https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml</ulink>.</para>
		
		</sect2>
	</sect1>


</chapter>

