<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % pg-common SYSTEM "../pg-common.ent">
%pg-common;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
]>
<chapter id="gs-chap" status="review">
	<title>Prise en main</title>

	<sect1 id="gs-bin_source" status="complete">
		<title>Paquets sources et binaires</title>
		
		<para>La plupart des utilisateurs d'une distribution basée sur Debian comme &ubuntu; n'auront jamais à faire au code source actuel qui est utilisé pour créer toutes les applications qu'ils utilisent sur leur ordinateur. Au lieu de cela, le code source est compilé en paquets <emphasis>binaires</emphasis> à partir du paquet <emphasis>source</emphasis> qui contient à la fois le code source lui même et les règles pour créer un paquet binaire. Les empaqueteurs téléversent leurs paquets source avec leurs modifications sur des systèmes de construction qui compilent alors les paquets binaires pour chaque architecture. Un autre système distribue les fichiers .deb binaires générés et les modifications de la source sur les miroirs des dépôts.</para>

	</sect1>

	<sect1 id="gs-tools" status="review">
		<title>Outils de création de paquets</title>
		
		<para>Il existe un grand nombre d'outils écrits spécifiquement pour la création de paquets sur les systèmes basés sur Debian. Beaucoup d'entre eux ne sont pas <emphasis>essentiels</emphasis> pour créer des paquets mais sont très pratiques et permettent souvent d'automatiser des tâches répétitives. Leur pages de <application>man</application> et <application>info</application> sont de bonnes sources d'information. Cependant, la liste suivante regroupe des paquets absolument nécessaires pour commencer à créer des paquets :</para>

		<variablelist>
			<varlistentry>
				<term><application>build-essential</application></term>
				<listitem><para>est un méta-paquet qui dépend de <application>libc6-dev</application>, <application>gcc</application>, <application>g++</application>, <application>make</application>, et <application>dpkg-dev</application>. Il est possible que vous ne soyez pas familiarisé avec <application>dpkg-dev</application>. Il contient des outils comme <application>dpkg-buildpackage</application> et <application>dpkg-source</application>, qui sont utilisés pour créer, dépaqueter et construire des paquets sources et binaires.</para></listitem>
			</varlistentry>

			<varlistentry>
				<term><application>devscripts</application></term>
				<listitem><para>contient un grand nombre de scripts qui rendent le travail de maintenance de l'empaqueteur plus facile. Parmi les plus utilisés, on trouve <application>debdiff</application>, <application>dch</application>, <application>debuild</application>, et <application>debsign</application>.</para></listitem>
			</varlistentry>

			<varlistentry><term><application>debhelper</application> et <application>dh-make</application></term>
				<listitem><para>sont des scripts qui automatisent des tâches communes de création de paquets. <application>dh-make</application> peut être utilisé pour initier la « debianisation » et procure un grand nombre de fichiers d'exemple.</para></listitem>
			</varlistentry>
				
			<varlistentry><term><application>diff</application> et <application>patch</application></term> <listitem><para>sont utilisés respectivement, pour créer et appliquer des correctifs (patchs). Ils sont utilisés intensivement pour la mise en paquets parce qu'il est plus facile, plus propre et plus efficace de représenter de petits changements par des correctifs que d'avoir plusieurs copies d'un seul fichier.</para></listitem> </varlistentry>
			
			<varlistentry><term><application>gnupg</application></term>
				<listitem><para>est une alternative complète, libre et gratuite à PGP utilisée pour signer numériquement des fichiers (et des paquets).</para></listitem>
			</varlistentry>
				
			<varlistentry><term><application>fakeroot</application></term>
				<listitem><para>simule le lancement d'une commande avec les privilèges de super-utilisateur. Ceci est utile pour créer des paquets binaires en tant qu'utilisateur normal.</para></listitem>
			</varlistentry>
			
			<varlistentry><term><application>lintian</application> et <application>linda</application></term>
				<listitem><para>dissèquent les paquets Debian et reportent les bogues et violations de la ligne de conduite Debian. Il contiennent des vérifications automatisées pour un certain nombre d'aspects de la ligne de conduite Debian ainsi que pour les erreurs communes.</para></listitem>
			</varlistentry>
			
			<varlistentry><term><application>pbuilder</application></term>
				<listitem><para>crée un système chroot et construit un paquet dans l'environnement chroot. C'est un système idéal à utiliser pour vérifier si un paquet contient les dépendances de constructions correctes et pour construire des paquets à tester et distribuer.</para></listitem> </varlistentry>
		</variablelist>

	</sect1>

		
	<sect1 id="gs-pbuilder" status="complete" xreflabel="pbuilder">
		<title>Le constructeur personnel : pbuilder</title>
		
		<para>Utiliser pbuilder comme outil de création de paquet vous permet de construire le paquet depuis un environnement chroot. Vous pouvez construire des paquets binaires sans utiliser <application>pbuilder</application>, mais vous devez d'abord avoir installé toutes les dépendances de construction. Ce pendant, pbuilder permet à l'empaqueteur de vérifier les dépendances de construction car le paquet est construit au sein d'une installation &ubuntu; minimale, et les dépendances de construction sont téléchargées en accord avec le fichier <filename>debian/control</filename> file.</para>

		<para>Ceci est un guide rapide pour installer, utiliser et mettre à jour un environnement pbuilder. Il y a cependant beaucoup de détails d'utilisation de <application>pbuilder</application> en dehors du champ de ce guide. La page de man de <application>pbuilder</application> contient un grand nombre d'informations et devrait être consultées si vous avez des problèmes ou avez besoin d'informations détaillées.</para>

	<sect2>
		<title>Installation et configuration d'un environnement pbuilder</title>
		
		<para>La première, et sans doute la plus évidente, des choses à faire est d'installer <application>pbuilder</application>. Si vous voulez créer un <application>pbuilder</application> pour une version plus récente que celle que vous avez installée à ce moment, vous devrez installer manuellement le <application>debootstrap</application> .deb (depuis <ulink url="&p.u.c;">&p.u.c;</ulink>) de la version plus récente. Pour créer un pbuilder faites :</para>
		
		<screen>
sudo pbuilder create --distribution &lt;distro&gt; \
	--othermirror "deb http://archive.ubuntu.com/ubuntu &lt;distro&gt; universe multiverse"
		</screen>

		<para>où &lt;distro&gt; est la version de distribution(<emphasis>&ubuntuplus1;</emphasis> for instance) pour laquelle vous voulez créer le pbuilder. Si vous voulez créer plus d'un environnement <application>pbuilder</application> vous pouvez ajouter l'argument  <emphasis>--basetgz</emphasis> avec l'emplacement désiré pour l'environnement <application>pbuilder</application> compressé. L'emplacement par défaut est <filename>/var/cache/pbuilder/base.tgz</filename>. Si vous faites le choix d'utiliser <emphasis>--basetgz</emphasis> vous devrez également l'utiliser avec l'autre commande <application>pbuilder</application> afin que <application>pbuilder</application> sache quel environnement de construction compressé il doit utiliser.</para>
		
		<note><para>Créer un environnement pbuilder prendra un certain temps car <application>debootstrap</application> télécharge essentiellement une installation &ubuntu; minimale.</para></note>

		<tip><para>Une manière plus souple pour vous de construire un pbuilder (et sans doute de multiple pbuilders) est un script shell.</para></tip>

	</sect2>	
	
	<sect2>
		<title>Utiliser le pbuilder</title>
		<para>Maintenant que vous avez un pbuilder qui fonctionne, vous pouvez construire des paquets binaires depuis les paquets sources en invoquant :</para>

		<screen>sudo pbuilder build *.dsc</screen>

		<para>Cela va construire tous les paquets sources dans le répertoire courant. Les .debs résultants et les paquets sources se situent dans <filename>/var/cache/pbuilder/result/</filename> (ceci peut être changé avec le paramètre <emphasis>--buildresult</emphasis>).</para>

	</sect2>

	<sect2>
		<title>Mettre à jour pbuilder</title>
		
		<para>Vous devez toujours avoir pbuilder à jour, même lorsque vous testez vos paquets source, et surtout si vous travaillez sur une distribution de développement qui change rapidement, pour être sûr que les dépendances soient correctement trouvées. Pour mettre à jour pbuilder, utilisez :</para>

		<screen>sudo pbuilder update</screen>

		<para/>
		
		<para>Si vous voulez que mettre votre pbuilder à jour vers une nouvelle version, vous pouvez utiliser <application>pbuilder update</application> en combinaison avec le marqueur <emphasis>--distribution</emphasis> :</para>

		<screen>sudo pbuilder update --distribution &lt;newdistro&gt; --override-config</screen>

	</sect2>
	
	<sect2>
		<title>Multiple pbuilders</title>
		
		<para>All of the information so far in this section on <application>pbuilder</application> has applied to having a single <application>pbuilder</application>. If you want to create more than one <application>pbuilder</application> you can create a shell script to handle the configuration for each <application>pbuilder</application> you want to create. An example of such a shell script can be found in <filename>/usr/share/doc/pbuilder/examples/pbuilder-distribution.sh</filename>. You can simply copy this example file somewhere in your path (putting it in <filename>~/bin/</filename> and adding this directory to your execution path is convenient) and then edit it according your needs. Normally you will need to only change DISTRIBUTION and add --othermirror as above. You can then call this script instead of <application>pbuilder</application> directly.</para></sect2>
	
</sect1>

</chapter>

