<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
<!-- NAMES --><!ENTITY canonical-name "Canonical Ltd.">
<!ENTITY project-name "Ubuntu Documentation Project">
<!ENTITY ubuntu "<phrase>Ubuntu</phrase>">
<!-- VERSIONS --><!ENTITY distro-version "Dapper Drake">
<!ENTITY distro-rev "6.06 LTS">
<!ENTITY distro-release-date "June 2006">
<!ENTITY linux-kernel-version "2.6.15">
<!ENTITY gcc-version "4.0.3">
<!ENTITY glibc-version "2.3.6">
<!ENTITY python-version "2.4.3">
<!-- AUTHORS --><!ENTITY author-ubuntu-documentation-project SYSTEM "../common/authors/ubuntu-documentation-project.xml">
<!ENTITY author-christoph-haas SYSTEM "../common/authors/christoph-haas.xml">
<!ENTITY author-alexander-poslavsky SYSTEM "../common/authors/alexander-poslavsky.xml">
<!ENTITY author-alan-hood SYSTEM "../common/authors/alan-hood.xml">
<!ENTITY author-johnathon-hornbeck SYSTEM "../common/authors/johnathon-hornbeck.xml">
<!ENTITY author-nick-loeve SYSTEM "../common/authors/nick-loeve.xml">
<!ENTITY author-gordon-ingram SYSTEM "../common/authors/gordon-ingram.xml">
<!ENTITY author-sean-wheller SYSTEM "../common/authors/sean-wheller.xml">
<!ENTITY author-enrico-zini SYSTEM "../common/authors/enrico-zini.xml">
<!ENTITY author-kevin-muligan SYSTEM "../common/authors/kevin-muligan.xml">
<!ENTITY author-ari-torhamo SYSTEM "../common/authors/ari-torhamo.xml">
<!ENTITY author-jeff-schering SYSTEM "../common/authors/jeff-schering.xml">
<!ENTITY author-corey-burger SYSTEM "../common/authors/corey-burger.xml">
<!ENTITY author-niel-tallim SYSTEM "../common/authors/niel-tallim.xml">
<!ENTITY author-henry-meyerding SYSTEM "../common/authors/henry-meyerding.xml">
<!ENTITY author-matthew-east SYSTEM "../common/authors/matthew-east.xml">
<!ENTITY author-jerome-gotangco SYSTEM "../common/authors/jerome-gotangco.xml">
<!ENTITY author-johnathan-jesse SYSTEM "../common/authors/johnathan-jesse.xml">
<!ENTITY author-greg-taylor SYSTEM "../common/authors/greg-taylor.xml">
<!ENTITY author-troy-williams SYSTEM "../common/authors/troy-williams.xml">
<!ENTITY author-matt-galvin SYSTEM "../common/authors/matt-galvin.xml">
<!ENTITY author-robert-stoffers SYSTEM "../common/authors/robert-stoffers.xml">
<!ENTITY author-jordan-mantha SYSTEM "../common/authors/jordan-mantha.xml">
<!ENTITY author-venkat-raghavan SYSTEM "../common/authors/venkat-raghavan.xml">
<!ENTITY author-brian-burger SYSTEM "../common/authors/brian-burger.xml">
<!ENTITY author-rocco-stanzione SYSTEM "../common/authors/rocco-stanzione.xml">
<!ENTITY glossary SYSTEM "../common/C/glossary.xml">
<!-- LEGAL URLs --><!ENTITY gpl-url '<ulink url="http://www.gnu.org/licenses/gpl.html">GNU General Public License</ulink>'>
<!ENTITY cc "http://creativecommons.org/">
<!ENTITY cc-attrib '<ulink url="http://creativecommons.org/licenses/by-sa/2.0/">Attribution-ShareAlike 2.0</ulink>'>
<!ENTITY cc-fulldeed-url "http://creativecommons.org/licenses/by-sa/2.0/legalcode/">
<!ENTITY fdl-url '<ulink url="http://www.gnu.org/copyleft/fdl.html">GNU Free Documentation License</ulink>'>
<!ENTITY cc-disclaimer-url "http://creativecommons.org/licenses/disclaimer-popup?lang=en">
<!-- CANONICAL URL RESOURCES --><!ENTITY canonical-url "http://www.canonical.com">
<!-- UBUNTU URL RESOURCES --><!ENTITY ubuntu-packages "http://packages.ubuntu.com">
<!ENTITY ubuntu-dpkgfile "ubuntu5.10.tar">
<!ENTITY ubuntu-web "http://www.ubuntu.com">
<!ENTITY ubuntu-main "http://www.ubuntu.com">
<!ENTITY ubuntu-download "http://www.ubuntu.com/download">
<!ENTITY ubuntu-forums "http://www.ubuntu.com/community/forums">
<!ENTITY ubuntu-components "http://www.ubuntu.com/ubuntu/components">
<!ENTITY ubuntu-lists "http://lists.ubuntu.com">
<!ENTITY ubuntu-wiki "http://wiki.ubuntu.com">
<!ENTITY ubuntu-irc "irc.freenode.net channel #ubuntu">
<!ENTITY ubuntu-bugzilla "https://launchpad.net/distros/ubuntu/+bugs">
<!ENTITY ubuntu-doc-bugs "https://launchpad.net/products/ubuntu-doc/+bugs">
<!ENTITY ubuntu-paidsupport "http://www.ubuntu.com/support/supportoptions/paidsupport">
<!ENTITY ubuntu-freesupport "http://www.ubuntu.com/support/supportoptions/freesupport">
<!ENTITY ubuntu-comments "http://www.ubuntuforums.org/showthread.php?p=21787">
<!ENTITY ubuntu-documentation "http://help.ubuntu.com">
<!ENTITY ubuntu-documentation-repos "https://docteam.ubuntu.com/repos/trunk">
<!ENTITY ubuntu-doc-team "https://wiki.ubuntu.com/DocumentationTeam">
<!ENTITY ubuntu-doc-list "http://lists.ubuntu.com/mailman/listinfo/ubuntu-doc">
<!ENTITY ubuntu-shipit "http://shipit.ubuntu.com">
<!ENTITY ubuntu-launchpad "https://launchpad.ubuntu.com">
<!ENTITY ubuntu-rosetta "https://launchpad.ubuntu.com/rosetta">
<!ENTITY ubuntu-planet "http://planet.ubuntu.com">
<!ENTITY ubuntu-philosophy "http://www.ubuntu.com/ubuntu/philosophy">
<!ENTITY ubuntu-participate "http://www.ubuntu.com/community/participate/">
<!-- UBUNTU WIKI RESOURCES --><!ENTITY wiki-UserDocumentation "https://wiki.ubuntu.com/UserDocumentation">
<!ENTITY restricted-formats "https://wiki.ubuntu.com/RestrictedFormats">
<!ENTITY wiki-RestrictedFormats "https://wiki.ubuntu.com/RestrictedFormats">
<!ENTITY wiki-XChatHowto "https://wiki.ubuntu.com/XChatHowto">
<!ENTITY wiki-RootSudo "https://wiki.ubuntu.com/RootSudo">
<!ENTITY wiki-HowToGetHelp "https://wiki.ubuntu.com/HowToGetHelp">
<!ENTITY transcode "https://wiki.ubuntu.com/DVDRippingandEncoding">
<!ENTITY wiki-Wine "https://wiki.ubuntu.com/Wine">
<!ENTITY wiki-Cedega "https://wiki.ubuntu.com/Cedega">
<!ENTITY wiki-Nano "https://wiki.ubuntu.com/NanoHowto">
<!ENTITY wiki-locoteams "https://wiki.ubuntu.com/LoCoTeamList">
<!ENTITY wiki-BasicCommands "https://wiki.ubuntu.com/BasicCommands">
<!ENTITY wiki-filepermissions "https://wiki.ubuntu.com/FilePermissions">
<!-- KUBUNTU URL RESOURCES --><!ENTITY kubuntu-web "http://www.kubuntu.org">
<!ENTITY kubuntu-main "http://www.kubuntu.org">
<!ENTITY kubuntu-download "http://releases.ubuntu.com/kubuntu/">
<!ENTITY kubuntu-packages "http://packages.ubuntu.com/breezy/">
<!ENTITY kubuntu-cdpackages-nodefault "http://people.ubuntu.com/~cjwatson/seeds/kubuntu-breezy/ship">
<!ENTITY kubuntu-lists "http://lists.ubuntu.com/archives/kubuntu-users/">
<!ENTITY kubuntu-lists-users "http://lists.ubuntu.com/mailman/listinfo/kubuntu-users/">
<!ENTITY kubuntu-lists-devel "http://lists.ubuntu.com/mailman/listinfo/kubuntu-devel/">
<!ENTITY kubuntu-mirrors "http://distrowatch.com/kubuntu">
<!ENTITY kubuntu-forums "http://ubuntuforums.org/forumdisplay.php?f=68">
<!ENTITY kubuntu-forums2 "http://kubuntuforums.net">
<!ENTITY kubuntu-wiki "http://www.ubuntu.com/wiki/Kubuntu">
<!ENTITY kubuntu-irc "irc.freenode.net channel kubuntu">
<!ENTITY kubuntu-documentation-site "http://www.kubuntu.org/documentation.php">
<!ENTITY kubuntu-wiki-UserDocumentation "https://wiki.kubuntu.com/UserDocumentation">
<!-- XUBUNTU URL RESOURCES --><!ENTITY xubuntu-irc "irc.freenode.net channel xubuntu">
<!-- DEBIAN RESOURCES --><!ENTITY debian-apt "http://www.debian.org/doc/user-manuals#apt-howto">
<!-- EXTERNAL URL RESOURCES --><!ENTITY linmodem "http://www.linmodems.org/">
<!ENTITY gnome "http://www.gnome.org/">
<!ENTITY linuxorg "http://www.linux.org/">
<!ENTITY ooo "http://www.openoffice.org/">
<!ENTITY kde "http://www.kde.org/">
<!ENTITY lugww "http://lugww.counter.li.org/">
<!ENTITY ubuntu-watch "http://distrowatch.com/ubuntu/">
<!ENTITY realplayer-download "http://www.real.com/linux/">
<!ENTITY nvu-download "http://www.nvu.com/download.html">
<!ENTITY sunjava-download "http://java.sun.com/j2se/1.5.0/download.jsp">
<!ENTITY xorg "http://www.x.org">
<!ENTITY dyndns "http://www.dyndns.org">
<!ENTITY shoutcast "http://www.shoutcast.com/">
<!ENTITY freedomtoaster "http://www.freedomtoaster.org/">
<!-- ubuntu-screenshots TODO --><!ENTITY kubuntu-screenshots "http://shots.osdir.com/slideshows/slideshow.php?release=306&amp;slide=1">
<!ENTITY mozilla "http://www.mozilla.org/">
<!ENTITY mozilla-firefox "http://www.mozilla.org/products/firefox/">
<!ENTITY gnu "http://www.gnu.org/">
<!ENTITY gnu-philosophy "http://www.gnu.org/philosophy/">
<!ENTITY win4lin "http://www.win4lin.com">
<!ENTITY codeweavers "http://www.codeweavers.com">
<!ENTITY kernel "http://www.kernel.org">
<!ENTITY google "http://www.google.com">
<!ENTITY kdelook " http://www.kde-look.org">
<!-- this entity controls the url for addons--><!ENTITY java-download "http://java.sun.com/j2se/1.5.0/download.jsp">
<!ENTITY skype-deb "skype_1.2.0.17-1_i386.deb">
<!ENTITY skype-download "http://www.skype.com/go/getskype-linux-deb">
<!ENTITY scanmodem-gz "scanModem.gz">
<!ENTITY scanmodem-url "http://linmodems.technion.ac.il/packages/scanModem.gz">
<!ENTITY ext2fs-url "http://www.fs-driver.org/index.html">
<!ENTITY mvb-tar "mvb_1.6.tgz">
<!ENTITY mvb-url "http://www.xscd.com/pub/mvb/&mvb-tar;">
<!-- TLDP --><!ENTITY ldp-pre-install-check "http://tldp.org/HOWTO/Pre-Installation-Checklist/">
<!-- LANGUAGES (sorted by two letter code)--><!ENTITY Afar "aa">
<!ENTITY Abkhazian "ab">
<!ENTITY Afrikaans "af">
<!ENTITY Amharic "af">
<!ENTITY Arabic "ar">
<!ENTITY Assamese "as">
<!ENTITY Aymara "ay">
<!ENTITY Azerbaijani "az">
<!ENTITY Bashkir "ba">
<!ENTITY Byelorussian "be">
<!ENTITY Bulgarian "bg">
<!ENTITY Bihari "bh">
<!ENTITY Bislama "bi">
<!ENTITY Bangla "bn">
<!ENTITY Bengali "bn">
<!ENTITY Tibetan "bo">
<!ENTITY Breton "br">
<!ENTITY Catalan "ca">
<!ENTITY Corsican "co">
<!ENTITY Czech "cs">
<!ENTITY Welsh "cy">
<!ENTITY Danish "da">
<!ENTITY German "de">
<!ENTITY Bhutani "dz">
<!ENTITY Greek "el">
<!-- <!ENTITY EnglishAmerican 'en'> --><!ENTITY EnglishAmerican "C">
<!ENTITY Esperanto "eo">
<!ENTITY Spanish "es">
<!ENTITY Estonian "et">
<!ENTITY Basque "eu">
<!ENTITY Persian "fa">
<!ENTITY Finnish "fi">
<!ENTITY Fiji "fj">
<!ENTITY Faeroese "fo">
<!ENTITY French "fr">
<!ENTITY Frisian "fy">
<!ENTITY Irish "ga">
<!ENTITY Gaelic "gd">
<!ENTITY ScotsGaelic "gd">
<!ENTITY Galician "gl">
<!ENTITY Guarani "gn">
<!ENTITY Gujarati "gu">
<!ENTITY Hausa "ha">
<!ENTITY Hindi "hi">
<!ENTITY Croatian "hr">
<!ENTITY Hungarian "hu">
<!ENTITY Armenian "hy">
<!ENTITY Interlingua "ia">
<!ENTITY Interlingue "ie">
<!ENTITY Inupiak "ik">
<!ENTITY Indonesian "in">
<!ENTITY Icelandic "is">
<!ENTITY Italian "it">
<!ENTITY Hebrew "iw">
<!ENTITY Japanese "ja">
<!ENTITY Yiddish "ji">
<!ENTITY Javanese "jw">
<!ENTITY Georgian "ka">
<!ENTITY Kazakh "kk">
<!ENTITY Greenlandic "kl">
<!ENTITY Cambodian "km">
<!ENTITY Kannada "kn">
<!ENTITY Korean "ko">
<!ENTITY Kashmiri "ks">
<!ENTITY Kurdish "ku">
<!ENTITY Kirghiz "ky">
<!ENTITY Latin "la">
<!ENTITY Lingala "ln">
<!ENTITY Laothian "lo">
<!ENTITY Lithuanian "lt">
<!ENTITY Latvian "lv">
<!ENTITY Lettish "lv">
<!ENTITY Malagasy "mg">
<!ENTITY Maori "mi">
<!ENTITY Macedonian "mk">
<!ENTITY Malayalam "ml">
<!ENTITY Mongolian "mn">
<!ENTITY Moldavian "mo">
<!ENTITY Marathi "mr">
<!ENTITY Malay "ms">
<!ENTITY Maltese "mt">
<!ENTITY Burmese "my">
<!ENTITY Nauru "na">
<!ENTITY Nepali "ne">
<!ENTITY Dutch "nl">
<!ENTITY Norwegian "no">
<!ENTITY Occitan "oc">
<!ENTITY Afan "om">
<!ENTITY Oromo "om">
<!ENTITY Oriya "or">
<!ENTITY Punjabi "pa">
<!ENTITY Polish "pl">
<!ENTITY Pushto "ps">
<!ENTITY Pashto "ps">
<!ENTITY Portuguese "pt">
<!ENTITY Quechua "qu">
<!ENTITY Rhaeto-Romance "rm">
<!ENTITY Kirundi "rn">
<!ENTITY Romanian "ro">
<!ENTITY Russian "ru">
<!ENTITY Kinyarwanda "rw">
<!ENTITY Sanskrit "sa">
<!ENTITY Sindhi "sd">
<!ENTITY Sangro "sg">
<!ENTITY Serbo-Croatian "sh">
<!ENTITY Singhalese "si">
<!ENTITY Slovak "sk">
<!ENTITY Slovenian "sl">
<!ENTITY Samoan "sm">
<!ENTITY Shona "sn">
<!ENTITY Somali "so">
<!ENTITY Albanian "sq">
<!ENTITY Serbian "sr">
<!ENTITY Siswati "ss">
<!ENTITY Sesotho "st">
<!ENTITY Sudanese "su">
<!ENTITY Swedish "sv">
<!ENTITY Swahili "sw">
<!ENTITY Tamil "ta">
<!ENTITY Tegulu "te">
<!ENTITY Tajik "tg">
<!ENTITY Thai "th">
<!ENTITY Tigrinya "ti">
<!ENTITY Turkmen "tk">
<!ENTITY Tagalog "tl">
<!ENTITY Setswana "tn">
<!ENTITY Tonga "to">
<!ENTITY Turkish "tr">
<!ENTITY Tsonga "ts">
<!ENTITY Tatar "tt">
<!ENTITY Twi "tw">
<!ENTITY Ukrainian "uk">
<!ENTITY Urdu "ur">
<!ENTITY Uzbek "uz">
<!ENTITY Vietnamese "vi">
<!ENTITY Volapuk "vo">
<!ENTITY Wolof "wo">
<!ENTITY Xhosa "xh">
<!ENTITY Yoruba "yo">
<!ENTITY Chinese "zh">
<!ENTITY Zulu "zu">
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
<!-- COMMON DOC OBJECTS --><!ENTITY copyright SYSTEM "../common/C/copyright.xml">
<!ENTITY conventions SYSTEM "../common/C/conventions.xml">
<!ENTITY feedback SYSTEM "../common/C/feedback.xml">
<!ENTITY publisher SYSTEM "../common/C/publisher.xml">
<!ENTITY legalnotice SYSTEM "../common/C/legalnotice.xml">
<!ENTITY disclaimer SYSTEM "../common/C/disclaimer.xml">
<!ENTITY inline-ubuntu-icon SYSTEM "../common/C/inlinemediaobject-ubuntu-icon.xml">
<!ENTITY inline-ubuntu-icon-header SYSTEM "../common/C/inlinemediaobject-ubuntu-icon-header.xml">
<!ENTITY relative-ubuntu-icon SYSTEM "../common/C/mediaobject-relative-ubuntu-icon.xml">
<!ENTITY ubuntu-icon SYSTEM "../common/C/mediaobject-ubuntu-icon.xml">
<!ENTITY gpl SYSTEM "../common/C/gpl.xml">
<!ENTITY fdl SYSTEM "../common/C/fdl.xml">
<!ENTITY cc-by-sa SYSTEM "../common/C/ccbysa.xml">
<!ENTITY % gnome-menus-C SYSTEM "../../../ubuntu/libs/gnome-menus-C.ent">
<!-- MENUS --><!-- Please keep entries alphabetical, it makes them much easier to find & use --><!ENTITY about-me SYSTEM "../menus/C/about-me.xml">
<!ENTITY accessories SYSTEM "../menus/C/accessories.xml">
<!ENTITY acro-read SYSTEM "../menus/C/acro-read.xml">
<!ENTITY administration SYSTEM "../menus/C/administration.xml">
<!ENTITY amule SYSTEM "../menus/C/amule.xml">
<!ENTITY archive-man SYSTEM "../menus/C/archive-man.xml">
<!ENTITY assistive-technology-preferences SYSTEM "../menus/C/assistive-technology-preferences.xml">
<!ENTITY azureus SYSTEM "../menus/C/azureus.xml">
<!ENTITY blender3d SYSTEM "../menus/C/blender3d.xml">
<!ENTITY boot SYSTEM "../menus/C/boot.xml">
<!ENTITY calculator SYSTEM "../menus/C/calculator.xml">
<!ENTITY character-map SYSTEM "../menus/C/character-map.xml">
<!ENTITY desktop-background SYSTEM "../menus/C/desktop-background.xml">
<!ENTITY desktop-preferences SYSTEM "../menus/C/desktop-preferences.xml">
<!ENTITY device-manager SYSTEM "../menus/C/device-manager.xml">
<!ENTITY dictionary SYSTEM "../menus/C/dictionary.xml">
<!ENTITY disks SYSTEM "../menus/C/disks.xml">
<!ENTITY downloader-x SYSTEM "../menus/C/downloader-x.xml">
<!ENTITY file-management SYSTEM "../menus/C/file-management.xml">
<!ENTITY firefox SYSTEM "../menus/C/firefox.xml">
<!ENTITY firestarter-firewall-tool SYSTEM "../menus/C/firestarter-firewall-tool.xml">
<!ENTITY font SYSTEM "../menus/C/font.xml">
<!ENTITY gaim SYSTEM "../menus/C/gaim.xml">
<!ENTITY games SYSTEM "../menus/C/games.xml">
<!ENTITY gftp SYSTEM "../menus/C/gftp.xml">
<!ENTITY gimp SYSTEM "../menus/C/gimp.xml">
<!ENTITY gnome-app-install SYSTEM "../menus/C/gnomeappinstall.xml">
<!ENTITY gnome-config-editor SYSTEM "../menus/C/gnome-config-editor.xml">
<!ENTITY gparted SYSTEM "../menus/C/gparted.xml">
<!ENTITY graphics SYSTEM "../menus/C/graphics.xml">
<!ENTITY gthumb SYSTEM "../menus/C/gthumb.xml">
<!ENTITY home-folder SYSTEM "../menus/C/home-folder.xml">
<!ENTITY inkscape SYSTEM "../menus/C/inkscape.xml">
<!ENTITY internet SYSTEM "../menus/C/internet.xml">
<!ENTITY keyboard SYSTEM "../menus/C/keyboard.xml">
<!ENTITY keyboard-shortcuts SYSTEM "../menus/C/keyboard-shortcuts.xml">
<!ENTITY limewire SYSTEM "../menus/C/limewire.xml">
<!ENTITY login-screen-setup SYSTEM "../menus/C/login-screen-setup.xml">
<!ENTITY logout SYSTEM "../menus/C/logout.xml">
<!ENTITY menu-editor SYSTEM "../menus/C/menu-editor.xml">
<!ENTITY menus-and-toolbars SYSTEM "../menus/C/menus-and-toolbars.xml">
<!ENTITY mouse SYSTEM "../menus/C/mouse.xml">
<!ENTITY multimedia-systems-selector SYSTEM "../menus/C/multimedia-systems-selector.xml">
<!ENTITY network-proxy SYSTEM "../menus/C/network-proxy.xml">
<!ENTITY networking SYSTEM "../menus/C/networking.xml">
<!ENTITY nvu SYSTEM "../menus/C/nvu.xml">
<!ENTITY open-office SYSTEM "../menus/C/open-office.xml">
<!ENTITY palmos-devices SYSTEM "../menus/C/palmos-devices.xml">
<!ENTITY preferred-applications SYSTEM "../menus/C/preferred-applications.xml">
<!ENTITY printing SYSTEM "../menus/C/printing.xml">
<!ENTITY qtparted SYSTEM "../menus/C/qtparted.xml">
<!ENTITY remote-desktop SYSTEM "../menus/C/remote-desktop.xml">
<!ENTITY removable-drives-and-media SYSTEM "../menus/C/removable-drives-and-media.xml">
<!ENTITY realplayer SYSTEM "../menus/C/realplayer.xml">
<!ENTITY rhythmbox SYSTEM "../menus/C/rhythmbox.xml">
<!ENTITY route-planner SYSTEM "../menus/C/route-planner.xml">
<!ENTITY screen-resolution SYSTEM "../menus/C/screen-resolution.xml">
<!ENTITY screensaver SYSTEM "../menus/C/screensaver.xml">
<!ENTITY scribus SYSTEM "../menus/C/scribus.xml">
<!ENTITY services SYSTEM "../menus/C/services.xml">
<!ENTITY sessions SYSTEM "../menus/C/sessions.xml">
<!ENTITY shared-folders SYSTEM "../menus/C/shared-folders.xml">
<!ENTITY skype SYSTEM "../menus/C/skype.xml">
<!ENTITY software-properties SYSTEM "../menus/C/software-properties.xml">
<!ENTITY sound SYSTEM "../menus/C/sound.xml">
<!ENTITY soundandvideo SYSTEM "../menus/C/soundandvideo.xml">
<!ENTITY synaptic SYSTEM "../menus/C/synaptic.xml">
<!ENTITY systemtools SYSTEM "../menus/C/systemtools.xml">
<!ENTITY terminal SYSTEM "../menus/C/terminal.xml">
<!ENTITY text-editor SYSTEM "../menus/C/text-editor.xml">
<!ENTITY theme SYSTEM "../menus/C/theme.xml">
<!ENTITY time-date SYSTEM "../menus/C/time-date.xml">
<!ENTITY totem SYSTEM "../menus/C/totem.xml">
<!ENTITY ubuntu-update-manager SYSTEM "../menus/C/ubuntu-update-manager.xml">
<!ENTITY users SYSTEM "../menus/C/users.xml">
<!ENTITY users-groups SYSTEM "../menus/C/users-groups.xml">
<!ENTITY windows SYSTEM "../menus/C/windows.xml">
<!ENTITY xchat-gnome SYSTEM "../menus/C/xchat-gnome.xml">
<!ENTITY xine SYSTEM "../menus/C/xine.xml">
<!ENTITY xmms SYSTEM "../menus/C/xmms.xml">
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
<!ELEMENT xi:include (xi:fallback)?>
<!ATTLIST xi:include xmlns:xi CDATA #FIXED "http://www.w3.org/2001/XInclude">
<!ATTLIST xi:include href CDATA #REQUIRED>
<!ATTLIST xi:include parse (xml | text) "xml">
<!ATTLIST xi:include xpointer CDATA #IMPLIED>
<!ATTLIST xi:include encoding CDATA #IMPLIED>
<!ATTLIST xi:include accept CDATA #IMPLIED>
<!ATTLIST xi:include accept-charset CDATA #IMPLIED>
<!ATTLIST xi:include accept-language CDATA #IMPLIED>
<!ELEMENT xi:fallback ANY>
<!ATTLIST xi:fallback xmlns:xi CDATA #FIXED "http://www.w3.org/2001/XInclude">
<!ENTITY % local.preface.class "| xi:include">
<!ENTITY % local.part.class "| xi:include">
<!ENTITY % local.chapter.class "| xi:include">
<!ENTITY % local.divcomponent.mix "| xi:include">
<!ENTITY % local.para.char.mix "| xi:include">
<!ENTITY % local.info.class "| xi:include">
<!ENTITY % local.common.attrib "xmlns:xi            CDATA       #FIXED       'http://www.w3.org/2001/XInclude'">
<!ENTITY language "en">
]>
<chapter id="basic-chap" status="complete">
	<title>Basic Packaging</title>

	<para>Two of the problems that many novice packagers face are that there
		are multiple ways of packaging, and there is more than one tool
		to do the job. We will go through three examples with the common
		build systems. First, we will use no build helper. This approach is
		usually the most difficult and is not often used in
		practice but gives the most straightforward look at the packaging
		process. Second, we will use
		<application>debhelper</application>, the most common build system in
		Debian. It helps the packager by automating repetitive
		tasks. Third, we will briefly cover the
		<emphasis role="bold">C</emphasis>ommon <emphasis role="bold">D</emphasis>ebian <emphasis role="bold">B</emphasis>uild <emphasis role="bold">S</emphasis>ystem (<application>CDBS</application>), a more streamlined build
		system that uses <application>debhelper</application>.</para>

	<tip><para>Package development often requires installing many packages
			(especially <application>-dev</application> packages containing
			headers and other common development files) that are not
			part of a normal desktop <phrase>Ubuntu</phrase> installation. If you want
			to avoid installing extra packages or would like to develop for a
			different <phrase>Ubuntu</phrase> release (the development one, for instance) from
			what you currently have, the use of a chroot environment
			is highly recommended. A guide to setting up a <xref linkend="appendix-chroot"/> can be found in the
			Appendix.</para></tip>

	
	<sect1 id="basic-scratch" status="complete">
		<title>Packaging From Scratch</title>
		
		<important><para><emphasis role="bold">Requirements:</emphasis> build-essential,
				automake, gnupg, lintian, fakeroot and <xref linkend="gs-pbuilder"/>.</para>
		</important>
					
		<para>In this example we will be using the GNU <application><ulink url="http://www.gnu.org/software/hello/hello.html">hello</ulink></application>
			program as our example. You can download the source tarball from
			<ulink url="http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz">ftp.gnu.org</ulink>.
			For the purposes of this example, we will be using the
			<filename>~/hello/</filename> directory.</para>
		<screen>
mkdir ~/hello
cd ~/hello
wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz</screen>

		<para>Nous allons également comparer notre paquet avec celui qui est déjà prêt dans les dépôts Ubuntu. Pour le moment, nous allons le placer dans le répertoire <filename>Ubuntu</filename> afin de pouvoir s'y pencher plus tard. Afin d'obtenir le paquet source, soyez certain d'avoir la ligne « deb-src » pour le dépôt principal (Main) dans votre <filename>/etc/apt/sources.list</filename>. Ensuite, exécutez simplement ceci :</para>

		<screen>
mkdir ubuntu
cd ubuntu
apt-get source hello
cd ..</screen>
		
		<note><para>Contrairement à la majorité des commandes <application>apt-get</application>, il n'est pas nécessaire d'avoir les privilèges du superutilisateur pour obtenir le paquet source, parce qu'il est téléchargé dans le dossier actuel. En fait, il est recommande de n'utiliser <application>apt-get source</application> <emphasis>uniquement</emphasis> comme utilisateur normal, puisque ous pourrez ensuite éditer les fichiers du paquet source sans nécessiter les privilèges de superutilisateur.</para></note>
		
		<para>Ce que la commande <application>apt-get source</application> fait est :</para>
		
		<orderedlist>

			<listitem><para>Télécharge le paquet source. Un paquet source contient habituellement un fichier .dsc décrivant le paquet et fournissant les sommes MD5 du paquet source, un fichier .orig.tar.gz contenant le code source de l'auteur, et un fichier .diff.gz contenant les correctifs (patchs) à appliquer sur le code source avec les informations de mise en paquet.</para></listitem>

			<listitem><para>Décompresser le .orig.tar.gz dans le dossier courant.</para></listitem>

			<listitem><para>Apply the gunzipped .diff.gz to the unpacked source
					directory.</para></listitem>

			</orderedlist>

		<para>Si vous téléchargez manuellement le paquet source (fichiers .dsc, .orig.tar.gz, .diff.gz), vous pouvez les décompresser comme le fait <application>apt-get source</application> en utilisant <application>dpkg-source</application> comme suit :</para>
		<para><screen>dpkg-source -x *.dsc</screen></para>

		<para>The first thing you will need to do is make a copy of the
			original (sometimes called "upstream") tarball in the following
			format:
			<filename>&lt;packagename&gt;_&lt;version&gt;.orig.tar.gz</filename>.
			This step does two things. First, it creates two copies of the source
			code.  If you accidentally change or delete the working copy you can
			use the one you downloaded. Second, it is considered poor
			packaging practice to change the original source tarball unless
			absolutely necessary. See <xref linkend="basic-mistakes"/> for
			reasons.</para>

		<screen>
cp hello-2.1.1.tar.gz hello_2.1.1.orig.tar.gz
tar -xzvf hello_2.1.1.orig.tar.gz</screen>

		<warning><para>The underscore, "_", between the package name (hello) and the
				version (2.1.1), as opposed to a hyphen, "-", is very important. Your
				source package will incorrectly be built as a Debian native
				package.</para></warning>

		<para>We now have a <filename>hello-2.1.1</filename> directory
			containing the source files. Now we need to create the customary
			<application>debian</application> directory where all the
			packaging information is stored, allowing us to separate the
			packaging files from the application source files.</para>

		<screen>
mkdir hello-2.1.1/debian
cd hello-2.1.1/debian/</screen>

		<para>We now need to create the essential files for any <phrase>Ubuntu</phrase>
			source package: <filename>changelog</filename>,
			<filename>control</filename>, <filename>copyright</filename>, and
			<filename>rules</filename>. These are the files needed to create
			the binary packages (.deb files) from the original (upstream)
			source code. Let us look at each one in turn.</para>
		
		<sect2>
			<title>changelog</title>
			
			<para>The <filename>changelog</filename> file is, as its name
				implies, a listing of the changes made in each version. It
				has a specific format that gives the package name, version,
				distribution, changes, and who made the changes
				at a given time. If you have a GPG key, make sure to use the same name
				and email address in <filename>changelog</filename> as you
				have in your key. The following is a template
				<filename>changelog</filename>:</para>
			<screen>
package (version) distribution; urgency=urgency

  * change details
    more change details
  * even more change details

-- maintainer name &lt;email address&gt;[two spaces]  date</screen>

			<para>Le format (de la date en particulier) est important. La dte doit être au format défini par la RFC822. Elle peut être obtenue à l'aide du programme <application>822-date</application>.</para>

			<para>Voici un simple fichier <filename>changelog</filename> pour <application>hello</application> :</para>

			<screen>
hello (2.1.1-1) dapper; urgency=low

   * New upstream release with lots of bug fixes.

-- Captain Packager &lt;packager@coolness.com&gt; Wed, 5 Apr 2006 22:38:49 -0700</screen>

			<para>Veuillez noter que la version est suffixée d'un -1, ou ce qui est appelé la révision Debian, qui est utilisée pour que le paquet puisse être mis à jour (pour corriger des bogues par exemple) avec de nouveaux paquets utilisant la même version de source.</para>

			<note><para><phrase>Ubuntu</phrase> et Debian utilisent des schémas de versions de paquets légèrement différents pour éviter les conflits avec la même version source. Si un paquet Debian a été transformé pour <phrase>Ubuntu</phrase>, il est suffixé de <emphasis>ubuntuX</emphasis> (où <emphasis>X</emphasis>et le numéro de révision <phrase>Ubuntu</phrase>) après le numéro de version Debian. Donc si le paquet Debian <application>hello</application> a été modifié pour <phrase>Ubuntu</phrase>, le numéro complet de version serait <filename>2.1.1-1ubuntu1</filename>. Si le paquet pour une application n'existe pas dans Debian, alors la version <phrase>Ubuntu</phrase> est <emphasis>0</emphasis> (<emphasis>exemple</emphasis> : <filename>2.1.1-0ubuntu1</filename>).</para></note>
		
			<para>Étudions maintenant le journal des changements (<filename>changelog</filename>) pour le paquet source <phrase>Ubuntu</phrase> que nous avons téléchargement précédemment :</para>

			<screen>
less ../../ubuntu/hello-2.1.1/debian/changelog</screen>

			<para>Notez que dans ce cas, la <emphasis>distribution</emphasis> est <emphasis>unstable</emphasis> (une branche de Debian), parce que le paquet Debian n'a pas été modifié par <phrase>Ubuntu</phrase>. Rappelez-vous de définir la <emphasis>distribution</emphasis> pour votre version cible de distribution.</para>

			<para>À ce moment, créez un fichier <filename>changelog</filename> dans le dossier <filename>debian</filename> où vous devriez déjà être.</para>
			
		</sect2>

		<sect2>
			<title>control</title>
			<para>The control file contains the information that the package
				manager (such as <application>apt-get</application>,
				<application>synaptic</application>, and
				<application>aptitude</application>) uses, build-time dependencies,
				maintainer information, and much more.</para>
			<para>For the <phrase>Ubuntu</phrase> <application>hello</application> package,
				the control file looks something like:</para>
			<para><screen>Source: hello
Section: devel
Priority: optional
Maintainer: Captain Packager &lt;packager@coolness.com&gt; 
Standards-Version: 3.6.1

Package: hello
Architecture: any
Depends: ${shlibs:Depends}
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting.  It
 allows non-programmers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian
 package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).</screen></para>

			<para>Create <filename>control</filename> using the
				information above (making sure to provide your information for
				the <emphasis>Maintainer</emphasis> field).</para>
			
			<para>The first paragraph gives information about the source package. Let us
				go through each line: </para>
			<itemizedlist>
				
				<listitem><para><emphasis role="bold">Source:</emphasis> This is the name
						of the source package, in this case,
						<emphasis>hello</emphasis>.</para></listitem>

				<listitem><para><emphasis role="bold">Section:</emphasis> The apt
						repositories are split up into sections for ease of browsing and
						categorization of software. In this case,
						<application>hello</application> belongs in the
						<emphasis>devel</emphasis> section.</para></listitem>

				<listitem><para><emphasis role="bold">Priority:</emphasis> This sets the
						importance of the package to users. It should be one of the
						following:</para>

					<itemizedlist>
					
						<listitem><para><emphasis role="bold">Required</emphasis> -
								packages that are essential for the system to work
								properly. If they are removed it is highly likely that your
								system will break in an unrecoverable
								way.</para></listitem>
						
						<listitem><para><emphasis role="bold">Important</emphasis> - ensemble minimal de paquets pour un système utilisable. Enlever ces paquets ne détruira pas de manière irréversible votre système, mais ils sont généralement considérés comme des outils importants sans lesquels une installation de Linux ne serait pas complète. Note : Cet ensemble n'inclut pas de choses telles que Emacs ou le Système de Fenêtres X.</para></listitem>
						
						<listitem><para><emphasis role="bold">Standard</emphasis> -
								Somewhat self explanatory.</para></listitem>
						
						<listitem><para><emphasis role="bold">Optional</emphasis> (Optionnel) - dans cette catégorie se trouvent essentiellement des paquets non-requis, le gros des paquets. Cependant, ces paquets ne doivent pas entrer en conflit entre eux.</para></listitem>
						
						<listitem><para><emphasis role="bold">Extra</emphasis> - paquets qui peuvent entrer en conflit avec l'une des catégories ci-dessus. Elle est également utilisée pour des paquets spécialisés qui ne seraient utiles qu'à des personnes qui connaissent la fonction du paquet.</para></listitem>
					
					</itemizedlist>
				</listitem>

				<listitem><para><emphasis role="bold">Maintainer</emphasis> : Le mainteneur du paquet avec son courriel</para></listitem>

				<listitem><para><emphasis role="bold">Standards-Version</emphasis> : La version de la <ulink url="http://www.debian.org/doc/debian-policy/">Politique Debian (Debian Policy)</ulink> à laquelle le paquet adhère (dans ce cas, la version 3.6.1). Un moyen simple de trouver la version actuelle es <emphasis>apt-cache show debian-policy | grep Version</emphasis>.</para></listitem>

				<listitem><para><emphasis role="bold">Build-Depends</emphasis> : L'un des champs les plus importants et souvent source de bogues. Cette ligne liste les paquets binaires (et leurs versions si nécessaire) devant être installés pour créer le(s) paquet(s) binaires(s) depuis le paquet source. Les paquets essentiels sont requis pa <emphasis>build-essential</emphasis> et ne doivent pas être inclus dans la ligne Build-Depends. Dans le cas de <application>hello</application>, tous les paquets font partie de build-essential, donc la ligne Build-Depends n'est pas nécessaire. La liste des paquets build-essential peut être trouvée à <filename>/usr/share/doc/build-essential/list</filename>.</para></listitem>
			
			</itemizedlist>

		
			<para>Le second paragraphe est destiné au paquet binaire qui sera construit depuis la source. Si de multiples paquets binaires sont construits depuis le paquet source, il devrait y avoir une section pour <emphasis>chacun</emphasis>. À nouveau, parcourons les lignes :</para>
			
			<itemizedlist>
			
				<listitem><para><emphasis role="bold">Package</emphasis> : Le nom du paquet binaire. Souvent, pour de simples programmes (tels que <application>hello</application>), le nom du paquet source et le paquet binaire sont les mêmes.</para></listitem>
				
				<listitem><para><emphasis role="bold">Architecture</emphasis> : Les architectures pour lesquelles le paquet binaire sera construit. Par exemple :</para>
					
					<itemizedlist>
						
						<listitem><para><emphasis role="bold">all</emphasis> - The source
								is <emphasis>not</emphasis> architecture-dependent. Programs that use Python
								or other interpreted languages would use this. The
								resulting binary package would end with
								<filename>_all.deb</filename>.</para></listitem>

						<listitem><para><emphasis role="bold">any</emphasis> - The source
								<emphasis>is</emphasis> architecture-dependent and should
								compile on all the supported architectures. There will be
								a .deb file for each architecture (
								<filename>_i386.deb</filename> for
								instance)</para></listitem>

						<listitem><para>A subset of architectures (i386, amd64, ppc, etc.)
								can be listed to indicate that the source is
								architecture-dependent and does not work for all
								architectures supported by <phrase>Ubuntu</phrase>.</para></listitem>

					</itemizedlist></listitem>

				<listitem><para><emphasis role="bold">Depends:</emphasis> The list of
						packages that the binary package depends on for functionality. For
						<application>hello</application>, we see 
						<filename>${shlibs:Depends}</filename>, which is a variable that
						substitutes in the needed shared libraries. See the
						<filename>dpkg-source</filename> man page for more
						information.</para></listitem>

				<listitem><para><emphasis role="bold">Recommends:</emphasis> Used for
						packages that are highly recommended and usually are
						installed with the package. Some package managers, most notably
						<application>aptitude</application>, automatically install
						Recommended packages.</para></listitem>

				<listitem><para><emphasis role="bold">Suggests:</emphasis> Used for
						packages that are similar or useful when this package is
						installed.</para></listitem>
				
				<listitem><para><emphasis role="bold">Conflicts:</emphasis> Used for
						packages that will conflict with this package. Both cannot be
						installed at the same time. If one is being installed, the other
						will be removed.</para></listitem>

				<listitem><para><emphasis role="bold">Description:</emphasis> Both short
						and long descriptions are used by package managers. The format
						is:</para>
					
<screen>Description: &lt;single line synopsis&gt;
 &lt;extended description over several lines&gt;</screen>

						<para>Notez qu'il y a un espace devant chaque ligne de la longue description. Plus d'informations sur comment rédiger une bonne description sont disponibles sur <ulink url="http://people.debian.org/~walters/descriptions.html">http://people.debian.org/~walters/descriptions.html</ulink>.</para></listitem>
				
			</itemizedlist>
					
		</sect2>

		<sect2>
			<title>copyright</title>

			<para>Ce fichier fournit les informations sur le droit de copie (copyright). Généralement, l'information au sujet du copyright se trouve dans le fichier <filename>COPYING</filename> dans le dossier de la source du programme. Ce fichier devrait inclure des informations telles que le nom de l'auteur et de l'empaqueteur, l'URL d'où vient la source, une ligne de Copyright avec l'année et le détenteur du copyright ainsi que le texte du copyright lui-même. Un exemple serait (NdT : toujours en anglais !) :</para>

			<screen>This package was debianized by {Your Name} &lt;your email address&gt;
{Date}

It was downloaded from: {URL of webpage} 

Upstream Author(s): {Name(s) and email address(es) of author(s)}

Copyright:
	Copyright (C) {Year(s)} by {Author(s)} {Email address(es)}

License:

</screen>

			<para>Comme vous pouvez l'imaginer, <application>hello</application> est fourni sous la licence GPL. Dans ce cas, il est plus simple d'insérer le fichier <filename>copyright</filename> depuis le paquet <phrase>Ubuntu</phrase> :</para>

			<screen>
cp ../../ubuntu/hello-2.1.1/debian/copyright .</screen>

			<para>Vous devez inclure le copyright complet sauf si c'est la GPL, la LGPL, la licence BSD, la licence Artistique (Artistic License), auquel cas, vous pouvez vous référer au fichier correspondant dans le dossier <filename>/usr/share/common-licenses/</filename>.</para>

			<para>Notice that the <phrase>Ubuntu</phrase> package's
				<filename>copyright</filename> includes a license statement for
				the manual. It is important that <emphasis>all</emphasis> the
				files in the source be covered by a license statement.</para>
			
		</sect2>	

		<sect2 id="basic-scratch-rules">
			<title>rules</title>
			
			<para>Le fichier <filename>rules</filename> (nom qui signifie « règles ») est un Makefile exécutable qui contient les règles pour la construction du paquet binaire depuis les paquets sources. Pour <application>hello</application>, il sera plus simple d'utiliser le fichier <filename>rules</filename> du paquet <phrase>Ubuntu</phrase> :</para>

			<screen>#!/usr/bin/make -f
# Sample debian/rules file - for GNU Hello.
# Copyright 1994,1995 by Ian Jackson.
# I hereby give you perpetual unlimited permission to copy,
# modify and relicense this file, provided that you do not remove
# my name from the file itself.  (I assert my moral right of
# paternity under the Copyright, Designs and Patents Act 1988.)
# This file may have to be extensively modified

package = hello
docdir = debian/tmp/usr/share/doc/$(package)

CC = gcc
CFLAGS = -g -Wall
INSTALL_PROGRAM = install

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
  INSTALL_PROGRAM += -s
endif

build:
        $(checkdir)
        ./configure --prefix=/usr
        $(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
        touch build

clean:
        $(checkdir)
        rm -f build
        -$(MAKE) -i distclean
        rm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars

binary-indep:   checkroot build
        $(checkdir)
# There are no architecture-independent files to be uploaded
# generated by this package.  If there were any they would be
# made here.

binary-arch:    checkroot build
        $(checkdir)
        rm -rf debian/tmp
        install -d debian/tmp/DEBIAN $(docdir)
        install -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN
        $(MAKE) INSTALL_PROGRAM="$(INSTALL_PROGRAM)" \
                prefix=$$(pwd)/debian/tmp/usr install
        cd debian/tmp &amp;&amp; mv usr/info usr/man usr/share
        cp -a NEWS debian/copyright $(docdir)
        cp -a debian/changelog $(docdir)/changelog.Debian
        cp -a ChangeLog $(docdir)/changelog
        cd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian
        gzip -r9 debian/tmp/usr/share/man
        gzip -9 debian/tmp/usr/share/info/*
        dpkg-shlibdeps debian/tmp/usr/bin/hello
        dpkg-gencontrol -isp
        chown -R root:root debian/tmp
        chmod -R u+w,go=rX debian/tmp
        dpkg --build debian/tmp ..

define checkdir
        test -f src/$(package).c -a -f debian/rules
endef

binary: binary-indep binary-arch

checkroot:
        $(checkdir)
        test $$(id -u) = 0

.PHONY: binary binary-arch binary-indep clean checkroot
</screen>

			<para>Let us go through this file in some detail. One of the first
				parts you will see is the declaration of some variables:</para>
			<screen>package = hello
docdir = debian/tmp/usr/share/doc/$(package)

CC = gcc
CFLAGS = -g -Wall
INSTALL_PROGRAM = install

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
  INSTALL_PROGRAM += -s
endif
</screen>
			<para>This section sets the CFLAGS for the compiler and also handles the
				<filename>noopt</filename> and <filename>nostrip</filename> DEB_BUILD_OPTIONS for debugging.
			</para>
			
			<para>Next is the <filename>build</filename> rule:</para>
			<screen>build:
	$(checkdir)
	./configure --prefix=/usr
	$(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
	touch build</screen>
			<para>This rule runs <emphasis>./configure</emphasis> with the proper prefix,
runs <emphasis>make</emphasis>, and creates a <filename>build</filename> file that is a timestamp of the
build to prevent erroneous multiple compilations.</para>
			<para>The next rule is <filename>clean</filename>, which runs <emphasis>make -i distclean</emphasis>
and removes the files that are made during the package building.</para>

			<screen>clean:
	$(checkdir)
	rm -f build
	-$(MAKE) -i distclean
	rm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars</screen>

			<para>Ensuite, nous voyons une règle vide <filename>binary-indep</filename>, parce qu'il n'y a pas de fichiers indépendants de l'architecture qui sont crées dans ce paquet.</para>

			<para>Il y a, cependant, plusieurs fichiers dépendant de l'architecture, alors <filename>binary-arch</filename> est utilisé :</para>

			<screen>binary-arch:    checkroot build
		$(checkdir)
		rm -rf debian/tmp
		install -d debian/tmp/DEBIAN $(docdir)
		install -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN
		$(MAKE) INSTALL_PROGRAM="$(INSTALL_PROGRAM)" \
		prefix=$$(pwd)/debian/tmp/usr install
		cd debian/tmp &amp;&amp; mv usr/info usr/man usr/share
		cp -a NEWS debian/copyright $(docdir)
		cp -a debian/changelog $(docdir)/changelog.Debian
		cp -a ChangeLog $(docdir)/changelog
		cd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian
		gzip -r9 debian/tmp/usr/share/man
		gzip -9 debian/tmp/usr/share/info/*
		dpkg-shlibdeps debian/tmp/usr/bin/hello
		dpkg-gencontrol -isp
		chown -R root:root debian/tmp
		chmod -R u+w,go=rX debian/tmp
		dpkg --build debian/tmp ..</screen>
			
			<para>Premièrement, notez que cette règle appelle la règle <filename>checkroot</filename> afin de s'assurer que le paquet est construit en tant que superutilisateur et appelle la règle <filename>build</filename> pour compiler la source. Les fichiers <filename>debian/tmp/DEBIAN</filename> et <filename>debian/tmp/usr/share/doc/hello</filename> sont ensuite crées et le fichier <filename>postinst</filename> et les scripts <filename>prerm&gt;</filename> sont installés dans <filename>debian/tmp/DEBIAN</filename>. Ensuite <emphasis>make install</emphasis> est lancé avec un préfixe qui installe dans le répertoire <filename>debian/tmp/usr</filename>. Ensuite, les fichiers de documentation (NEWS, ChangeLog et le changelog Debian) sont comprimés par gzip et installés. <emphasis>dpkg-shlibdeps</emphasis> est invoqué pour trouver les dépendances de librairies partagées de l'exécutable <application>hello</application>, et stocke la liste dans le fichier <filename>debian/substvars</filename> pour la variable ${shlibs:Depends} dans <filename>control</filename>. Ensuite, <emphasis>dpkg-gencontrol</emphasis> est lancé pour créer un fichier de contrôle pour le paquet binaire et réalise les remplacements créés par <emphasis>dpkg-shlibdeps</emphasis>. Finalement, après avoir défini les permissions de <filename>debian/tmp</filename>, <emphasis>dpkg --build</emphasis> est lancé pour construire le paquet binaire .deb et le déposer dans le dossier parent.</para>

		</sect2>

		<sect2> 
			<title>postint et prerm</title> 
			
			<para>Les fichiers <filename>postinst</filename> (en français : post-installation) et <filename>prerm</filename> (en français : pré-effacement) sont des exemples de scripts de mainteneur. Ce sont des scripts shell qui sont exécutés après l'installation et avant l'effacement, respectivement, du paquet. Dans le cas du paquet <application>hello</application> <phrase>Ubuntu</phrase>, ils sont utilisés pour installer (et effacer) le fichiers d'information. Continuez et copiez-les vers le répertoire courant <filename>debian</filename>.</para>

			<screen>
cp ../../ubuntu/hello-2.1.1/debian/postinst .
cp ../../ubuntu/hello-2.1.1/debian/prerm .</screen>
		
		</sect2>

		<sect2>
			<title>Construire le paquet source</title>
			
			<para>Maintenant que nous avons parcouru les fichiers dans le répertoire <filename>debian</filename> pour <application>hello</application> en détail, nous pouvons construire les paquets source (et binaire). Déplaçons-nous d'abord à la racine de la source extraite.</para>
			
			<para><screen>cd ..</screen></para>
			
			<para>Now we build the source package using
				<application>dpkg-buildpackage</application>:</para>
			
			<para><screen>dpkg-buildpackage -S -rfakeroot</screen></para>
			
			<para> The -S flag tells
				<application>dpkg-buildpackage</application> to build a source
				package, and the -r flag tells it to use
				<application>fakeroot</application> to allow us to have fake
				root privileges when making the package.
				<application>dpkg-buildpackage</application> will take the
				<filename>.orig.tar.gz</filename> file and produce a
				<filename>.diff.gz</filename> (the difference between
				the original tarball from the author and the directory we
				have created, <filename>debian/</filename> and its contents)
				and a <filename>.dsc</filename> file that has the
				description and md5sums for the source package. The
				<filename>.dsc</filename> and
				<filename>*_source.changes</filename> (used for uploading the
				source package) files are signed using your GPG key. If you do not
				have a GPG key, add the <emphasis>-us -uc</emphasis> flags to the invocation of
				<application>dpkg-buildpackage</application>. Your package
				will build but it cannot be uploaded until it is
				signed.</para>
			
			<para>In addition to the source package, we can also build the
				binary package with
				<application>pbuilder</application>:</para>
			
			<para><screen>sudo pbuilder build ../*.dsc</screen></para>

			<para>Using <application>pbuilder</application> to build the
				binary packages is very important. It ensures that the build
				dependencies are correct, because
				<application>pbuilder</application> provides only a minimal
				environment, so all the build-time dependencies are
				determined by the <filename>control</filename> file.</para>
			
			<para>We can check the source package for common
mistakes using <application>lintian</application>:</para>
			
			<screen>cd ..
lintian -i *.dsc</screen>
			
		</sect2>

	</sect1>

	<sect1 id="basic-debhelper" status="complete">
		<title>Packaging with Debhelper</title>
		
		<important><para><emphasis role="bold">Requirements :</emphasis> (Requis). Les requis par la section <xref linkend="basic-scratch"/> ainsi que debhelper et dh-make.</para>
		</important>

		<para>En tant qu'empaqueteur, vous créerez rarement des paquets de zéro comme nous venons de le faire dans la section précédente. Comme vous pouvez l'imaginer, plusieurs des tâches et uen grande partie de l'information dans le fichier <filename>rules</filename> sont communs aux paquets. Afin de faciliter et de rendre plus efficace la mise en paquets, vous pouvez utiliser <application>debhelper</application> pour vous aider dans ces tâches. Dephelper est un ensemble de scripts Perl (préfixés par <emphasis>dh_</emphasis>) qui automatisent le processus de construction de paquets. Avec ces scripts, la construction d'un paquet Debian devient passablement simple.</para>

		<para>Dans cet exemple, nous allons à nouveau construire le paquet GNU Hello, mais cette fois, nous allons comparer notre travail avec le paquet <phrase>Ubuntu</phrase> <application>hello-debhelper</application>. À nouveau, créons un répertoire dans lequel nous allons travailler.</para>

		<screen>mkdir ~/hello-debhelper
cd ~/hello-debhelper
wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz
mkdir ubuntu
cd ubuntu</screen>
		

		<para>Ensuite, rapatrions le paquet source <phrase>Ubuntu</phrase> :</para>

		<screen>apt-get source hello-debhelper
cd ..</screen>

		<para>Comme dans l'exemple précédent, la première chose que nous devons faire et de décompresser l'archive tar originale (amont - upstream).</para>

		<screen>tar -xzvf hello-2.1.1.tar.gz</screen>

		<para>Au lieu de copier l'archive tar amont vers <filename>hello_2.1.1.orig.tar.gz</filename> comme nous l'avons fait dans l'exemple précédent, nous allons laisser <application>dh_make</application> faire le travail pour nous. La seule chose à faire est de renommer le paquet source afin qu'il soit de la forme <emphasis>&lt;nom_de_paquet&gt;-&lt;version&gt;</emphasis> ou nom_de_paquet est en minuscules. Dans ce cas, déballer simplement l'archive produit un répertoire source correctement nommé et nous pouvons nous y placer :</para>

		<screen>cd hello-2.1.1</screen>

		<para>To create the initial "debianization" of the source we will use
			<application>dh_make</application>.</para>

		<screen>
dh_make -e your.maintainer@address -f ../hello-2.1.1.tar.gz
		</screen>

		<para>dh_make will then ask you a series of questions:</para>

		<screen>
Type of package: single binary, multiple binary, library, kernel module or cdbs?
[s/m/l/k/b] <emphasis role="bold">s</emphasis></screen>

		<screen>
Maintainer name : Captain Packager
Email-Address   : packager@coolness.com
Date            : Thu,  6 Apr 2006 10:07:19 -0700
Package Name    : hello
Version         : 2.1.1
License         : blank
Type of Package : Single
Hit &lt;enter&gt; to confirm: <emphasis role="bold">Enter</emphasis></screen>

		<caution><para>Only run <application>dh_make -e</application> once. If
		you run it again after you do it the first time, it will not work
		properly. If you want to change it or made a mistake, remove the
		source directory and untar the upstream tarball afresh. Then you can
		migrate into the source directory and try again.</para></caution>
		
		<para>Running <application>dh_make -e</application> does two
			things:</para>

		<orderedlist> 
			
			<listitem><para>Creates the
					<filename>hello_2.1.1.orig.tar.gz</filename> file in the parent
					directory,</para></listitem>

			<listitem><para>Crée les fichiers de base utilisés dans <filename>debian/</filename> et plusieurs fichiers de gabarit (template) (.ex) qui peuvent être utiles.</para></listitem>
			
		</orderedlist>

		<para>Le programme <application>Hello</application> n'est pas très compliqué, et comme nous l'avons vu dans <xref linkend="basic-scratch"/>, la mise en paquet ne demande pas beaucoup plus que les fichiers basiques. À cet effet, retirons les fichiers <filename>.ex</filename> :</para>

		<screen>cd debian
rm *.ex *.EX</screen>

		<para>Pour <application>hello</application>, vous aurez aussi besoin des fichiers  <filename>README.Debian</filename> (fichier README (en français : LISEZ-MOI) pour les choses spécifiques à Debian, pas le README du programme), <filename>dirs</filename> (utilisé par <application>dh_installdirs</application> pour créer les répertoires nécessaires), <filename>docs</filename> (utilisé par <application>dh_installdocs</application> pour installer la documentation du programme) ou <filename>info</filename> (utilisé par <application>dh_installinfo</application> pour installer le fichier d'information) dans le répertoire <filename>debian</filename>. Pour plus d'information sur ces fichiers, voyez <xref linkend="appendix-examples"/>.</para>

		<para>À ce moment, vous ne devriez avoir que les fichiers <filename>changelog</filename>, <filename>compat</filename>, <filename>control</filename>, <filename>copyright</filename>, et <filename>rules</filename> dans le répertoire <filename>debian</filename>. Depuis <xref linkend="basic-scratch"/>, le seul nouveau fichier est <filename>compat</filename>, qui est un fichier contenant la version du <application>debhelper</application> (dans ce cas 4) utilisé.</para>

		<para>Vous devrez ajuster légèrement le <filename>changelog</filename> dans ce cas pour refléter que ce paquet s'appelle <application>hello-debhelper</application> au lieu de juste <application>hello</application> (NdT : en anglais, toujours !) :</para>

		<screen>
hello-debhelper (2.1.1-1) dapper; urgency=low

  * Initial release

  -- Captain Packager &lt;packager@coolness.com&gt; Thu, 6 Apr 2006 10:07:19 -0700</screen>
		
		<para>En utilisant <application>debhelper</application>, les seules choses à changer dans <filename>control</filename> sont le nom (remplacer <application>hello</application> par <application>hello-debhelper</application>) et ajouter <application>debhelper (&gt;= 4.0.0)</application> au champ <emphasis>Build-Depends</emphasis> pour le paquet source. Le paquet <phrase>Ubuntu</phrase> pour <application>hello-debhelper</application> ressemble à :</para>

		<screen>
Source: hello-debhelper
Section: devel
Priority: extra
Maintainer: Capitan Packager &lt;packager@coolness.com&gt;
Standards-Version: 3.6.1
Build-Depends: debhelper (&gt;= 4)

Package: hello-debhelper
Architecture: any
Depends: ${shlibs:Depends}
Conflicts: hello
Provides: hello
Replaces: hello
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting. It
 allows non-programmers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).
 
This is the same as the hello package, except it uses debhelper to
 make the deb. Please see debhelper as to what it is.
		</screen>

		<para>Nous pouvons copier le fichier <filename>copyright</filename> et les scripts <filename>postinst</filename> et <filename>prerm</filename> du paquet <phrase>Ubuntu</phrase> <application>hello-debhelper</application>, puisqu'ils n'ont pas changé depuis <xref linkend="basic-scratch"/>. Nous allons aussi copier le fichier <filename>rules</filename> afin de pouvoir l'inspecter.</para>

		<screen>
cp ../../ubuntu/hello-debhelper-2.1.1/debian/copyright .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/postinst .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/prerm .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/rules.</screen>

		<para>The last file we need to look at is <filename>rules</filename>,
			where the power of
			<application>debhelper</application> scripts can be seen. The
			<application>debhelper</application> version of
			<filename>rules</filename> is somewhat smaller (54 lines as
			opposed to 72 lines in the version from <xref linkend="basic-scratch-rules"/>).</para>

		<para>The <application>debhelper</application> version looks like:</para>

		<screen> #!/usr/bin/make -f

package = hello-debhelper

CC = gcc
CFLAGS = -g -Wall

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif

#export DH_VERBOSE=1

clean:
        dh_testdir
        dh_clean
        rm -f build
        -$(MAKE) -i distclean

install: build
        dh_clean
        dh_installdirs
        $(MAKE) prefix=$(CURDIR)/debian/$(package)/usr \
                mandir=$(CURDIR)/debian/$(package)/usr/share/man \
                infodir=$(CURDIR)/debian/$(package)/usr/share/info \
                install

build:
        ./configure --prefix=/usr
        $(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
        touch build

binary-indep: install
# There are no architecture-independent files to be uploaded
# generated by this package.  If there were any they would be
# made here.

binary-arch: install
        dh_testdir -a
        dh_testroot -a
        dh_installdocs -a NEWS
        dh_installchangelogs -a ChangeLog
        dh_strip -a
        dh_compress -a
        dh_fixperms -a
        dh_installdeb -a
        dh_shlibdeps -a
        dh_gencontrol -a
        dh_md5sums -a
        dh_builddeb -a

binary: binary-indep binary-arch

.PHONY: binary binary-arch binary-indep clean checkroot
			</screen>

		<para>Notice that tasks like testing if you are in the right directory
			(<application>dh_testdir</application>), making sure you are
			building the package with root privileges
			(<application>dh_testroot</application>), installing documentation
			(<application>dh_installdocs</application> and
			<application>dh_installchangelogs</application>), and cleaning up
			after the build (<application>dh_clean</application>) are handled
			automatically. Many packages much more complicated than
			<application>hello</application> have <filename>rules</filename>
			files no bigger because the <application>debhelper</application>
			scripts handle most of the tasks. For a complete list of
			<application>debhelper</application> scripts, please see <xref linkend="appendix-debhelper"/>. They are also well documented
			in their respective <application>man</application> pages. It is a
			useful exercise to read the man page (they are well written and
			not lengthy) for each helper script used in the above
			<filename>rules</filename> file.</para>

			<sect2>
			<title>Construire le paquet source</title>
			
			<para>Now that we have gone through the files in the
				<filename>debian</filename> directory for
				<application>hello-debhelper</application>, we can build the
				source (and binary) packages. First, let us move back into the
				source directory:</para>
			
			<para><screen>cd ..</screen></para>
			
			<para>Now we build the source package using
				<application>debuild</application>, a wrapper script
				for <application>dpkg-buildpackage</application>:</para>
			
			<para><screen>debuild -S</screen></para>
			
			<para>the binary package, using
				<application>pbuilder</application>:</para>
			
			<para><screen>sudo pbuilder build ../*.dsc</screen></para>

			<para>and finally check the source package for common mistakes using
				<application>lintian</application>:</para>
			
			<screen>cd ..
lintian -i *.dsc</screen>
			
		</sect2>
	
	</sect1>

	<sect1 id="basic-cdbs" status="complete">
		<title>Empaqueter avec CDBS</title>

		<para>CDBS est un outil qui utilise debhelper pour afin de rendre la construction et la maintenance de paquets Debian encore plus simple. Il a plusieurs avantages :</para>

			<itemizedlist>
				<listitem><para>Il produit un <filename>debian/rules</filename> court, lisible et efficace.</para></listitem>
				
				<listitem><para>Il automatise debhelper et autotools pour vous, afin de ne pas avoir à se préoccuper des tâches répétitives.</para></listitem>
				
				<listitem><para>Il vous aide à vous concentrer sur les problèmes d'empaquetage plus importants, parce qu'il vous aide sans limiter la personnalisation.</para></listitem>
				
				<listitem><para>Ses fonctionnalités ont été largement testées, afin que vous ne dussiez point recourir à de sombres bidouilles pour résoudre des problèmes communs.</para></listitem>
				
				<listitem><para>Passer à CDBS est simple</para></listitem>
				
				<listitem><para>Il est extensible</para></listitem>
			</itemizedlist>
		
		<sect2>
			<title>Utiliser CDBS dans les paquets</title>
		
			<para>Utiliser CDBS pour les paquets <phrase>Ubuntu</phrase> est très simple. Après avoir ajouté <application>cdbs</application> à Build-Depends dans <filename>debian/control</filename>, un fichier <filename>debian/rules</filename> basique utilisant CDBS peut se résumer en 2 lignes. Pour une application simple en C/C++ sans règles spéciales, telle que <application>hello</application>, <filename>debian/rules</filename> pourrait ressembler à ça :</para>

			<screen>#!/usr/bin/make -f
				
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/class/autotools.mk</screen>

			<para>That is all you need to build the program! CDBS handles installing and
				cleaning. You can then use the <filename>.install</filename> and
				<filename>.info</filename> files to tune your package with the usual
				debhelper functions in the various sections for
				<filename>debian/rules</filename>.</para>

			<warning><para> Do not use DEB_AUTO_UPDATE_DEBIAN_CONTROL:=yes to
					automatically change <filename>debian/control</filename>. It can
					cause bad things, and Debian considers it a reason to reject a package
					from entering the archives. See <ulink url="http://ftp-master.debian.org/REJECT-FAQ.html">
						http://ftp-master.debian.org/REJECT-FAQ.html</ulink> for more
					information.</para></warning>
			
			<para>As you can see, CDBS mostly works by including <filename>.mk</filename>
				Makefiles in <filename>debian/rules</filename>. The
				<application>cdbs</application> package provides such files in
				<filename>/usr/share/cdbs/1/</filename> that allow you to do quite a lot
				of packaging tasks. Other packages, such as <application>quilt</application>, add
				modules to CDBS and can be used as Build-Depends. Note that you can
				also use your own CDBS rules and include them in the package. The most
				useful modules included with the <application>cdbs</application> package
				are:</para>

			<itemizedlist>
				
				<listitem><para><filename>rules/debhelper.mk</filename>: Calls debhelper
						in all required sections</para></listitem>
			
				<listitem><para><filename>rules/dpatch.mk</filename>: Allows you to use
						dpatch to ease patching the source</para></listitem>
				
				<listitem><para><filename>rules/simple-patchsys.mk</filename>: Provides a
						very easy way to patch the source</para></listitem>
				
				<listitem><para><filename>rules/tarball.mk</filename>: Allows you to build
						packages using the compressed tarball in the
						package</para></listitem>
				
				<listitem><para><filename>class/autotools.mk</filename>: Calls autotools
						in all required sections</para></listitem>
				
				<listitem><para><filename>class/gnome.mk</filename>: Builds GNOME programs
						(requires the proper Build-Depends in
						<filename>debian/control</filename>)</para></listitem>
				
				<listitem><para><filename>class/kde.mk</filename>: Builds KDE programs
						(requires the proper Build-Depends in
						<filename>debian/control</filename>)</para></listitem>
				
				<listitem><para><filename>class/python-distutils.mk</filename>:
						Facilitates packaging Python programs</para></listitem>
			
			</itemizedlist>
		</sect2>
		
		<sect2>
			<title>More information on CDBS</title>
		
			<para>For more information on CDBS, see Marc Dequènes's guide at <ulink url="https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml">https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml</ulink>.
			</para>
		
		</sect2>
	</sect1>
		
	<sect1 id="basic-updating" status="complete">
		<title>Updating Packages</title>

			<para>If you have been around Linux distributions for any amount
				of time, you have realized that there are sometimes bugs in
				programs. In the Debian and <phrase>Ubuntu</phrase> distributions, bugs are
				often fixed through the packaging by patching the source code.
				Sometimes there are bugs in the packaging itself that can
				cause difficulties.</para>

			<para>To patch the program's source code, you could simply download
				the current <phrase>Ubuntu</phrase> source package (with
				<application>apt-get source</application>) and make the needed
				changes. You can then add a new entry to the
				<filename>debian/changelog</filename> using
				<application>dch -i</application> or
				<application>dch -v
					&lt;version&gt;-&lt;revision&gt;</application> to specify
				the new revision. When you run <application>debuild
					-S</application> from the source directory you will have a
				new source package with a new <filename>.diff.gz</filename> in the
				parent directory that
				contains your changes. A problem with this approach is that
				the distinction between source and patches is unclear.</para>

			<para>A solution to this problem is to separate the changes to the
				source code into individual patches stored in the
				<filename>debian</filename> directory. One such patch system
				is called <application>dpatch</application>. The patches are
				stored in the <filename>debian/patches/</filename> directory
				and have a special format.</para>

			<para>To create a <application>dpatch</application>, perform the
				following steps sequentially.</para>

			<para>Create a temporary work space and two copies of the current
				source directory:</para>
			
			<screen>
mkdir tmp
cd tmp
cp -a ../&lt;package&gt;-&lt;version&gt; . 
cp -a &lt;package&gt;-&lt;version&gt; &lt;package&gt;-&lt;version&gt;.orig 
</screen>

			<para>Make the changes in the
				<filename>&lt;package&gt;-&lt;version&gt;</filename>
				directory.</para>

			<para>Create a patch file using <application>diff</application>
				and place it in the <filename>debian/patches</filename>
				directory:</para>

			<screen>
diff -Nru  &lt;package&gt;-&lt;version&gt;.orig &lt;package&gt;-&lt;version&gt; &gt; patch-file
</screen>

			<para>Create the <application>dpatch</application> using
				<application>dpatch patch-template</application> and a file
				named <filename>00list</filename> that lists the dpatches:</para>
			<screen>
dpatch patch-template -p "01_patchname" "patch-file description" \
	&lt; patch-file &gt; 01_patchname.dpatch
echo 01_patchname.dpatch &gt;00list</screen>

			<para>You can now place <filename>01_patchname.dpatch</filename>
				and <filename>00list</filename> in the
				<filename>debian/patches</filename> directory of your source
				package:</para>

			<screen>
mkdir ../&lt;package&gt;-&lt;version&gt;/debian/patches
cp 01_patchname.dpatch 00list ../&lt;package&gt;-&lt;version&gt;/debian/patches
cd ..
rm -rf tmp
			</screen>

			<note><para>You can also edit a pre-existing patch using
				<application>dpatch-edit-patch</application>.</para></note>
			
		<para>Once all the changes have been made, a changelog entry added,
			and <application>dpatch</application> added to the
			<filename>debian/control</filename> file (if needed), then you can
			rebuild the source package with <application>debuild
				-S</application>.</para>

		<para>To get your fixed source package uploaded to the <phrase>Ubuntu</phrase>
			repositories, you will need to get your source package sponsored by
			a person who has upload rights. See <xref linkend="ubuntu-upload"/> for more details. Sometimes, rather
			than giving the entire source package (.diff.gz, .dsc, and
			.orig.tar.gz), it is easier and more efficient to just give the
			difference between the source package that is currently in the
			repositories and your fixed source package. A tool has been
			created to do just that called
			<application>debdiff</application>. Using
			<application>debdiff</application> is similar to using
			<application>diff</application> but is made specifically for
			packaging. You can <application>debdiff</application> the
			source package by:</para>

		<screen>
debdiff &lt;oldpackage&gt;.dsc &lt;newpackage&gt;.dsc &gt; package.debdiff
		</screen>

		<para>or the binary package by:</para>

		<screen>
debdiff &lt;oldpackage&gt;.deb &lt;newpackage&gt;.deb &gt; package.debdiff
		</screen>
	
		<para>Debdiffs are great to attach to bug reports and have ready for a
			sponsor to upload.</para>
		
	</sect1>

	<sect1 id="basic-mistakes" status="complete">
		<title>Common Mistakes</title>
			
		<sect2 id="basic-ex_files">
			<title>dh_make Example Files</title>
			
			<para>When you use dh_make to create the initial "debianization", example files
				for various tasks are created in the <filename>debian/</filename>
				directory. The templates have a .ex extension. If you want to use one,
				rename it to remove the extension. If you do not need it, remove it to
				keep the <filename>debian/</filename> directory clean.</para>

		</sect2>

		<sect2 id="basic-orig-tarball">
			<title>Changing the Original Tarball</title>

			<para>There are two types of source packages, native and non-native.
				A native package is one that is specific to <phrase>Ubuntu</phrase>/Debian. It has the
				<application>debian/</application> directory containing the packaging
				information and any changes to the source included in the tarball (usually
				&lt;packagename&gt;_&lt;version&gt;.tar.gz). Non-native packages are more
				common. A non-native package splits
				the source package into a &lt;packagename&gt;_&lt;version&gt;.orig.tar.gz
				tarball that is identical (hopefully including md5sum) to the source
				tarball downloaded from the project's homepage and a .diff.gz file that
				contains all the differences (<filename>debian/</filename> directory and
				patches) from the original source tarball.</para>

			<para>Here is a list of potential problems that can occur if you change the
				original tarball:</para>
		
			<orderedlist>

				<listitem><para>Reproducibility</para>

					<para>If you take just the .diff.gz and .dsc, you or someone else has
						no means to reproduce the changes in the
						original tarball.</para></listitem>

				<listitem><para>Upgradeability</para>
		
					<para>It is much easier to upgrade to a new upstream (from the author)
						version if the .orig.tar.gz is preserved and there is a clear
						separation between the upstream source and the changes made to
						produce the <phrase>Ubuntu</phrase> source package.</para> </listitem>

				<listitem><para>Debian to <phrase>Ubuntu</phrase> Synchronization</para>

					<para>Changing original tarballs makes it hard to automatically sync
						from Debian to <phrase>Ubuntu</phrase>. Normally, only the .diff.gz and .dsc files
						change within the same upstream version, since the .orig.tar.gz
						file is shared by all the Debian or <phrase>Ubuntu</phrase> revisions. It is much
						more difficult to sync if the md5sums of the .orig.tar.gz files
						are not the same.</para> </listitem>

				<listitem><para>Usage of Revision Control for Debian package</para>
					
					<para>If you use svn (<application>svn-buildpackage</application>) to
						handle your Debian package, you usually don't store the original
						tarball inside. If someone else does a checkout, he'll need to
						get the original tarball separately. Other revision control
						systems can be used to track only the packaging files
						(<filename>debian/</filename>, etc.) and not the whole
						source. However, if the .orig.tar.gz is not the same, then
						obviously problems can occur.</para></listitem>

				<listitem><para>Security tracking</para>

					<para>Consider a situation where someone <emphasis>wants</emphasis> to
							introduce a backdoor/rootkit or other evil stuff. If the original
							tarball is intact, it can be scanned easily through the .diff.gz to
							see if the person who modified the package tried to do something evil.
							If the tarball has changed, however, you also need to check the
							differences between the tarball and the original source.</para>
		
						<note><para>You still have to trust the authors of the software 
								not to do anything evil, but that is the case regardless of
								whether the original is changed.</para></note></listitem>

				<listitem><para>The .diff.gz</para>
						
					<para>The option to use the .diff.gz to reflect changes to the
						original tarball already exists, so it is easy to make changes
						without touching the original tarball.</para></listitem>
				
			</orderedlist>


			<para><emphasis role="bold">It is acceptable to change the original tarball
					if one or more of the following hold true:</emphasis></para>

			<itemizedlist>
	
				<listitem><para>It contains non-free parts that cannot be redistributed.
						Remove those parts, and note it in the packaging. Often
						such packages use "dfsg" (which stands for Debian Free Software
						Guidelines) in the package name and/or versioning to indicate that
						non-free parts have been removed.</para></listitem>
					
				<listitem><para>The authors only provide bzip2'ed source.</para>
					<itemizedlist>
						
						<listitem><para>Just <application>bunzip2</application> the
								.tar.bz2 and <application>gzip -9 </application> the
								resulting tar.</para></listitem>
							
						<listitem><para>The md5sums of the .tar you provide and the
								original .tar must match!</para></listitem>
	
						<listitem><para>Eventually provide a get-orig-source rule in
								debian/rules that does this conversion
								automatically.</para></listitem>
					
					</itemizedlist>
				</listitem>
					
				<listitem><para>Directly imported from SVN</para>
					<itemizedlist>
						<listitem><para>Provide get-orig-source in debian/rules.</para></listitem>
					</itemizedlist>
				</listitem>
	
			</itemizedlist>

			<para><emphasis role="bold">The following are <emphasis>not</emphasis> reasons to
					change the original tarball:</emphasis></para>
			
			<itemizedlist>
				
				<listitem><para>Wrong Directory Layout</para>
					
					<note><para><application>dpkg-source</application> is quite flexible
							and manages to produce the correct directory layout even
							if:</para></note>
						
					<itemizedlist>
						
						<listitem><para>The directory inside the tarball is not named
								&lt;upstream&gt;-&lt;version&gt;.</para></listitem>
				
						<listitem><para>There is no subdirectory inside the tarball.</para></listitem>
					</itemizedlist>
			
				</listitem>
			
				<listitem><para>Files need to be removed to keep the .diff.gz small
						(e.g., files created by autotools). Everything that needs to
						be deleted should be removed in the <application>clean</application> 
						rule. Since the .diff.gz is created with diff -u, you will not see 
						removed files in the .diff.gz.</para></listitem>
										
				<listitem><para>Files need to be modified. Files that need to be modified
						should to go into .diff.gz. That is its purpose!</para></listitem>
				
				<listitem><para>Wrong permissions on files. You can use
						<filename>debian/rules</filename> to do this.</para></listitem>
	
			</itemizedlist>
			
			
			<tip><para>What do I do with an .orig.tar.gz that already includes a
					<filename>debian/</filename> dir?</para>
					
				<para>Do not repackage it. You can ask the author(s) to delete the debian/
					dir and provide a diff.gz instead. This makes it easier to review their
					work, and it separates packaging from program source.  </para>
			</tip>
				
			<note><para>It is always a good idea to contact the program's author(s) and ask
					if you may correct autoconf issues, directory layout, an outdated Free
					Software Foundation address in COPYRIGHT files, or other things that
					are not specific to the packaging but would be convenient for you so
					you do not need to "patch" the source in .diff.gz.</para></note>
		
		</sect2>

		<sect2>
			<title>Copyright Information</title>

			<para>The <filename>debian/copyright</filename> file should contain:</para>
			
			<itemizedlist>
				
				<listitem><para>The licensing information for <emphasis>all</emphasis>
						files in the source. Sometimes author(s) put a license in
						<filename>COPYING</filename> but have different licensing
						information for some files in the source.</para></listitem>

				<listitem><para>The copyright holder(s) and year(s).</para></listitem>

				<listitem><para>The <emphasis>entire</emphasis> license unless it is one
						of the licenses found in
						<filename>/usr/share/common-licenses</filename>, in which case you
						should just include the preamble.</para></listitem>

			</itemizedlist>
				
		</sect2>

	</sect1>

</chapter>
