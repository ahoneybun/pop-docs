msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2006-09-21 14:47-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: C/packagingguide-C.omf:6(creator) 
msgid "ubuntu-doc@lists.ubuntu.com (Ubuntu Documentation Project)"
msgstr ""

#: C/packagingguide-C.omf:9(maintainer) 
msgid "mantha@ubuntu.com (Jordan Mantha)"
msgstr ""

#: C/packagingguide-C.omf:12(title) 
msgid "Packaging new applications for Ubuntu"
msgstr ""

#: C/packagingguide-C.omf:15(date) 
msgid "2005-11-28"
msgstr ""

#: C/packagingguide-C.omf:20(description) 
msgid "Learn how to package programs so that they can easily be included in Ubuntu and other Debian based distributions."
msgstr ""

#: C/packagingguide-C.omf:22(type) 
msgid "HOWTO"
msgstr ""

#: C/updating.xml:17(title) 
msgid "Updating Packages"
msgstr ""

#: C/updating.xml:19(para) 
msgid "If you have been around Linux distributions for any amount of time, you have realized that there are sometimes bugs in programs. In the Debian and &ubuntu; distributions, bugs are often fixed through the packaging by patching the source code. Sometimes there are bugs in the packaging itself that can cause difficulties."
msgstr ""

#: C/updating.xml:26(para) 
msgid "To patch the program's source code, you could simply download the current &ubuntu; source package (with <application>apt-get source</application>) and make the needed changes. You can then add a new entry to the <filename>debian/changelog</filename> using <application>dch -i</application> or <application>dch -v &lt;version&gt;-&lt;revision&gt;</application> to specify the new revision. When you run <application>debuild -S</application> from the source directory you will have a new source package with a new <filename>.diff.gz</filename> in the parent directory that contains your changes. A problem with this approach is that the distinction between source and patches is unclear."
msgstr ""

#: C/updating.xml:41(para) 
msgid "A solution to this problem is to separate the changes to the source code into individual patches stored in the <filename>debian</filename> directory. One such patch system is called <application>dpatch</application>. The patches are stored in the <filename>debian/patches/</filename> directory and have a special format."
msgstr ""

#: C/updating.xml:48(para) 
msgid "To create a <application>dpatch</application>, perform the following steps sequentially."
msgstr ""

#: C/updating.xml:51(para) 
msgid "Create a temporary work space and two copies of the current source directory:"
msgstr ""

#: C/updating.xml:54(screen) 
#, no-wrap
msgid "\nmkdir tmp\ncd tmp\ncp -a ../&lt;package&gt;-&lt;version&gt; . \ncp -a &lt;package&gt;-&lt;version&gt; &lt;package&gt;-&lt;version&gt;.orig \n"
msgstr ""

#: C/updating.xml:61(para) 
msgid "Make the changes in the <filename>&lt;package&gt;-&lt;version&gt;</filename> directory."
msgstr ""

#: C/updating.xml:65(para) 
msgid "Create a patch file using <application>diff</application> and place it in the <filename>debian/patches</filename> directory:"
msgstr ""

#: C/updating.xml:69(screen) 
#, no-wrap
msgid "\ndiff -Nru  &lt;package&gt;-&lt;version&gt;.orig &lt;package&gt;-&lt;version&gt; &gt; patch-file\n"
msgstr ""

#: C/updating.xml:73(para) 
msgid "Create the <application>dpatch</application> using <application>dpatch patch-template</application> and a file named <filename>00list</filename> that lists the dpatches:"
msgstr ""

#: C/updating.xml:76(screen) 
#, no-wrap
msgid "\ndpatch patch-template -p \"01_patchname\" \"patch-file description\" \\\n\t&lt; patch-file &gt; 01_patchname.dpatch\necho 01_patchname.dpatch &gt;00list"
msgstr ""

#: C/updating.xml:81(para) 
msgid "You can now place <filename>01_patchname.dpatch</filename> and <filename>00list</filename> in the <filename>debian/patches</filename> directory of your source package:"
msgstr ""

#: C/updating.xml:86(screen) 
#, no-wrap
msgid "\nmkdir ../&lt;package&gt;-&lt;version&gt;/debian/patches\ncp 01_patchname.dpatch 00list ../&lt;package&gt;-&lt;version&gt;/debian/patches\ncd ..\nrm -rf tmp\n\t\t\t"
msgstr ""

#: C/updating.xml:93(para) 
msgid "You can also edit a pre-existing patch using <application>dpatch-edit-patch</application>."
msgstr ""

#: C/updating.xml:96(para) 
msgid "Once all the changes have been made, a changelog entry added, and <application>dpatch</application> added to the <filename>debian/control</filename> file (if needed), then you can rebuild the source package with <application>debuild -S</application>."
msgstr ""

#: C/updating.xml:102(para) 
msgid "To get your fixed source package uploaded to the &ubuntu; repositories, you will need to get your source package sponsored by a person who has upload rights. See <xref linkend=\"ubuntu-upload\"/> for more details. Sometimes, rather than giving the entire source package (.diff.gz, .dsc, and .orig.tar.gz), it is easier and more efficient to just give the difference between the source package that is currently in the repositories and your fixed source package. A tool has been created to do just that called <application>debdiff</application>. Using <application>debdiff</application> is similar to using <application>diff</application> but is made specifically for packaging. You can <application>debdiff</application> the source package by:"
msgstr ""

#: C/updating.xml:117(screen) 
#, no-wrap
msgid "\ndebdiff &lt;oldpackage&gt;.dsc &lt;newpackage&gt;.dsc &gt; package.debdiff\n\t\t"
msgstr ""

#: C/updating.xml:121(para) 
msgid "or the binary package by:"
msgstr ""

#: C/updating.xml:123(screen) 
#, no-wrap
msgid "\ndebdiff &lt;oldpackage&gt;.deb &lt;newpackage&gt;.deb &gt; package.debdiff\n\t\t"
msgstr ""

#: C/updating.xml:127(para) 
msgid "Debdiffs are great to attach to bug reports and have ready for a sponsor to upload."
msgstr ""

#: C/ubuntu.xml:15(title) 
msgid "Ubuntu Packaging"
msgstr ""

#: C/ubuntu.xml:18(title) 
msgid "Uploading and Review"
msgstr ""

#: C/ubuntu.xml:20(para) 
msgid "Once you have created a source package (either a completely new package or just an update/bugfix), you will want to distribute your package so that other people can enjoy your hard work. The most effective way to do that for &ubuntu; is to contribute your package to the Universe repository. The community developers who are responsible for the Universe repository are known as Masters of the Universe (<ulink url=\"https://wiki.ubuntu.com/MOTU\">MOTU</ulink>). <ulink url=\"http://revu.tauware.de\">REVU</ulink> is a web-based tool that gives people a place to upload their source packages for other people to look at and for MOTUs to review in a structured manner."
msgstr ""

#: C/ubuntu.xml:32(title) 
msgid "Contributing as an Uploader"
msgstr ""

#: C/ubuntu.xml:34(para) 
msgid "First, you will need to have your <ulink url=\"https://wiki.ubuntu.com/GPGKey\">GPG Key</ulink> added to the REVU keyring. This step ensures that your packages really come from you and helps track uploads."
msgstr ""

#: C/ubuntu.xml:39(para) 
msgid "REVU uses your <ulink url=\"https://launchpad.net\">Launchpad</ulink> account to look up your <application>gpg</application> key so make sure you have a Launchpad account and you have put your <application>gpg</application> key in your user profile there. Once this is one you can join the <ulink url=\"https://launchpad.net/people/ubuntu-universe-contributors\">Universe Contributors</ulink> team and then email <ulink url=\"mailto:admin@tiber.tauware.de\">admin@tiber.tauware.de</ulink> asking for your <application>gpg</application> key to be updated on REVU. When this is done you will be able to upload your packages. You don't need a password to upload packages, only to log in to the website and to reply to comments."
msgstr ""

#: C/ubuntu.xml:41(para) 
msgid "It is not necessary to have your key signed by others to upload to REVU, but it is a good idea to have it done at some point."
msgstr ""

#: C/ubuntu.xml:46(title) 
msgid "Uploading your packages"
msgstr ""

#: C/ubuntu.xml:48(para) 
msgid "Uploading to REVU uses <application>dput</application>. The &ubuntu; version of <application>dput</application> already knows about REVU so you do not need to change any configuration files. Only upload signed packages, and unlike other repositories, you should always include the original tarball, otherwise reviewers will not be able to look at your extracted source package. In order to do so, use the options \"-S -sa\" with <application>debuild</application> or <application>dpkg-buildpackage</application> to build only the source package and to include the original source in the upload."
msgstr ""

#: C/ubuntu.xml:58(para) 
msgid "After the source package is built, you can use <application>dput</application> with the above config file changes to upload it by specifying just the <filename>_source.changes</filename> file that was created:"
msgstr ""

#: C/ubuntu.xml:63(screen) 
#, no-wrap
msgid "dput revu *_source.changes"
msgstr ""

#: C/ubuntu.xml:65(para) 
msgid "If you are reuploading a changed package (after receiving reviews), you may get an error like this:"
msgstr ""

#: C/ubuntu.xml:68(screen) 
#, no-wrap
msgid "\nUpload package to host revu\nAlready uploaded to tauware.de\nDoing nothing for myapp_source.changes"
msgstr ""

#: C/ubuntu.xml:73(para) 
msgid "To fix, add the -f option to dput to force the upload or remove the <filename>.upload</filename> file that was created by <application>dput</application>."
msgstr ""

#: C/ubuntu.xml:77(para) 
msgid "Processing of uploads is done every five minutes, so if your upload does not show up, please contact the REVU administrators by email, or join the &irc-network; IRC channel #ubuntu-motu."
msgstr ""

#: C/ubuntu.xml:83(title) 
msgid "How to login to REVU"
msgstr ""

#: C/ubuntu.xml:85(para) 
msgid "After your first upload, you are registered automatically in the database and assigned a random password. On the <ulink url=\"http://revu.tauware.de\">REVU</ulink> website, use the email address you used in the changelog file of your upload as the login and click the 'recover password' link. You will be taken to a page that has your encrypted password with instructions for decrypting it."
msgstr ""

#: C/ubuntu.xml:96(title) 
msgid "View and comment uploads"
msgstr ""

#: C/ubuntu.xml:98(para) 
msgid "Packages uploaded to REVU are public. You can browse them without logging in to the system. However, commenting on uploads is available only to registered users. As an uploader, you can only comment on your own uploads. This can be useful to give reviewers some info on the changes you have made between two uploads of your packages."
msgstr ""

#: C/ubuntu.xml:107(title) 
msgid "Additional rules"
msgstr ""

#: C/ubuntu.xml:111(para) 
msgid "You must have reviewed the package for known security vulnerabilities and must provide patches for them."
msgstr ""

#: C/ubuntu.xml:114(para) 
msgid "The package can be refused on the grounds of known security problems."
msgstr ""

#: C/ubuntu.xml:117(para) 
msgid "You must have included a copyright and license file, and those must allow inclusion of the package in the Universe component and redistribution via Ubuntu mirrors."
msgstr ""

#: C/ubuntu.xml:121(para) 
msgid "The package must be known to build on top of the main component of the current &ubuntu; stable release. It is permissible to require other packages already in Universe."
msgstr ""

#: C/ubuntu.xml:128(title) 
msgid "Getting Help"
msgstr ""

#: C/ubuntu.xml:129(para) 
msgid "If you need assistance on these steps, or if you have questions about REVU, you can ask in #ubuntu-motu on the &irc-network; IRC network."
msgstr ""

#: C/ubuntu.xml:138(title) 
msgid "Merges and Syncs"
msgstr ""

#: C/ubuntu.xml:142(para) 
msgid "<emphasis role=\"bold\">Requirements:</emphasis> build-essential, automake, gnupg, lintian, fakeroot, patchutils, debhelper and <xref linkend=\"gs-pbuilder\"/>."
msgstr ""

#: C/ubuntu.xml:147(para) 
msgid "&ubuntu; is based on the Debian Linux distribution and uses the same package management system (APT). At the beginning of each &ubuntu; development cycle, the packages in &ubuntu; are updated to those in the Debian unstable branch. However, because &ubuntu; is not the same as Debian, some of the packages need to be modified to work in &ubuntu;. There might also be bug fixes that &ubuntu; developers have introduced into the packages. You can determine whether this has taken place by noting the package version. If the package version includes ubuntu in it (an example would be gimp-2.2.9-3ubuntu2), then the &ubuntu; developers have made changes, and it is no longer the same as the Debian package. There are more than 1000 such modified packages in the Universe repository."
msgstr ""

#: C/ubuntu.xml:158(para) 
msgid "At the start of each Ubuntu development cycle, a decision is made regarding these Ubuntu versioned packages. Of course if the Debian version hasn't changed since the last &ubuntu; release, then nothing needs to be changed. However, if there is a newer version of the package in Debian, then one of two things should happen. If all of the reasons for Ubuntu modifications (bug fixes, dependencies, etc.) are fixed in the new Debian package, then we can just take the Debian package directly. This decision is called a <emphasis>sync</emphasis>. However, if the new Debian version has the same issues that caused the Ubuntu version to be made, then those changes need to be applied to the new Debian version, too. This decision is called <emphasis>merging</emphasis>."
msgstr ""

#: C/ubuntu.xml:170(title) 
msgid "Merging Tutorial"
msgstr ""

#: C/ubuntu.xml:171(para) 
msgid "The merging process involves looking at the changes to both the Debian and Ubuntu source packages and determining what has changed and which changes are Ubuntu-specific. Let us now look at an example, a popular CD creation program called <application>xcdroast</application>."
msgstr ""

#: C/ubuntu.xml:176(para) 
msgid "To start, make a folder to hold our project, then navigate there:"
msgstr ""

#: C/ubuntu.xml:177(screen) 
#, no-wrap
msgid "\nmkdir ~/xcdroast\ncd ~/xcdroast"
msgstr ""

#: C/ubuntu.xml:180(para) 
msgid "Now download all of the source packages involved into this directory:"
msgstr ""

#: C/ubuntu.xml:183(para) 
msgid "The <application>xcdroast</application> source tarball that is used by all versions:"
msgstr ""

#: C/ubuntu.xml:187(ulink) 
msgid "xcdroast_0.98+0alpha15.orig.tar.gz"
msgstr ""

#: C/ubuntu.xml:192(para) 
msgid "The &ubuntu; Breezy source package files:"
msgstr ""

#: C/ubuntu.xml:195(ulink) 
msgid "xcdroast_0.98+0alpha15-1.1ubuntu1.dsc"
msgstr ""

#: C/ubuntu.xml:199(ulink) 
msgid "xcdroast_0.98+0alpha15-1.1ubuntu1.diff.gz"
msgstr ""

#: C/ubuntu.xml:205(para) 
msgid "The Debian source package files that the Breezy packages are derived from:"
msgstr ""

#: C/ubuntu.xml:208(ulink) 
msgid "xcdroast_0.98+0alpha15-1.1.diff.gz"
msgstr ""

#: C/ubuntu.xml:212(ulink) 
msgid "xcdroast_0.98+0alpha15-1.1.dsc"
msgstr ""

#: C/ubuntu.xml:218(para) 
msgid "The new Debian source package files that the Dapper packages will be derived from:"
msgstr ""

#: C/ubuntu.xml:222(ulink) 
msgid "xcdroast_0.98+0alpha15-3.dsc"
msgstr ""

#: C/ubuntu.xml:226(ulink) 
msgid "xcdroast_0.98+0alpha15-3.diff.gz"
msgstr ""

#: C/ubuntu.xml:232(para) 
msgid "These steps can also be done by searching for the Debian packages at <ulink url=\"packages.debian.org\">packages.debian.org</ulink> and the Ubuntu packages at <ulink url=\"packages.ubuntu.com\">packages.ubuntu.com</ulink>."
msgstr ""

#: C/ubuntu.xml:236(para) 
msgid "A very useful package to have installed when doing merges (or any Ubuntu packaging) is <application>devscripts</application>. If you do not have that already installed, install it before proceeding."
msgstr ""

#: C/ubuntu.xml:240(para) 
msgid "By looking at the &ubuntu; changelog you should be able to see which differences to expect between the Ubuntu package and the Debian package from which it was derived. For xcdroast, the &ubuntu; changelog can be found at <ulink url=\"http://changelogs.ubuntu.com/changelogs/pool/universe/x/xcdroast/xcdroast_0.98+0alpha15-1.1ubuntu1/changelog\"> changelogs.ubuntu.com</ulink>. It says that a .desktop file was fixed and properly installed to close a bug reported in <ulink url=\"https://launchpad.net/malone/bugs/2698\">Malone</ulink>."
msgstr ""

#: C/ubuntu.xml:249(para) 
msgid "Now inspect the actual changes in the source packages:"
msgstr ""

#: C/ubuntu.xml:250(screen) 
#, no-wrap
msgid "\ndebdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-1.1ubuntu1.dsc | \\\n\tubuntu.debdiff | less ubuntu.debdiff"
msgstr ""

#: C/ubuntu.xml:254(para) 
msgid "The lines that start with - have been removed from the Debian package, and those that start with + have been added to the &ubuntu; package."
msgstr ""

#: C/ubuntu.xml:256(para) 
msgid "The following is what we see:"
msgstr ""

#: C/ubuntu.xml:259(para) 
msgid "In debian/rules install is being used instead of cp to install the xcdroast icon. Also, there is a new line installing the .desktop file."
msgstr ""

#: C/ubuntu.xml:263(para) 
msgid "In debian/changelog the changes made are added to the changelog entry."
msgstr ""

#: C/ubuntu.xml:266(para) 
msgid "In debian/dirs usr/share/applications has been added for the install lines above to work properly."
msgstr ""

#: C/ubuntu.xml:270(para) 
msgid "xcdroast.desktop is added"
msgstr ""

#: C/ubuntu.xml:274(para) 
msgid "Now we know how the Ubuntu source was changed. Now we need to see what has changed in the Debian sources."
msgstr ""

#: C/ubuntu.xml:276(screen) 
#, no-wrap
msgid "\ndebdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-3.dsc &gt; debian.debdiff\nless debian.debdiff"
msgstr ""

#: C/ubuntu.xml:279(para) 
msgid "There is a lot more in this debdiff than in the last one. One way we can get a better idea of what has changed is to see what files were changed in the debdiff:"
msgstr ""

#: C/ubuntu.xml:282(screen) 
#, no-wrap
msgid "grep diff debian.debdiff"
msgstr ""

#: C/ubuntu.xml:284(para) 
msgid "This indicates that debian/postinst, debian/rules, debian/changelog, debian/doc-base.manual, debian/control, and debian/menu were changed in the new Debian version."
msgstr ""

#: C/ubuntu.xml:286(para) 
msgid "Thus we can see that we need to check debian/rules to see if the &ubuntu; changes were made. We can also see that debian/dirs was not changed from the old Debian version. Let us now look at the files. We can unpack the source package by using <application>dpkg-source</application>:"
msgstr ""

#: C/ubuntu.xml:291(screen) 
#, no-wrap
msgid "dpkg-source -x xcdroast_0.98+0alpha15-3.dsc"
msgstr ""

#: C/ubuntu.xml:293(para) 
msgid "This will decompress the xcdroast_0.98+0alpha15.orig.tar.gz file, create a xcdroast-0.98+0alpha15 directory, and apply the changes found in xcdroast_0.98+0alpha15-3.diff.gz."
msgstr ""

#: C/ubuntu.xml:295(para) 
msgid "Now navigate to the debian directory:"
msgstr ""

#: C/ubuntu.xml:297(screen) 
#, no-wrap
msgid "cd xcdroast-0.98+0alpha15/debian"
msgstr ""

#: C/ubuntu.xml:299(para) 
msgid "One can see in <filename>rules</filename> that changes made by &ubuntu; were not applied to the new Debian version. This means that:"
msgstr ""

#: C/ubuntu.xml:302(screen) 
#, no-wrap
msgid "cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps"
msgstr ""

#: C/ubuntu.xml:304(para) 
msgid "...should be changed to:"
msgstr ""

#: C/ubuntu.xml:306(screen) 
#, no-wrap
msgid "\n#cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps\n\n#install desktop and icon\ninstall -D -m 644 $(CURDIR)/debian/xcdroast.desktop \\\n\t$(CURDIR)/debian/xcdroast/usr/share/applications/xcdroast.desktop\ninstall -D -m 644 $(CURDIR)/debian/xcdroast.xpm \\\n\t$(CURDIR)/debian/xcdroast/usr/share/pixmaps/xcdroast.xpm"
msgstr ""

#: C/ubuntu.xml:315(para) 
msgid "Now in <filename>dirs</filename>, the following line needs to be added for the .desktop file to be installed:"
msgstr ""

#: C/ubuntu.xml:316(screen) 
#, no-wrap
msgid "usr/share/applications"
msgstr ""

#: C/ubuntu.xml:318(para) 
msgid "Now we need the actual .desktop file (saved as <emphasis>debian/xcdroast.desktop</emphasis>). From the ubuntu.debdiff (or the Ubuntu source package), we see that it is:"
msgstr ""

#: C/ubuntu.xml:320(screen) 
#, no-wrap
msgid "\n[Desktop Entry]\nEncoding=UTF-8\nName=X-CD-Roast\nComment=Create a CD\nExec=xcdroast\nIcon=xcdroast.xpm\nType=Application\nCategories=Application;AudioVideo;"
msgstr ""

#: C/ubuntu.xml:330(para) 
msgid "The last change that needs to be made is in <filename>changelog</filename>. Not only do we need to add what we have just done (merge with Debian), but we should also add in the previous &ubuntu; changelog entries. To do this, run <application>dch -i -D dapper</application> and put something to the effect of:"
msgstr ""

#: C/ubuntu.xml:335(emphasis) 
msgid "ubuntu1"
msgstr ""

#: C/ubuntu.xml:334(screen) 
#, no-wrap
msgid "\nxcdroast (0.98+0alpha15-3<placeholder-1/>) dapper; urgency=low\n\n  * Resynchronise with Debian."
msgstr ""

#: C/ubuntu.xml:339(para) 
msgid "Make sure to change the version number to the correct &ubuntu; version. Also add:"
msgstr ""

#: C/ubuntu.xml:341(screen) 
#, no-wrap
msgid "\nxcdroast (0.98+0alpha15-1.1ubuntu1) breezy; urgency=low\n\n  * Fix and install existing .desktop file. (Closes Malone #2698)\n\t\t\t\t\n  -- Captain Packager &lt;packager@coolness.com&gt;  Sat,  1 Oct 2005 19:39:04 -0400"
msgstr ""

#: C/ubuntu.xml:347(para) 
msgid "between the 0.98+0alpha15-1.1 and 0.98+0alpha15-2 log entries."
msgstr ""

#: C/ubuntu.xml:349(para) 
msgid "Now you can build and test the new source packages. There are different ways to do this, but one example is:"
msgstr ""

#: C/ubuntu.xml:350(screen) 
#, no-wrap
msgid "\ncd ..\ndebuild -S\ncd ..\nsudo pbuilder build xcdroast_0.98+0alpha15-3ubuntu1.dsc"
msgstr ""

#: C/ubuntu.xml:356(para) 
msgid "This will recreate the source package, sign it with your default GPG key, and build the package in a pbuilder environment to make sure it builds correctly. Make sure to always test your packages before submitting patches. The last step is to make a debdiff that can be attached to an existing bug report or given to the MOTUs in the #ubuntu-motu IRC channel. To do this, we get the difference between the Debian unstable source package and the new &ubuntu; version:"
msgstr ""

#: C/ubuntu.xml:362(screen) 
#, no-wrap
msgid "debdiff xcdroast_0.98+0alpha15-3.dsc xcdroast_0.98+0alpha15-3ubuntu1.dsc &gt; \\\n\txcdroast_0.98+0alpha15-3ubuntu1.debdiff"
msgstr ""

#: C/ubuntu.xml:368(title) 
msgid "Packaging for Kubuntu"
msgstr ""

#: C/ubuntu.xml:370(para) 
msgid "As one might imagine, the main packaging issues specific to Kubuntu are with KDE and Qt."
msgstr ""

#: C/ubuntu.xml:374(title) 
msgid "Build Dependencies"
msgstr ""

#: C/ubuntu.xml:376(para) 
msgid "Kubuntu programs are mostly KDE ones. Therefore, they need to Build-Depend on <filename>kdelibs4-dev</filename>. Since KDE's focus is to have programs interacting, some programs might also need to Build-Depend on other parts of KDE, such as <filename>kdepim-dev</filename>. Be sure to get the list of necessary dependencies for your program."
msgstr ""

#: C/ubuntu.xml:386(title) 
msgid "Desktop Files"
msgstr ""

#: C/ubuntu.xml:388(para) 
msgid "KDE has some specific paths. Most settings for KDE are installed in either <filename>/etc/kde3/</filename> or <filename>/usr/share/apps/</filename>. It is important to note that the general desktop files for KDE should go to <filename>/usr/share/applications/kde/</filename>. The install path for the desktop files should be fixed if they do not use this (except for desktop files like service menus)."
msgstr ""

#: C/ubuntu.xml:395(para) 
msgid "KDE desktop files also need specific entries to fit in the KMenu. A minimal desktop file for a KDE program could be something like this:"
msgstr ""

#: C/ubuntu.xml:399(screen) 
#, no-wrap
msgid "[Desktop Entry]\nEncoding=UTF-8\nName=Kfoo\nName[xx]=Kfoo\nGenericName=Bar description\nExec=kfoo\nIcon=kfoo\nTerminal=false\nCategories=Qt;KDE;Utility;"
msgstr ""

#: C/ubuntu.xml:409(para) 
msgid "Note that the Categories field must begin with Qt;KDE;. There are specific desktop file entries for KDE programs and modules that allow su to declare the given programs as KCModules or autostart them when logging in."
msgstr ""

#: C/ubuntu.xml:417(title) 
msgid "Generating .pot Files"
msgstr ""

#: C/ubuntu.xml:419(para) 
msgid "The Ubuntu translation website, <ulink url=\"https://launchpad.net/rosetta/\">Rosetta</ulink>, now supports KDE, which means KDE packages need to support Rosetta by generating .pot template files for translators. If you use <application>cdbs</application> in edgy, your package should now automatically build and check for a .pot file in po/ directory."
msgstr ""

#: C/ubuntu.xml:426(para) 
msgid "You will need the <ulink url=\"../files/kubuntu_01_kdepot.diff\">kdepot patch</ulink> (or similar; it may not apply cleanly depending on the age of the admin directory)."
msgstr ""

#: C/ubuntu.xml:430(para) 
msgid "If your package uses <application>debhelper</application> or <application>cdbs</application> and includes its own kde.mk file, you need to add the rules yourself."
msgstr ""

#: C/ubuntu.xml:434(para) 
msgid "For <application>cdbs</application>, add these lines to debian/rules:"
msgstr ""

#: C/ubuntu.xml:436(screen) 
#, no-wrap
msgid "\ncommon-post-build-arch::\n\tmkdir -p po\n        XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages\n\nclean::\n        rm -rf po"
msgstr ""

#: C/ubuntu.xml:443(para) 
msgid "For <application>debhelper</application>, add the following to the end of the <emphasis>install</emphasis> rule:"
msgstr ""

#: C/ubuntu.xml:445(screen) 
#, no-wrap
msgid "\nmkdir -p po\nXGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages"
msgstr ""

#: C/ubuntu.xml:448(para) 
msgid "Also for <application>debhelper</application>, add the following to the <emphasis>clean</emphasis> rule:"
msgstr ""

#: C/ubuntu.xml:449(screen) 
#, no-wrap
msgid "\nrm -f po/*.pot"
msgstr ""

#: C/patch-systems.xml:17(title) 
msgid "Patch Systems"
msgstr ""

#: C/patch-systems.xml:18(para) 
msgid "Quite often it turns out that the upstream source needs to be patched, either to adjust the program to work with Ubuntu or to fix bugs in the source before they are fixed upstream. But how should we reperesent these changes? We could simply make the changes in the unpacked source package, in which case the patch would be expressed in the <filename>.diff.gz</filename> file. However, this is not ideal. If there is more than one patch you loose the ability to seperate the patches as you just see one big diff that also contains the packaging files (in <filename>debian/</filename>. This can make it more difficult when you want to send the patches upstream. It is also very convenient to seperate the author's source from the changes made for Ubuntu. The best place to put this information is in the <filename>debian/</filename> that is already used for the packaging files. For the rest of this chapter we will be looking at the various ways to set up patches in this way."
msgstr ""

#: C/patch-systems.xml:21(title) 
msgid "Patching Without a Patch System"
msgstr ""

#: C/patch-systems.xml:22(para) 
msgid "As was mentioned above, one can patch the original source by simply making the changes in the unpacked source directory. A real-life example of this is <application>cron</application>. If you grab <application>cron</application>'s source package and look at the <filename>.diff.gz</filename> you will see that several of the original source's files were changed."
msgstr ""

#: C/patch-systems.xml:24(screen) 
#, no-wrap
msgid "\napt-get source cron\nzgrep +++ cron*.diff.gz\n"
msgstr ""

#: C/patch-systems.xml:29(para) 
msgid "But as we mentioned before this is not really the best way to represent patches. One better way is to create individual patch files, but them in <filename>debian/patches/</filename> and apply the patches (using <application>patch</application>) in <filename>debian/rules</filename>. This is what is done for <application>udev</application>:"
msgstr ""

#: C/patch-systems.xml:31(screen) 
#, no-wrap
msgid "\napt-get source udev\nzgrep +++ udev*.diff.gz\nls udev*/debian/patches/\nless udev*/debian/rules\n"
msgstr ""

#: C/patch-systems.xml:38(para) 
msgid "The <filename>rules</filename> file has the following rules for applying and unapplying the patches:"
msgstr ""

#: C/patch-systems.xml:39(screen) 
#, no-wrap
msgid "\n# Apply patches to the package\npatch: patch-stamp\npatch-stamp:\n        dh_testdir\n        @patches=debian/patches/*.patch; for patch in $$patches; do \\\n                test -f $$patch || continue; \\\n                echo \"Applying $$patch\"; \\\n                patch -stuN -p1 &lt; $$patch || exit 1; \\\n        done\n        touch $@\n\n# Remove patches from the package\nunpatch:\n        dh_testdir\n        @if test -f patch-stamp; then \\\n                patches=debian/patches/*.patch; \\\n                for patch in $$patches; do \\\n                        reversepatches=\"$$patch $$reversepatches\"; \\\n                done; \\\n                for patch in $$reversepatches; do \\\n                        test -f $$patch || continue; \\\n                        echo \"Reversing $$patch\"; \\\n                        patch -suRf -p1 &lt; $$patch || exit 1; \\\n                done; \\\n                rm -f patch-stamp; \\\n        fi\n"
msgstr ""

#: C/patch-systems.xml:68(para) 
msgid "That is all very nice, but how do we create new patches for <application>udev</application> using this scheme? The general approach is:"
msgstr ""

#: C/patch-systems.xml:70(para) 
msgid "copy the clean source tree to a temporary directory"
msgstr ""

#: C/patch-systems.xml:71(para) 
msgid "apply all patches up to the one you want to edit; if you want to create a new patch, apply all existing ones (this is necessary since in general patches depend on previous patches)"
msgstr ""

#: C/patch-systems.xml:72(para) 
msgid "if you want, you can use debian/rules for this: remove the patches that come *after* the one you want to edit, and call 'debian/rules patch'. The actual name for the patch target varies, I have seen the following ones so far: patch setup apply-patches unpack patch-stamp. You have to look in <filename>debian/rules</filename> how it is called."
msgstr ""

#: C/patch-systems.xml:73(para) 
msgid "copy the whole source tree again: <screen>cp -a /tmp/old /tmp/new</screen>"
msgstr ""

#: C/patch-systems.xml:75(para) 
msgid "go into /tmp/new, do your modifications"
msgstr ""

#: C/patch-systems.xml:76(para) 
msgid "go back into your original source tree, generate the patch with: <screen>diff -Nurp /tmp/old /tmp/new &gt; mypatchname.patch</screen>"
msgstr ""

#: C/patch-systems.xml:82(title) 
msgid "Example 1."
msgstr ""

#: C/patch-systems.xml:83(para) 
msgid "Let us make a new patch for <application>udev</application> called <filename>90_penguins.patch</filename> which replaces <emphasis>Linux</emphasis> with <emphasis>Penguin</emphasis> in the <application>udev</application> <filename>README</filename> file:"
msgstr ""

#: C/patch-systems.xml:84(screen) 
#, no-wrap
msgid "\ncd udev*/\ncp -a . /tmp/old\npushd /tmp/old\ndebian/rules patch\ncp -a . /tmp/new; cd ../new\nsed -i 's/Linux/Penguin/g' README\ncd ..\ndiff -Nurp old new &gt; 90_penguins.patch\npopd\nmv /tmp/90_penguins.patch debian/patches\nrm -rf /tmp/old /tmp/new\n"
msgstr ""

#: C/patch-systems.xml:100(title) 
msgid "Example 2."
msgstr ""

#: C/patch-systems.xml:101(para) 
msgid "What happens if we want to edit an existing patch? We can us a similar procedure as Example 1 but we will apply the patch to be edited first: <screen>\ncp -a . /tmp/old\npushd /tmp/old\ncp -a . /tmp/new; cd ../new\npatch -p1 &lt; debian/patches/10-selinux-include-udev-h.patch\nsed -i '1 s/$/***** HELLO WORLD ****/' udev_selinux.c\ncd ..\ndiff -Nurp old new &gt; 10-selinux-include-udev-h.patch\npopd\nmv /tmp/10-selinux-include-udev-h.patch debian/patches\nrm -rf /tmp/old /tmp/new\n\n</screen>"
msgstr ""

#: C/patch-systems.xml:116(para) 
msgid "So this way of patching the source, while technically fine, can become very complicated and unmanageable. To make patching easier and more straightforward patch systems were developed. We will take a look at couple popular ones."
msgstr ""

#: C/patch-systems.xml:120(title) 
msgid "CDBS with Simple Patchsys"
msgstr ""

#: C/patch-systems.xml:121(para) 
msgid "The CDBS build helper system (see <xref linkend=\"basic-cdbs\"/> ) has a very simple patch system built in. You simply need to add an include for <emphasis>simple-patchsys.mk</emphasis> in <filename>debian/rules</filename>. An example is <application>pmount</application>. Its entire <filename>rules</filename> looks like: <screen>\n#!/usr/bin/make -f\ninclude /usr/share/cdbs/1/rules/debhelper.mk\ninclude /usr/share/cdbs/1/class/autotools.mk\ninclude /usr/share/cdbs/1/rules/simple-patchsys.mk\n\ncommon-post-build-arch::\n        # Generate a POT file\n        cd po; intltool-update -p --verbose\n</screen>"
msgstr ""

#: C/patch-systems.xml:133(para) 
msgid "Simple patchsys also has a patch editor built in called <application>cdbs-edit-patch</application>. You can give <application>cdbs-edit-patch</application> either the name of an existing patch to edit or a new patch to create. It will apply the existing patch, if it exists, and put you in a new shell. You can then make any changes you want added to the patch and finally type <emphasis>Ctrl-D</emphasis> to exit the shell and create the new patch. The patches are stored in <filename>debian/patches/</filename>"
msgstr ""

#: C/patch-systems.xml:137(title) 
msgid "dpatch"
msgstr ""

#: C/patch-systems.xml:138(para) 
msgid "A popular patch system is <application>dpatch</application>. It has a <application>dpatch-edit-patch</application> script like <application>cdbs</application> has but stores the patches a little differently. It uses a file named <filename>debian/patches/00list</filename> to find the name and order of patches to apply. This means you can order your patches in whichever way you want and can disable a patch without removing it altogether. However, it also mean you need to update <filename>00list</filename> if you add a patch. If <application>dpatch-edit-patch</application> is called with two arguments it will edit/create the the patch named by the first argument relative to the patch named by the second argument. In other words: <screen>dpatch-edit-patch new.dpatch old.dpatch</screen> will apply patches up to <filename>old.dpatch</filename> and then create <filename>new.dpatch</filename>. Note that <application>dpatch</application> patches usually have a .dpatch suffix. This is because <application>dpatch</application> stores the patches in a slightly different format then a normal patch that adds a special header."
msgstr ""

#: C/patch-systems.xml:141(para) 
msgid "A real-life example of dpatch usage is the <application>xterm</application> package."
msgstr ""

#: C/patch-systems.xml:145(title) 
msgid "Patching other people's packages"
msgstr ""

#: C/patch-systems.xml:146(para) 
msgid "The most important thing to keep in mind when patching packages maintained by other people is to keep the patch system (or lack thereof) that the maintainer has set up. This will ensure consistency and make the package maintainer more likely to accept your patch."
msgstr ""

#: C/patch-systems.xml:147(para) 
msgid "It is also a good idea to separate patches logically rather than creating one giant patch. If the upstream authors apply one of your changes but not another it is much easier to just drop a patch then edit a monolithic patch to update it."
msgstr ""

#: C/packagingguide.xml:16(title) C/bookinfo.xml:16(title) 
msgid "The Ubuntu Packaging Guide"
msgstr ""

#: C/introduction.xml:17(title) 
msgid "Introduction"
msgstr ""

#: C/introduction.xml:19(para) 
msgid "Welcome to the &ubuntu; Packaging Guide! This guide is primarily addressed to those who would like to make and maintain &ubuntu; packages. Although many of the concepts in this guide could be used to make binary packages for personal use, it is designed for those people wanting to distribute their packages to and for others. While it is also written with the &ubuntu; Linux distribution in mind, it should also be useful for any Debian-based distribution."
msgstr ""

#: C/introduction.xml:28(para) 
msgid "There are several reasons you might want to learn how to package for Ubuntu. First, building and fixing &ubuntu; packages is a great way to contribute to the &ubuntu; community. It is also a good way to learn how &ubuntu; and the applications you have installed work. Maybe you want to install a package that is not in the &ubuntu; repositories. Hopefully after you have completed this guide you will have the tools and knowledge you need to do all of these things."
msgstr ""

#: C/introduction.xml:38(para) 
msgid "HTML and PDF versions of the manual are available online at <ulink url=\"&ubuntu-documentation;\">the Ubuntu Documentation website</ulink>."
msgstr ""

#: C/introduction.xml:42(para) 
msgid "You can buy this guide in book form from <ulink url=\"&lulu-store;\">our Lulu store</ulink>. You will only pay for the price of printing and postage."
msgstr ""

#: C/introduction.xml:47(title) 
msgid "Where to Begin"
msgstr ""

#: C/introduction.xml:48(para) 
msgid "If you are completely new to Debian-based packaging then you will want to read this guide completely through, paying special attention to <xref linkend=\"intro-prereq\"/>, <xref linkend=\"gs-chap\"/>, and <xref linkend=\"basic-chap\"/>. People who are experienced with Debian-based packaging will find <xref linkend=\"ubuntu-chap\"/> and <xref linkend=\"bugs-chap\"/> most helpful."
msgstr ""

#: C/introduction.xml:58(title) 
msgid "Prerequisites"
msgstr ""

#: C/introduction.xml:60(para) 
msgid "This guide assumes that the reader has a reasonable knowledge of building and installing software from source on Linux distributions. The guide also uses the Command Line Interface (CLI) throughout, so you should be comfortable using a terminal. You should be able to at least use the following:"
msgstr ""

#: C/introduction.xml:68(para) 
msgid "<emphasis role=\"bold\">make:</emphasis> GNU Make is a very important software building tool. It is used to transform a complex compilation task into a trivial one. It is important that you know how to use it, because we will store most of the information about the packaging process in a Makefile. Documentation is available at the <ulink url=\"http://www.gnu.org/software/make/manual/make.html\">GNU </ulink> website."
msgstr ""

#: C/introduction.xml:79(para) 
msgid "<emphasis role=\"bold\">./configure:</emphasis>This script is included in almost all Linux source, especially for software written in compiled languages such as C and C++. It is used to generate a Makefile (file used by <application>make</application>) that is properly configured for your system. Standard Debian packaging tools use it, so it is important that you know what the <filename>configure</filename> script does. Information on <filename>./configure</filename> can be found in the <application>make</application> documentation."
msgstr ""

#: C/introduction.xml:92(para) 
msgid "<emphasis role=\"bold\">Apt/Dpkg:</emphasis> Beyond the basic use of installing programs, <application>apt</application> and <application>dpkg</application> have many features that are useful for packaging."
msgstr ""

#: C/introduction.xml:99(para) 
msgid "<emphasis role=\"bold\">apt-cache dump</emphasis> - lists every package in the cache. This command is especially helpful in combination with a <application>grep</application> pipe such as <application>apt-cache dump | grep foo</application> to search for packages whose names or dependencies include <quote>foo</quote>."
msgstr ""

#: C/introduction.xml:109(para) 
msgid "<emphasis role=\"bold\">apt-cache policy</emphasis> - lists the repositories (main/restricted/universe/multiverse) in which a package exists."
msgstr ""

#: C/introduction.xml:114(para) 
msgid "<emphasis role=\"bold\">apt-cache show </emphasis> - displays information about a binary package."
msgstr ""

#: C/introduction.xml:118(para) 
msgid "<emphasis role=\"bold\">apt-cache showsrc </emphasis> - displays information about a source package."
msgstr ""

#: C/introduction.xml:122(para) 
msgid "<emphasis role=\"bold\">apt-cache rdepends </emphasis> - shows reverse dependencies for a package (which packages require the queried one."
msgstr ""

#: C/introduction.xml:127(para) 
msgid "<emphasis role=\"bold\">dpkg -S </emphasis> - lists the binary package to which a particular file belongs."
msgstr ""

#: C/introduction.xml:132(para) 
msgid "<emphasis role=\"bold\">dpkg -l </emphasis> - lists currently installed packages. This is similar to <application>apt-cache dump</application> but for installed packages."
msgstr ""

#: C/introduction.xml:138(para) 
msgid "<emphasis role=\"bold\">dpkg -c </emphasis> - lists the contents of a binary package. It is useful for ensuring that files are installed to the right places."
msgstr ""

#: C/introduction.xml:142(para) 
msgid "<emphasis role=\"bold\">dpkg -f </emphasis> - shows the control file for a binary package. It is useful for ensuring that the dependencies are correct."
msgstr ""

#: C/introduction.xml:148(para) 
msgid "<emphasis role=\"bold\">grep-dctrl</emphasis> - searches for specialized information in packages. It is a specific use of the <application>grep</application> package (but not installed by default)."
msgstr ""

#: C/introduction.xml:160(para) 
msgid "<emphasis role=\"bold\">diff and patch:</emphasis> The <application>diff</application> program can be used to compare two files and to make patches. A typical example might be <application>diff -ruN file.old file.new &gt; file.diff</application>. This command will create a diff (recursively if directories are used) that shows the changes, or <quote>delta</quote>, between the two files."
msgstr ""

#: C/introduction.xml:170(para) 
msgid "The <application>patch</application> program is used to apply a patch (usually created by <application>diff</application> or another similar program) to a file or directory. To apply the patch created above, we can invoke <application>patch -p0 &lt; file.diff</application>. The <emphasis>-p</emphasis> tells <application>patch</application> how much it should strip from the paths for the file names in the patch. -p0 means to strip nothing, or leave the path intact."
msgstr ""

#: C/getting_started.xml:15(title) 
msgid "Getting Started"
msgstr ""

#: C/getting_started.xml:18(title) 
msgid "Binary and Source Packages"
msgstr ""

#: C/getting_started.xml:20(para) 
msgid "Most users of a Debian-based distribution such as &ubuntu; will never have to deal with the actual source code that is used to create all of the applications on their computers. Instead, the source code is compiled into <emphasis>binary</emphasis> packages from the <emphasis>source</emphasis> package that contains both the source code itself and the rules for making the binary package. Packagers upload the source packages with their changes to the build systems that then compile the binary packages for each architecture. A separate system distributes the generated binary .deb files and source changes to the repository mirrors."
msgstr ""

#: C/getting_started.xml:35(title) 
msgid "Packaging Tools"
msgstr ""

#: C/getting_started.xml:37(para) 
msgid "There are many tools written specifically for packaging on Debian-based systems. Many of them are not <emphasis>essential</emphasis> to creating packages but are very helpful and often automate repetitive tasks. Their <application>man</application> and <application>info</application> pages are good sources of information. However, the following is a list of packages that are deemed necessary to begin packaging:"
msgstr ""

#: C/getting_started.xml:46(application) 
msgid "build-essential"
msgstr ""

#: C/getting_started.xml:47(para) 
msgid "is a metapackage that depends on <application>libc6-dev</application>, <application>gcc</application>, <application>g++</application>, <application>make</application>, and <application>dpkg-dev</application>. One package that you might not be familiar with is <application>dpkg-dev</application>. It contains tools such as <application>dpkg-buildpackage</application> and <application>dpkg-source</application> that are used to create, unpack, and build source and binary packages."
msgstr ""

#: C/getting_started.xml:60(application) 
msgid "devscripts"
msgstr ""

#: C/getting_started.xml:61(para) 
msgid "contains many scripts that make the packager's maintenance work much easier. Some of the more commonly used are <application>debdiff</application>, <application>dch</application>, <application>debuild</application>, and <application>debsign</application>."
msgstr ""

#: C/getting_started.xml:70(term) 
msgid "<application>debhelper</application> and <application>dh-make</application>"
msgstr ""

#: C/getting_started.xml:72(para) 
msgid "are scripts that automate common packaging tasks. <application>dh-make</application> can be used to do the initial \"debianization\" and provides many example files."
msgstr ""

#: C/getting_started.xml:78(term) 
msgid "<application>diff</application> and <application>patch</application>"
msgstr ""

#: C/getting_started.xml:79(para) 
msgid "are used to create and apply patches, respectively. They are used extensively in packaging because it is easier, cleaner, and more efficient to represent small changes as patches rather than to have multiple copies of a file."
msgstr ""

#: C/getting_started.xml:85(application) 
msgid "gnupg"
msgstr ""

#: C/getting_started.xml:86(para) 
msgid "is a complete and free replacement for PGP used to digitally sign files (including packages)."
msgstr ""

#: C/getting_started.xml:90(application) 
msgid "fakeroot"
msgstr ""

#: C/getting_started.xml:91(para) 
msgid "simulates running a command with root privileges. This is useful for creating binary packages as a regular user."
msgstr ""

#: C/getting_started.xml:95(term) 
msgid "<application>lintian</application> and <application>linda</application>"
msgstr ""

#: C/getting_started.xml:97(para) 
msgid "dissect Debian packages and report bugs and Policy violations. They contain automated checks for many aspects of Debian Policy as well as for common errors."
msgstr ""

#: C/getting_started.xml:103(application) 
msgid "pbuilder"
msgstr ""

#: C/getting_started.xml:104(para) 
msgid "constructs a chroot system and builds a package inside the chroot. It is an ideal system to use to check that a package has correct build dependencies and to build clean packages to be tested and distributed."
msgstr ""

#: C/getting_started.xml:114(title) 
msgid "The Personal Builder: pbuilder"
msgstr ""

#: C/getting_started.xml:116(para) 
msgid "Using pbuilder as a package builder allows you to build the package from within a chroot environment. You can build binary packages without using <application>pbuilder</application>, but you must have all the build dependencies installed on your system first. However, pbuilder allows the packager to check the build dependencies because the package is built within a minimal &ubuntu; installation, and the build dependencies are downloaded according to the <filename>debian/control</filename> file."
msgstr ""

#: C/getting_started.xml:125(para) 
msgid "The following is a brief guide to installing, using, and updating a pbuilder environment, however, there are many details of <application>pbuilder</application> usage that are outside the realm of this guide. The <application>pbuilder</application> man page has lots of information and should be consulted if you have problems or need more detailed information."
msgstr ""

#: C/getting_started.xml:134(title) 
msgid "Installing and configuring a pbuilder environment"
msgstr ""

#: C/getting_started.xml:137(para) 
msgid "The first, and perhaps most obvious, thing to do is to install <application>pbuilder</application>. If you want to create a <application>pbuilder</application> for a release newer than the one you currently have installed, you will need to manually install the <application>debootstrap</application> .deb (from <ulink url=\"&p.u.c;\">&p.u.c;</ulink>) from the newer release. To create a pbuilder execute:"
msgstr ""

#: C/getting_started.xml:145(screen) 
#, no-wrap
msgid "\nsudo pbuilder create --distribution &lt;distro&gt; \\\n\t--othermirror \"deb http://archive.ubuntu.com/ubuntu &lt;distro&gt; universe multiverse\"\n\t\t"
msgstr ""

#: C/getting_started.xml:150(para) 
msgid "where &lt;distro&gt; is the release you want (<emphasis>&ubuntuplus1;</emphasis> for instance) to create the pbuilder for. If you would like to create more than one <application>pbuilder</application> environment you can append the <emphasis>--basetgz</emphasis> flag with the desired location for the compressed <application>pbuilder</application> environment. The default is <filename>/var/cache/pbuilder/base.tgz</filename>. If you do choose to use <emphasis>--basetgz</emphasis> you will need to use it with the other <application>pbuilder</application> commands so <application>pbuilder</application> knows which compressed build environment to use."
msgstr ""

#: C/getting_started.xml:165(para) 
msgid "Creating a pbuilder environment will take some time as <application>debootstrap</application> essentially downloads a minimal &ubuntu; installation."
msgstr ""

#: C/getting_started.xml:169(para) 
msgid "A more flexible way to create a pbuilder (and perhaps multiple pbuilders) is to you a shell script."
msgstr ""

#: C/getting_started.xml:175(title) 
msgid "Using the pbuilder"
msgstr ""

#: C/getting_started.xml:176(para) 
msgid "Now that you have a running pbuilder you can build binary packages from the source package by invoking:"
msgstr ""

#: C/getting_started.xml:179(screen) 
#, no-wrap
msgid "sudo pbuilder build *.dsc"
msgstr ""

#: C/getting_started.xml:181(para) 
msgid "This will build all the source packages in the current directory. The resulting .debs and source packages can be found in <filename>/var/cache/pbuilder/result/</filename> (which can be changed with the <emphasis>--buildresult</emphasis> flag)."
msgstr ""

#: C/getting_started.xml:189(title) 
msgid "Updating the pbuilder"
msgstr ""

#: C/getting_started.xml:191(para) 
msgid "You should always have a current pbuilder whenever you are testing your source packages, especially when you are building for a development release that is rapidly changing, to ensure that the dependencies are properly found. To update your pbuilder, use:"
msgstr ""

#: C/getting_started.xml:196(screen) 
#, no-wrap
msgid "sudo pbuilder update"
msgstr ""

#: C/getting_started.xml:200(para) 
msgid "If you would like to upgrade you pbuilder to a new release you can use <application>pbuilder update</application> in combination with the <emphasis>--distribution</emphasis> flag:"
msgstr ""

#: C/getting_started.xml:204(screen) 
#, no-wrap
msgid "sudo pbuilder update --distribution &lt;newdistro&gt; --override-config"
msgstr ""

#: C/getting_started.xml:209(title) 
msgid "Multiple pbuilders"
msgstr ""

#: C/getting_started.xml:211(para) 
msgid "All of the information so far in this section on <application>pbuilder</application> has applied to having a single <application>pbuilder</application>. If you want to create more than one <application>pbuilder</application> you can create a shell script to handle the configuration for each <application>pbuilder</application> you want to create. An example of such a shell script can be found in <filename>/usr/share/doc/pbuilder/examples/pbuilder-distribution.sh</filename>. You can simply copy this example file somewhere in your path (putting it in <filename>~/bin/</filename> and adding this directory to your execution path is convenient) and then edit it according your needs. Normally you will need to only change DISTRIBUTION and add --othermirror as above. You can then call this script instead of <application>pbuilder</application> directly."
msgstr ""

#: C/build-helpers.xml:17(title) 
msgid "Build Helpers"
msgstr ""

#: C/build-helpers.xml:18(para) 
msgid "Good stuff about debhelper and CDBS goes here"
msgstr ""

#: C/build-helpers.xml:21(title) C/basic.xml:691(title) 
msgid "Packaging with Debhelper"
msgstr ""

#: C/build-helpers.xml:23(para) C/basic.xml:693(para) 
msgid "<emphasis role=\"bold\">Requirements:</emphasis> The requirements from <xref linkend=\"basic-scratch\"/> plus debhelper and dh-make"
msgstr ""

#: C/build-helpers.xml:27(para) C/basic.xml:697(para) 
msgid "As a packager, you will rarely create packages from scratch as we have done in the previous section. As you can imagine, many of the tasks and information in the <filename>rules</filename> file, for instance, are common to packages. To make packaging easier and more efficient, you can use <application>debhelper</application> to help with these tasks. Debhelper is a set of Perl scripts (prefixed with <emphasis>dh_</emphasis>) that automate the process of package-building. With these scripts, building a Debian package becomes quite simple."
msgstr ""

#: C/build-helpers.xml:38(para) C/basic.xml:708(para) 
msgid "In this example, we will again build the GNU Hello package, but this time we will be comparing our work to the Ubuntu <application>hello-debhelper</application> package. Again, create a directory where you will be working:"
msgstr ""

#: C/build-helpers.xml:43(screen) C/basic.xml:713(screen) 
#, no-wrap
msgid "mkdir ~/hello-debhelper\ncd ~/hello-debhelper\nwget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz\nmkdir ubuntu\ncd ubuntu"
msgstr ""

#: C/build-helpers.xml:50(para) C/basic.xml:720(para) 
msgid "Then, get the Ubuntu source package:"
msgstr ""

#: C/build-helpers.xml:52(screen) C/basic.xml:722(screen) 
#, no-wrap
msgid "apt-get source hello-debhelper\ncd .."
msgstr ""

#: C/build-helpers.xml:55(para) C/basic.xml:725(para) 
msgid "Like the previous example, the first thing we need to do is unpack the original (upstream) tarball."
msgstr ""

#: C/build-helpers.xml:58(screen) C/basic.xml:728(screen) 
#, no-wrap
msgid "tar -xzvf hello-2.1.1.tar.gz"
msgstr ""

#: C/build-helpers.xml:60(para) C/basic.xml:730(para) 
msgid "Instead of copying the upstream tarball to <filename>hello_2.1.1.orig.tar.gz</filename> as we did in the previous example, we will let <application>dh_make</application> do the work for us. The only thing you have to do is rename the source folder so it is in the form of <emphasis>&lt;packagename&gt;-&lt;version&gt;</emphasis> where packagename is lowercase. In this case, just untarring the tarball produces a correctly named source directory so we can move into it:"
msgstr ""

#: C/build-helpers.xml:70(screen) C/basic.xml:740(screen) 
#, no-wrap
msgid "cd hello-2.1.1"
msgstr ""

#: C/build-helpers.xml:72(para) C/basic.xml:742(para) 
msgid "To create the initial \"debianization\" of the source we will use <application>dh_make</application>."
msgstr ""

#: C/build-helpers.xml:75(screen) C/basic.xml:745(screen) 
#, no-wrap
msgid "\ndh_make -e your.maintainer@address -f ../hello-2.1.1.tar.gz\n\t\t"
msgstr ""

#: C/build-helpers.xml:79(para) C/basic.xml:749(para) 
msgid "dh_make will then ask you a series of questions:"
msgstr ""

#: C/build-helpers.xml:83(emphasis) C/basic.xml:753(emphasis) 
msgid "s"
msgstr ""

#: C/build-helpers.xml:81(screen) C/basic.xml:751(screen) 
#, no-wrap
msgid "\nType of package: single binary, multiple binary, library, kernel module or cdbs?\n[s/m/l/k/b] <placeholder-1/>"
msgstr ""

#: C/build-helpers.xml:93(emphasis) C/basic.xml:763(emphasis) 
msgid "Enter"
msgstr ""

#: C/build-helpers.xml:85(screen) C/basic.xml:755(screen) 
#, no-wrap
msgid "\nMaintainer name : Captain Packager\nEmail-Address   : packager@coolness.com\nDate            : Thu,  6 Apr 2006 10:07:19 -0700\nPackage Name    : hello\nVersion         : 2.1.1\nLicense         : blank\nType of Package : Single\nHit &lt;enter&gt; to confirm: <placeholder-1/>"
msgstr ""

#: C/build-helpers.xml:95(para) C/basic.xml:765(para) 
msgid "Only run <application>dh_make -e</application> once. If you run it again after you do it the first time, it will not work properly. If you want to change it or made a mistake, remove the source directory and untar the upstream tarball afresh. Then you can migrate into the source directory and try again."
msgstr ""

#: C/build-helpers.xml:101(para) C/basic.xml:771(para) 
msgid "Running <application>dh_make -e</application> does two things:"
msgstr ""

#: C/build-helpers.xml:106(para) C/basic.xml:776(para) 
msgid "Creates the <filename>hello_2.1.1.orig.tar.gz</filename> file in the parent directory,"
msgstr ""

#: C/build-helpers.xml:110(para) C/basic.xml:780(para) 
msgid "Creates the basic files needed in <filename>debian/</filename> and many template files (.ex) that may be needed."
msgstr ""

#: C/build-helpers.xml:116(para) C/basic.xml:786(para) 
msgid "The <application>Hello</application> program is not very complicated, and as we have seen in <xref linkend=\"basic-scratch\"/>, packaging it does not require much more than the basic files. Therefore, let us remove the <filename>.ex</filename> files:"
msgstr ""

#: C/build-helpers.xml:122(screen) C/basic.xml:792(screen) 
#, no-wrap
msgid "cd debian\nrm *.ex *.EX"
msgstr ""

#: C/build-helpers.xml:125(para) C/basic.xml:795(para) 
msgid "For <application>hello</application>, you will also not need <filename>README.Debian</filename> (README file for specific Debian issues, not the program's README), <filename>dirs</filename> (used by <application>dh_installdirs</application> to create needed directories), <filename>docs</filename> (used by <application>dh_installdocs</application> to install program documentation), or <filename>info</filename> (used by <application>dh_installinfo</application> to install the info file) files into the <filename>debian</filename> directory. For more information on these files, see <xref linkend=\"appendix-examples\"/>."
msgstr ""

#: C/build-helpers.xml:137(para) C/basic.xml:807(para) 
msgid "At this point, you should have only <filename>changelog</filename>, <filename>compat</filename>, <filename>control</filename>, <filename>copyright</filename>, and <filename>rules</filename> files in the <filename>debian</filename> directory. From <xref linkend=\"basic-scratch\"/>, the only file that is new is <filename>compat</filename>, which is a file that contains the <application>debhelper</application> version (in this case 4) that is used."
msgstr ""

#: C/build-helpers.xml:147(para) C/basic.xml:817(para) 
msgid "You will need to adjust the <filename>changelog</filename> slightly in this case to reflect that this package is named <application>hello-debhelper</application> rather than just <application>hello</application>:"
msgstr ""

#: C/build-helpers.xml:153(screen) 
#, no-wrap
msgid "\nhello-debhelper (2.1.1-1) dapper; urgency=low\n\n  * Initial release\n\n  -- Captain Packager &lt;packager@coolness.com&gt;  Thu,  6 Apr 2006 10:07:19 -0700"
msgstr ""

#: C/build-helpers.xml:160(para) C/basic.xml:830(para) 
msgid "By using <application>debhelper</application>, the only things we need to change in <filename>control</filename> are the name (substituting <application>hello</application> for <application>hello-debhelper</application>) and adding <application>debhelper (&gt;= 4.0.0)</application> to the <emphasis>Build-Depends</emphasis> field for the source package. The Ubuntu package for <application>hello-debhelper</application> looks like:"
msgstr ""

#: C/build-helpers.xml:169(screen) C/basic.xml:839(screen) 
#, no-wrap
msgid "\nSource: hello-debhelper\nSection: devel\nPriority: extra\nMaintainer: Capitan Packager &lt;packager@coolness.com&gt;\nStandards-Version: 3.6.1\nBuild-Depends: debhelper (&gt;= 4)\n\nPackage: hello-debhelper\nArchitecture: any\nDepends: ${shlibs:Depends}\nConflicts: hello\nProvides: hello\nReplaces: hello\nDescription: The classic greeting, and a good example\n The GNU hello program produces a familiar, friendly greeting.  It\n allows non-programmers to use a classic computer science tool which\n would otherwise be unavailable to them.\n .\n Seriously, though: this is an example of how to do a Debian package.\n It is the Debian version of the GNU Project's `hello world' program\n (which is itself an example for the GNU Project).\n .\n This is the same as the hello package, except it uses debhelper to\n make the deb.  Please see debhelper as to what it is.\n\t\t"
msgstr ""

#: C/build-helpers.xml:196(para) C/basic.xml:866(para) 
msgid "We can copy the <filename>copyright</filename> file and the <filename>postinst</filename> and <filename>prerm</filename> scripts from the Ubuntu <application>hello-debhelper</application> package, as they have not changed since <xref linkend=\"basic-scratch\"/>. We will also copy the <filename>rules</filename> file so we can inspect it."
msgstr ""

#: C/build-helpers.xml:204(screen) C/basic.xml:874(screen) 
#, no-wrap
msgid "\ncp ../../ubuntu/hello-debhelper-2.1.1/debian/copyright .\ncp ../../ubuntu/hello-debhelper-2.1.1/debian/postinst .\ncp ../../ubuntu/hello-debhelper-2.1.1/debian/prerm .\ncp ../../ubuntu/hello-debhelper-2.1.1/debian/rules ."
msgstr ""

#: C/build-helpers.xml:210(para) C/basic.xml:880(para) 
msgid "The last file we need to look at is <filename>rules</filename>, where the power of <application>debhelper</application> scripts can be seen. The <application>debhelper</application> version of <filename>rules</filename> is somewhat smaller (54 lines as opposed to 72 lines in the version from <xref linkend=\"basic-scratch-rules\"/>)."
msgstr ""

#: C/build-helpers.xml:217(para) C/basic.xml:887(para) 
msgid "The <application>debhelper</application> version looks like:"
msgstr ""

#: C/build-helpers.xml:219(screen) C/basic.xml:889(screen) 
#, no-wrap
msgid " #!/usr/bin/make -f\n\npackage = hello-debhelper\n\nCC = gcc\nCFLAGS = -g -Wall\n\nifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n  CFLAGS += -O2\nendif\n\n#export DH_VERBOSE=1\n\nclean:\n        dh_testdir\n        dh_clean\n        rm -f build\n        -$(MAKE) -i distclean\n\ninstall: build\n        dh_clean\n        dh_installdirs\n        $(MAKE) prefix=$(CURDIR)/debian/$(package)/usr \\\n                mandir=$(CURDIR)/debian/$(package)/usr/share/man \\\n                infodir=$(CURDIR)/debian/$(package)/usr/share/info \\\n                install\n\nbuild:\n        ./configure --prefix=/usr\n        $(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n        touch build\n\nbinary-indep: install\n# There are no architecture-independent files to be uploaded\n# generated by this package.  If there were any they would be\n# made here.\n\nbinary-arch: install\n        dh_testdir -a\n        dh_testroot -a\n        dh_installdocs -a NEWS\n        dh_installchangelogs -a ChangeLog\n        dh_strip -a\n        dh_compress -a\n        dh_fixperms -a\n        dh_installdeb -a\n        dh_shlibdeps -a\n        dh_gencontrol -a\n        dh_md5sums -a\n        dh_builddeb -a\n\nbinary: binary-indep binary-arch\n\n.PHONY: binary binary-arch binary-indep clean checkroot\n\t\t\t"
msgstr ""

#: C/build-helpers.xml:275(para) C/basic.xml:945(para) 
msgid "Notice that tasks like testing if you are in the right directory (<application>dh_testdir</application>), making sure you are building the package with root privileges (<application>dh_testroot</application>), installing documentation (<application>dh_installdocs</application> and <application>dh_installchangelogs</application>), and cleaning up after the build (<application>dh_clean</application>) are handled automatically. Many packages much more complicated than <application>hello</application> have <filename>rules</filename> files no bigger because the <application>debhelper</application> scripts handle most of the tasks. For a complete list of <application>debhelper</application> scripts, please see <xref linkend=\"appendix-debhelper\"/>. They are also well documented in their respective <application>man</application> pages. It is a useful exercise to read the man page (they are well written and not lengthy) for each helper script used in the above <filename>rules</filename> file."
msgstr ""

#: C/build-helpers.xml:294(title) C/basic.xml:631(title) C/basic.xml:964(title) 
msgid "Building the Source Package"
msgstr ""

#: C/build-helpers.xml:296(para) C/basic.xml:966(para) 
msgid "Now that we have gone through the files in the <filename>debian</filename> directory for <application>hello-debhelper</application>, we can build the source (and binary) packages. First, let us move back into the source directory:"
msgstr ""

#: C/build-helpers.xml:302(screen) C/basic.xml:639(screen) C/basic.xml:972(screen) 
#, no-wrap
msgid "cd .."
msgstr ""

#: C/build-helpers.xml:304(para) C/basic.xml:974(para) 
msgid "Now we build the source package using <application>debuild</application>, a wrapper script for <application>dpkg-buildpackage</application>:"
msgstr ""

#: C/build-helpers.xml:308(screen) C/basic.xml:978(screen) 
#, no-wrap
msgid "debuild -S"
msgstr ""

#: C/build-helpers.xml:310(para) C/basic.xml:980(para) 
msgid "the binary package, using <application>pbuilder</application>:"
msgstr ""

#: C/build-helpers.xml:313(screen) C/basic.xml:671(screen) C/basic.xml:983(screen) 
#, no-wrap
msgid "sudo pbuilder build ../*.dsc"
msgstr ""

#: C/build-helpers.xml:315(para) C/basic.xml:985(para) 
msgid "and finally check the source package for common mistakes using <application>lintian</application>:"
msgstr ""

#: C/build-helpers.xml:318(screen) C/basic.xml:683(screen) C/basic.xml:988(screen) 
#, no-wrap
msgid "cd ..\nlintian -i *.dsc"
msgstr ""

#: C/build-helpers.xml:326(title) C/basic.xml:996(title) 
msgid "Packaging With CDBS"
msgstr ""

#: C/build-helpers.xml:328(para) C/basic.xml:998(para) 
msgid "CDBS is a tool that uses debhelper to make building and maintaining Debian packages even easier. It has many advantages:"
msgstr ""

#: C/build-helpers.xml:332(para) C/basic.xml:1002(para) 
msgid "It produces a short, readable, and efficient <filename>debian/rules</filename>"
msgstr ""

#: C/build-helpers.xml:335(para) C/basic.xml:1005(para) 
msgid "It automates debhelper and autotools for you, so you do not have to worry about repetitive tasks"
msgstr ""

#: C/build-helpers.xml:338(para) C/basic.xml:1008(para) 
msgid "It helps you focus on more important packaging problems, because it helps without limiting customization"
msgstr ""

#: C/build-helpers.xml:341(para) C/basic.xml:1011(para) 
msgid "Its classes have been well tested, so you can avoid dirty hacks to solve common problems"
msgstr ""

#: C/build-helpers.xml:344(para) C/basic.xml:1014(para) 
msgid "Switching to CDBS is easy"
msgstr ""

#: C/build-helpers.xml:346(para) C/basic.xml:1016(para) 
msgid "It is extensible"
msgstr ""

#: C/build-helpers.xml:350(title) C/basic.xml:1020(title) 
msgid "Using CDBS in packages"
msgstr ""

#: C/build-helpers.xml:352(para) C/basic.xml:1022(para) 
msgid "Using CDBS for Ubuntu packages is very easy. After adding <application>cdbs</application> to the Build-Depends in <filename>debian/control</filename>, a basic <filename>debian/rules</filename> file using CDBS can fit in 2 lines. For a simple C/C++ application with no extra rules, such as <application>hello</application>, <filename>debian/rules</filename> can look like this :"
msgstr ""

#: C/build-helpers.xml:360(screen) C/basic.xml:1030(screen) 
#, no-wrap
msgid "#!/usr/bin/make -f\n\t\t\t\t\ninclude /usr/share/cdbs/1/rules/debhelper.mk\ninclude /usr/share/cdbs/1/class/autotools.mk"
msgstr ""

#: C/build-helpers.xml:365(para) C/basic.xml:1035(para) 
msgid "That is all you need to build the program! CDBS handles installing and cleaning. You can then use the <filename>.install</filename> and <filename>.info</filename> files to tune your package with the usual debhelper functions in the various sections for <filename>debian/rules</filename>."
msgstr ""

#: C/build-helpers.xml:371(para) C/basic.xml:1041(para) 
msgid "Do not use DEB_AUTO_UPDATE_DEBIAN_CONTROL:=yes to automatically change <filename>debian/control</filename>. It can cause bad things, and Debian considers it a reason to reject a package from entering the archives. See <ulink url=\"http://ftp-master.debian.org/REJECT-FAQ.html\"> http://ftp-master.debian.org/REJECT-FAQ.html</ulink> for more information."
msgstr ""

#: C/build-helpers.xml:379(para) C/basic.xml:1049(para) 
msgid "As you can see, CDBS mostly works by including <filename>.mk</filename> Makefiles in <filename>debian/rules</filename>. The <application>cdbs</application> package provides such files in <filename>/usr/share/cdbs/1/</filename> that allow you to do quite a lot of packaging tasks. Other packages, such as <application>quilt</application>, add modules to CDBS and can be used as Build-Depends. Note that you can also use your own CDBS rules and include them in the package. The most useful modules included with the <application>cdbs</application> package are:"
msgstr ""

#: C/build-helpers.xml:391(para) C/basic.xml:1061(para) 
msgid "<filename>rules/debhelper.mk</filename>: Calls debhelper in all required sections"
msgstr ""

#: C/build-helpers.xml:394(para) C/basic.xml:1064(para) 
msgid "<filename>rules/dpatch.mk</filename>: Allows you to use dpatch to ease patching the source"
msgstr ""

#: C/build-helpers.xml:397(para) C/basic.xml:1067(para) 
msgid "<filename>rules/simple-patchsys.mk</filename>: Provides a very easy way to patch the source"
msgstr ""

#: C/build-helpers.xml:400(para) C/basic.xml:1070(para) 
msgid "<filename>rules/tarball.mk</filename>: Allows you to build packages using the compressed tarball in the package"
msgstr ""

#: C/build-helpers.xml:404(para) C/basic.xml:1074(para) 
msgid "<filename>class/autotools.mk</filename>: Calls autotools in all required sections"
msgstr ""

#: C/build-helpers.xml:407(para) C/basic.xml:1077(para) 
msgid "<filename>class/gnome.mk</filename>: Builds GNOME programs (requires the proper Build-Depends in <filename>debian/control</filename>)"
msgstr ""

#: C/build-helpers.xml:411(para) C/basic.xml:1081(para) 
msgid "<filename>class/kde.mk</filename>: Builds KDE programs (requires the proper Build-Depends in <filename>debian/control</filename>)"
msgstr ""

#: C/build-helpers.xml:415(para) C/basic.xml:1085(para) 
msgid "<filename>class/python-distutils.mk</filename>: Facilitates packaging Python programs"
msgstr ""

#: C/build-helpers.xml:422(title) C/basic.xml:1092(title) 
msgid "More information on CDBS"
msgstr ""

#: C/build-helpers.xml:424(para) C/basic.xml:1094(para) 
msgid "For more information on CDBS, see Marc Dequènes's guide at <ulink url=\"https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml\">https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml</ulink>."
msgstr ""

#: C/bugs.xml:15(title) 
msgid "Bugs"
msgstr ""

#: C/bugs.xml:17(para) 
msgid "One thing that you will almost certainly face as a packager is a bug in the software itself or in your packaging. Packaging bugs are often fairly easy and straightforward to fix. However, as packagers often act as the initial contact for software bugs for the users of their distribution(s), they also implement temporary fixes and are responsible for forwarding bug reports and fixes to the original (upstream) authors."
msgstr ""

#: C/bugs.xml:24(para) 
msgid "The <ulink url=\"https://wiki.ubuntu.com/BugSquad\">Ubuntu Bug Squad</ulink> is the Quality Assurance (QA) team for &ubuntu;. The people in the team work tirelessly to make &ubuntu; a better place. They keep track of all the bugs in the &ubuntu; Distribution and make sure that major bugs don't go unnoticed by the developers. Anyone can join the Bug Squad and it is a great entry point for people wanting to contribute to &ubuntu;. The Bug Squad can be found on the <emphasis>#ubuntu-bugs</emphasis> IRC channel on <emphasis>&irc-server;</emphasis>"
msgstr ""

#: C/bugs.xml:35(title) 
msgid "Bug Tracking Systems"
msgstr ""

#: C/bugs.xml:37(para) 
msgid "In order to track bugs (both software and packaging), many distributions have developed bug tracking systems to manage bug reports and to notify the package maintainers and reporters of changes. The table below shows some of the Debian and &ubuntu; tools for tracking bugs."
msgstr ""

#: C/bugs.xml:42(emphasis) 
msgid "Bug Tracking Systems (BTS)"
msgstr ""

#: C/bugs.xml:43(para) 
msgid "Debian : <ulink url=\"http://bugs.debian.org\">http://bugs.debian.org</ulink>"
msgstr ""

#: C/bugs.xml:44(para) 
msgid "&ubuntu; : <ulink url=\"http://launchpad.net/malone/distros/ubuntu\">http://launchpad.net/malone/distros/ubuntu</ulink>"
msgstr ""

#: C/bugs.xml:46(emphasis) 
msgid "Bugs for Specific Packages"
msgstr ""

#: C/bugs.xml:47(para) 
msgid "Debian : http://bugs.debian.org/<emphasis>&lt;packagename&gt;</emphasis>"
msgstr ""

#: C/bugs.xml:48(para) 
msgid "&ubuntu; : use search at &ubuntu; BTS"
msgstr ""

#: C/bugs.xml:49(emphasis) 
msgid "Bugs for Source Packages"
msgstr ""

#: C/bugs.xml:50(para) 
msgid "Debian : http://bugs.debian.org/src:<emphasis>&lt;packagename&gt;</emphasis>"
msgstr ""

#: C/bugs.xml:51(para) 
msgid "&ubuntu; : https://launchpad.net/distros/ubuntu/+source/<emphasis>&lt;packagename&gt;</emphasis>/+bugs"
msgstr ""

#: C/bugs.xml:52(emphasis) 
msgid "Package Information"
msgstr ""

#: C/bugs.xml:53(para) 
msgid "Debian : <ulink url=\"http://packages.debian.org\">http://packages.debian.org</ulink> or http://packages.qa.debian.org/<emphasis>&lt;packagename&gt;</emphasis>"
msgstr ""

#: C/bugs.xml:55(para) 
msgid "&ubuntu; : <ulink url=\"http://packages.ubuntu.com\">http://packages.ubuntu.com</ulink> or https://launchpad.net/distros/ubuntu/+source/<emphasis>&lt;packagename&gt;</emphasis> for source packages"
msgstr ""

#: C/bugs.xml:63(title) 
msgid "Bug Tips"
msgstr ""

#: C/bugs.xml:66(title) 
msgid "Proper source package"
msgstr ""

#: C/bugs.xml:68(para) 
msgid "Assigning bugs to packages helps direct bug reports to the developer(s) most likely to be able to help. By ensuring that this information is accurate, you increase the chances of the bug being fixed promptly. Often, it is unclear which package contains the bug, and in these cases it is appropriate to file the bug in Ubuntu. If a bug is assigned to a package which is clearly not correct, and you don't know the correct package, change it to Ubuntu."
msgstr ""

#: C/bugs.xml:76(para) 
msgid "The correct package for bugs in the Linux kernel is <application>linux</application>, regardless of which particular package is in use (there are many packages which contain Linux kernels)."
msgstr ""

#: C/bugs.xml:82(title) 
msgid "Confirming problems"
msgstr ""

#: C/bugs.xml:84(para) 
msgid "If a bug is marked as Unconfirmed, it is helpful for you to try to reproduce the problem and record the results in Malone. If you are able to confirm the problem, you may change the status to Confirmed. If you are unable to confirm the problem, that is also useful information that should be recorded in a comment."
msgstr ""

#: C/bugs.xml:90(emphasis) 
msgid "Forwarding bugs upstream"
msgstr ""

#: C/bugs.xml:93(para) 
msgid "You can forward bugs to the authors of the software (upstream), if"
msgstr ""

#: C/bugs.xml:98(para) 
msgid "you made sure that the bug doesn't occur because of Ubuntu related changes"
msgstr ""

#: C/bugs.xml:103(para) 
msgid "the change is too hard to be fixed by yourself or anyone else on the team"
msgstr ""

#: C/bugs.xml:107(para) 
msgid "If you do this, be sure to include all the necessary information, such as"
msgstr ""

#: C/bugs.xml:112(para) 
msgid "how to reproduce the bug"
msgstr ""

#: C/bugs.xml:114(para) 
msgid "which version is used (which version of dependent libraries, if the bug indicates problems there)"
msgstr ""

#: C/bugs.xml:117(para) 
msgid "who reported it"
msgstr ""

#: C/bugs.xml:119(para) 
msgid "where the whole conversation can be found"
msgstr ""

#: C/bugs.xml:124(para) 
msgid "Make sure to also create a bug watch in Malone for this bug."
msgstr ""

#: C/bugs.xml:129(title) 
msgid "How to Deal with Feature Requests"
msgstr ""

#: C/bugs.xml:131(para) 
msgid "If you feel that the bug reported is a feature request disguised as a bug report, please introduce the reporter gently to the <emphasis>specification process</emphasis> we have. Be sure to mention the following specification resources: FeatureSpecifications, SpecSpec, SpecTemplate, and <ulink url=\"http://launchpad.net/specs\">http://launchpad.net/specs</ulink>"
msgstr ""

#: C/bugs.xml:140(title) 
msgid "How to deal with Support Requests"
msgstr ""

#: C/bugs.xml:142(para) 
msgid "If you feel that the bug reported is a support request disguised as a bug report, please introduce the reporter gently to the Support Tracker we have. Be sure to mention <ulink url=\"http://launchpad.net/support\">http://launchpad.net/support</ulink>."
msgstr ""

#: C/bugs.xml:149(title) 
msgid "How to deal with suggestions for changing defaults"
msgstr ""

#: C/bugs.xml:151(para) 
msgid "If you feel that the bug reported is a suggestion for changing defaults disguised as a bug report, please kindly reroute the discussion to an appropriate mailing list or discussion forum. If this change has already been discussed and rejected, explain the reasons to the user and direct him or her to the relevant discussion for further suggestions/comments."
msgstr ""

#: C/bugs.xml:159(title) 
msgid "Finding Duplicates"
msgstr ""

#: C/bugs.xml:161(para) 
msgid "Finding duplicates of bugs is a very valuable contribution in the Bug community. Users sometimes don't know how to check if the same bug has already been filed, and sometimes they don't care. Weeding out simple ME TOO messages and aggregating information is crucial to the process of fixing a bug."
msgstr ""

#: C/bugs.xml:167(para) 
msgid "There are quite a few measures you can take to assist with this aspect. One is to search for bugs filed for the same component. Also try to rephrase your search, and concentrate on actions and words that describe the items involved to reproduce the bug."
msgstr ""

#: C/bugs.xml:172(emphasis) 
msgid "Examples:"
msgstr ""

#: C/bugs.xml:175(para) 
msgid "Easy ones: <ulink url=\"https://launchpad.net/malone/bugs/24932\">DAAP support</ulink> is a duplicate of <ulink url=\"https://launchpad.net/malone/bugs/24860\">please enable daap</ulink>."
msgstr ""

#: C/bugs.xml:180(para) 
msgid "More difficult ones: <ulink url=\"https://launchpad.net/malone/bugs/24011\">plug:spdif on emu10k1 gone after breezy upgrade</ulink> is a duplicate of <ulink url=\"https://launchpad.net/malone/bugs/21804\"> Muted sound after dist-upgrade from Hoary to Breezy</ulink>."
msgstr ""

#: C/bugs.xml:188(para) 
msgid "If you can't find it in the list of open bugs, you could try to find it in the list of closed ones. Don't feel discouraged if you don't find duplicates quickly in the beginning. After some time, you will recognize the usual suspects and will be able to identify them more easily."
msgstr ""

#: C/bugs.xml:193(para) 
msgid "If you encounter a bug that has a terrible/unintelligible title, rephrase it so people find it more quickly."
msgstr ""

#: C/bugs.xml:199(title) 
msgid "Reminder of the Code of Conduct"
msgstr ""

#: C/bugs.xml:201(para) 
msgid "Note that the Code of Conduct applies to conversations in bug reports too. If you observe people being disrespectful, please direct them to the <ulink url=\"http://www.ubuntu.com/community/conduct\">Ubuntu Code of Conduct</ulink>."
msgstr ""

#: C/bugs.xml:210(title) 
msgid "Managing Status"
msgstr ""

#: C/bugs.xml:212(para) 
msgid "As a bug triager or developer bug status an important tool to categorize bugs and have a good overview of the state of packages and software."
msgstr ""

#: C/bugs.xml:215(para) 
msgid "Here's a brief list and explanation of the various statuses:"
msgstr ""

#: C/bugs.xml:219(para) 
msgid "<emphasis role=\"bold\">Unconfirmed:</emphasis> Bugs start with this status. Bugs marked Unconfirmed sometimes lack information, are not ready, or are not confirmed yet. Most of them have not yet been triaged."
msgstr ""

#: C/bugs.xml:224(para) 
msgid "<emphasis role=\"bold\">Needs Info:</emphasis> If you have to ask the reporter questions, please set this bug to \"Needs Info\". A regular task for Needs Info bugs is to ask back. If there are no answers after a reasonable period, close them saying \"If you have more information on this bug, please reopen.\""
msgstr ""

#: C/bugs.xml:231(para) 
msgid "<emphasis role=\"bold\">Rejected:</emphasis> Bugs marked as Rejected are closed. Be sure to triple-check a bug before you reject it."
msgstr ""

#: C/bugs.xml:235(para) 
msgid "<emphasis role=\"bold\">Confirmed:</emphasis> Confirmed bugs require somebody else to confirm. Please don't confirm your own bugs."
msgstr ""

#: C/bugs.xml:239(para) 
msgid "<emphasis role=\"bold\">In Progress:</emphasis> If you start working on a bug, set it to In Progress so people know someone is working on the bug."
msgstr ""

#: C/bugs.xml:243(para) 
msgid "<emphasis role=\"bold\">Fix Committed:</emphasis> For upstream projects this means the fix is in CVS/SVN/bzr or committed somewhere. For package maintainers it means that the changes are pending and to be uploaded soon (it is what PENDINGUPLOAD is in Bugzilla)"
msgstr ""

#: C/bugs.xml:249(para) 
msgid "<emphasis role=\"bold\">Fix Released:</emphasis> For upstream projects this means that a release tarball was announced and is publicly available. For package maintainers this means that a fix was uploaded. Please don't be hesitant to add a changelog as a comment, so people know which changes affect their bug(s)."
msgstr ""

#: C/bugs.xml:260(title) 
msgid "Managing Importance"
msgstr ""

#: C/bugs.xml:262(para) 
msgid "Launchpad uses the following guidelines for assigning importance:"
msgstr ""

#: C/bugs.xml:265(para) 
msgid "<emphasis role=\"bold\">Untriaged:</emphasis> the bug report has not be triaged yet. This is the default importance for new bugs."
msgstr ""

#: C/bugs.xml:267(para) 
msgid "<emphasis role=\"bold\">Wishlist:</emphasis> a request to add a new feature to one of the programs in Ubuntu. Use this for bugs which aren't really bugs but ideas for new features which do not yet exist."
msgstr ""

#: C/bugs.xml:272(para) 
msgid "<emphasis role=\"bold\">Low:</emphasis> bugs that affect functionality, but to a lesser extent than most bugs"
msgstr ""

#: C/bugs.xml:276(para) 
msgid "<emphasis role=\"bold\">Mediam:</emphasis> a functionality bug of the standard variety. Most bugs are of \"Medium\" severity."
msgstr ""

#: C/bugs.xml:280(para) 
msgid "<emphasis role=\"bold\">High:</emphasis> a bug that has a severe impact on a small portion of Ubuntu users (estimated) or has a moderate impact on a large portion of Ubuntu users (estimated)"
msgstr ""

#: C/bugs.xml:285(para) 
msgid "<emphasis role=\"bold\">Critical:</emphasis> a bug which has a severe impact on a large portion of Ubuntu users"
msgstr ""

#: C/bookinfo.xml:18(title) 
msgid "Credits and License"
msgstr ""

#: C/bookinfo.xml:19(para) 
msgid "The following Ubuntu Documentation Team authors maintain this document:"
msgstr ""

#: C/bookinfo.xml:23(para) 
msgid "Jordan Mantha"
msgstr ""

#: C/bookinfo.xml:26(para) 
msgid "The Ubuntu Packaging Guide is also based on the contributions of:"
msgstr ""

#: C/bookinfo.xml:29(para) 
msgid "Alexandre Vassalotti"
msgstr ""

#: C/bookinfo.xml:32(para) 
msgid "Jonathan Patrick Davies"
msgstr ""

#: C/bookinfo.xml:35(para) 
msgid "Ankur Kotwal"
msgstr ""

#: C/bookinfo.xml:38(para) 
msgid "Rapha&euml;l Pinson"
msgstr ""

#: C/bookinfo.xml:41(para) 
msgid "Daniel Chen"
msgstr ""

#: C/bookinfo.xml:44(para) 
msgid "Martin Pitt"
msgstr ""

#: C/bookinfo.xml:48(para) 
msgid "Portions of the Ubuntu Packaging Guide are derived from the Debian New Maintainer's Guide and the Debian Policy Manual."
msgstr ""

#: C/bookinfo.xml:51(para) 
msgid "This document is made available under the GNU General Public License (GPL)."
msgstr ""

#: C/bookinfo.xml:52(para) 
msgid "You are free to modify, extend, and improve the Ubuntu documentation source code under the terms of this license. All derivative works must be released under this license."
msgstr ""

#: C/bookinfo.xml:54(para) 
msgid "This documentation is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE AS DESCRIBED IN THE DISCLAIMER."
msgstr ""

#: C/bookinfo.xml:57(para) 
msgid "Copies of the license are available in the appendices section of this book and online at &gpl-url;."
msgstr ""

#: C/bookinfo.xml:65(para) 
msgid "The Ubuntu Packaging Guide is an introduction to packaging programs for Ubuntu and other Debian based distributions"
msgstr ""

#: C/basic.xml:15(title) 
msgid "Basic Packaging"
msgstr ""

#: C/basic.xml:17(para) 
msgid "Two of the problems that many novice packagers face are that there are multiple ways of packaging, and there is more than one tool to do the job. We will go through three examples with the common build systems. First, we will use no build helper. This approach is usually the most difficult and is not often used in practice but gives the most straightforward look at the packaging process. Second, we will use <application>debhelper</application>, the most common build system in Debian. It helps the packager by automating repetitive tasks. Third, we will briefly cover the <emphasis role=\"bold\">C</emphasis>ommon <emphasis role=\"bold\">D</emphasis>ebian <emphasis role=\"bold\">B</emphasis>uild <emphasis role=\"bold\">S</emphasis>ystem (<application>CDBS</application>), a more streamlined build system that uses <application>debhelper</application>."
msgstr ""

#: C/basic.xml:33(para) 
msgid "Package development often requires installing many packages (especially <application>-dev</application> packages containing headers and other common development files) that are not part of a normal desktop &ubuntu; installation. If you want to avoid installing extra packages or would like to develop for a different &ubuntu; release (the development one, for instance) from what you currently have, the use of a chroot environment is highly recommended. A guide to setting up a <xref linkend=\"appendix-chroot\"/> can be found in the Appendix."
msgstr ""

#: C/basic.xml:46(title) 
msgid "Packaging From Scratch"
msgstr ""

#: C/basic.xml:48(para) 
msgid "<emphasis role=\"bold\">Requirements:</emphasis> build-essential, automake, gnupg, lintian, fakeroot and <xref linkend=\"gs-pbuilder\"/>."
msgstr ""

#: C/basic.xml:52(para) 
msgid "In this example we will be using the GNU <application><ulink url=\"http://www.gnu.org/software/hello/hello.html\">hello</ulink></application> program as our example. You can download the source tarball from <ulink url=\"http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz\">ftp.gnu.org</ulink>. For the purposes of this example, we will be using the <filename>~/hello/</filename> directory."
msgstr ""

#: C/basic.xml:59(screen) 
#, no-wrap
msgid "\nmkdir ~/hello\ncd ~/hello\nwget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz"
msgstr ""

#: C/basic.xml:64(para) 
msgid "We will also compare our package to one that is already packaged in the &ubuntu; repository. For now, we will place it in the <filename>ubuntu</filename> directory so we can look at it later. To get the source package, make sure you have a \"deb-src\" line in your <filename>/etc/apt/sources.list</filename> file for the Main repository. Then, simply execute:"
msgstr ""

#: C/basic.xml:72(screen) 
#, no-wrap
msgid "\nmkdir ubuntu\ncd ubuntu\napt-get source hello\ncd .."
msgstr ""

#: C/basic.xml:78(para) 
msgid "Unlike most <application>apt-get</application> commands, you do not need to have root privileges to get the source package, because it is downloaded to the current directory. In fact, it is recommended that you <emphasis>only</emphasis> use <application>apt-get source</application> as a regular user, because then you can edit files in the source package without needing root privileges."
msgstr ""

#: C/basic.xml:85(para) 
msgid "What the <application>apt-get source</application> command does is:"
msgstr ""

#: C/basic.xml:89(para) 
msgid "Download the source package. A source package commonly contains a .dsc file describing the package and giving md5sums for the source package, an .orig.tar.gz file containing the source code from the author(s), and a .diff.gz file containing patches applied against the source code with the packaging information."
msgstr ""

#: C/basic.xml:95(para) 
msgid "Untar the .orig.tar.gz file into the current directory."
msgstr ""

#: C/basic.xml:98(para) 
msgid "Apply the gunzipped .diff.gz to the unpacked source directory."
msgstr ""

#: C/basic.xml:103(para) 
msgid "If you manually download the source package (.dsc, .orig.tar.gz, and .diff.gz files), you can unpack them in the same way <application>apt-get source</application> does by using <application>dpkg-source</application> as follows:"
msgstr ""

#: C/basic.xml:107(screen) 
#, no-wrap
msgid "dpkg-source -x *.dsc"
msgstr ""

#: C/basic.xml:109(para) 
msgid "The first thing you will need to do is make a copy of the original (sometimes called \"upstream\") tarball in the following format: <filename>&lt;packagename&gt;_&lt;version&gt;.orig.tar.gz</filename>. This step does two things. First, it creates two copies of the source code. If you accidentally change or delete the working copy you can use the one you downloaded. Second, it is considered poor packaging practice to change the original source tarball unless absolutely necessary. See <xref linkend=\"basic-mistakes\"/> for reasons."
msgstr ""

#: C/basic.xml:120(screen) 
#, no-wrap
msgid "\ncp hello-2.1.1.tar.gz hello_2.1.1.orig.tar.gz\ntar -xzvf hello_2.1.1.orig.tar.gz"
msgstr ""

#: C/basic.xml:124(para) 
msgid "The underscore, \"_\", between the package name (hello) and the version (2.1.1), as opposed to a hyphen, \"-\", is very important. Your source package will incorrectly be built as a Debian native package."
msgstr ""

#: C/basic.xml:129(para) 
msgid "We now have a <filename>hello-2.1.1</filename> directory containing the source files. Now we need to create the customary <application>debian</application> directory where all the packaging information is stored, allowing us to separate the packaging files from the application source files."
msgstr ""

#: C/basic.xml:135(screen) 
#, no-wrap
msgid "\nmkdir hello-2.1.1/debian\ncd hello-2.1.1/debian/"
msgstr ""

#: C/basic.xml:139(para) 
msgid "We now need to create the essential files for any &ubuntu; source package: <filename>changelog</filename>, <filename>control</filename>, <filename>copyright</filename>, and <filename>rules</filename>. These are the files needed to create the binary packages (.deb files) from the original (upstream) source code. Let us look at each one in turn."
msgstr ""

#: C/basic.xml:147(title) 
msgid "changelog"
msgstr ""

#: C/basic.xml:149(para) 
msgid "The <filename>changelog</filename> file is, as its name implies, a listing of the changes made in each version. It has a specific format that gives the package name, version, distribution, changes, and who made the changes at a given time. If you have a GPG key, make sure to use the same name and email address in <filename>changelog</filename> as you have in your key. The following is a template <filename>changelog</filename>:"
msgstr ""

#: C/basic.xml:157(screen) 
#, no-wrap
msgid "\npackage (version) distribution; urgency=urgency\n\n  * change details\n    more change details\n  * even more change details\n\n-- maintainer name &lt;email address&gt;[two spaces]  date"
msgstr ""

#: C/basic.xml:166(para) 
msgid "The format (especially of the date) is important. The date should be in RFC822 format, which can be obtained from the <application>822-date</application> program."
msgstr ""

#: C/basic.xml:170(para) 
msgid "Here is a sample <filename>changelog</filename> file for <application>hello</application>:"
msgstr ""

#: C/basic.xml:173(screen) 
#, no-wrap
msgid "\nhello (2.1.1-1) edgy; urgency=low\n\n   * New upstream release with lots of bug fixes.\n\n-- Captain Packager &lt;packager@coolness.com&gt;  Wed,  5 Apr 2006 22:38:49 -0700"
msgstr ""

#: C/basic.xml:180(para) 
msgid "Notice that the version has a -1 appended to it, or what is called the Debian revision, which is used so that the packaging can be updated (to fix bugs for example) with new uploads within the same source release version."
msgstr ""

#: C/basic.xml:185(para) 
msgid "&ubuntu; and Debian have slightly different package versioning schemes to avoid conflicting packages with the same source version. If a Debian package has been changed in &ubuntu;, it has <emphasis>ubuntuX</emphasis> (where <emphasis>X</emphasis> is the &ubuntu; revision number) appended to the end of the Debian version. So if the Debian <application>hello</application> package was changed by &ubuntu;, the version string would be <filename>2.1.1-1ubuntu1</filename>. If a package for the application does not exist in Debian, then the Debian revision is <emphasis>0</emphasis> (<emphasis>e.g.</emphasis>, <filename>2.1.1-0ubuntu1</filename>)."
msgstr ""

#: C/basic.xml:199(para) 
msgid "Now look at the <filename>changelog</filename> for the &ubuntu; source package that we downloaded earlier:"
msgstr ""

#: C/basic.xml:202(screen) 
#, no-wrap
msgid "\nless ../../ubuntu/hello-2.1.1/debian/changelog"
msgstr ""

#: C/basic.xml:205(para) 
msgid "Notice that in this case the <emphasis>distribution</emphasis> is <emphasis>unstable</emphasis> (a Debian branch), because the Debian package has not been changed by &ubuntu;. Remember to set the <emphasis>distribution</emphasis> to your target distribution release."
msgstr ""

#: C/basic.xml:211(para) 
msgid "At this point create a <filename>changelog</filename> file in the <filename>debian</filename> directory where you should still be."
msgstr ""

#: C/basic.xml:218(title) 
msgid "control"
msgstr ""

#: C/basic.xml:219(para) 
msgid "The control file contains the information that the package manager (such as <application>apt-get</application>, <application>synaptic</application>, and <application>aptitude</application>) uses, build-time dependencies, maintainer information, and much more."
msgstr ""

#: C/basic.xml:224(para) 
msgid "For the &ubuntu; <application>hello</application> package, the control file looks something like:"
msgstr ""

#: C/basic.xml:226(screen) 
#, no-wrap
msgid "Source: hello\nSection: devel\nPriority: optional\nMaintainer: Captain Packager &lt;packager@coolness.com&gt; \nStandards-Version: 3.6.1\n\nPackage: hello\nArchitecture: any\nDepends: ${shlibs:Depends}\nDescription: The classic greeting, and a good example\n The GNU hello program produces a familiar, friendly greeting.  It\n allows non-programmers to use a classic computer science tool which\n would otherwise be unavailable to them.\n .\n Seriously, though: this is an example of how to do a Debian\n package.\n It is the Debian version of the GNU Project's `hello world' program\n (which is itself an example for the GNU Project)."
msgstr ""

#: C/basic.xml:245(para) 
msgid "Create <filename>control</filename> using the information above (making sure to provide your information for the <emphasis>Maintainer</emphasis> field)."
msgstr ""

#: C/basic.xml:249(para) 
msgid "The first paragraph gives information about the source package. Let us go through each line:"
msgstr ""

#: C/basic.xml:253(para) 
msgid "<emphasis role=\"bold\">Source:</emphasis> This is the name of the source package, in this case, <emphasis>hello</emphasis>."
msgstr ""

#: C/basic.xml:257(para) 
msgid "<emphasis role=\"bold\">Section:</emphasis> The apt repositories are split up into sections for ease of browsing and categorization of software. In this case, <application>hello</application> belongs in the <emphasis>devel</emphasis> section."
msgstr ""

#: C/basic.xml:263(para) 
msgid "<emphasis role=\"bold\">Priority:</emphasis> This sets the importance of the package to users. It should be one of the following:"
msgstr ""

#: C/basic.xml:269(para) 
msgid "<emphasis role=\"bold\">Required</emphasis> - packages that are essential for the system to work properly. If they are removed it is highly likely that your system will break in an unrecoverable way."
msgstr ""

#: C/basic.xml:275(para) 
msgid "<emphasis role=\"bold\">Important</emphasis> - minimal set of packages for a usable system. Removing these packages will not produce an unrecoverable breakage of your system, but they are generally considered important tools without which any Linux installation would be incomplete. Note: This does not include things like Emacs or even the X Window System."
msgstr ""

#: C/basic.xml:283(para) 
msgid "<emphasis role=\"bold\">Standard</emphasis> - Somewhat self explanatory."
msgstr ""

#: C/basic.xml:286(para) 
msgid "<emphasis role=\"bold\">Optional</emphasis> - in essence this category is for non-required packages, or the bulk of packages. However, these packages should not conflict with each other."
msgstr ""

#: C/basic.xml:291(para) 
msgid "<emphasis role=\"bold\">Extra</emphasis> - packages that may conflict with packages in one of the above categories. Also used for specialized packages that would only be useful to people who already know the purpose of the package."
msgstr ""

#: C/basic.xml:300(para) 
msgid "<emphasis role=\"bold\">Maintainer:</emphasis> The package maintainer with email address."
msgstr ""

#: C/basic.xml:303(para) 
msgid "<emphasis role=\"bold\">Standards-Version:</emphasis> The version of the <ulink url=\"http://www.debian.org/doc/debian-policy/\">Debian Policy</ulink> to which the package adheres (in this case, version 3.6.1). An easy way to find the current version is <emphasis>apt-cache show debian-policy | grep Version</emphasis>."
msgstr ""

#: C/basic.xml:311(para) 
msgid "<emphasis role=\"bold\">Build-Depends:</emphasis> One of the most important fields and often the source of bugs, this line lists the binary packages (with versions if necessary) that need to be installed in order to create the binary package(s) from the source package. Packages that are essential are required by <emphasis>build-essential</emphasis> and do not need to be included in the Build-Depends line. In the case of <application>hello</application>, all the needed packages are a part of build-essential, so a Build-Depends line is not needed. The list of build-essential packages can be found at <filename>/usr/share/doc/build-essential/list</filename>."
msgstr ""

#: C/basic.xml:327(para) 
msgid "The second paragraph is for the binary package that will be built from the source. If multiple binary packages are built from the source package, there should be one section for <emphasis>each</emphasis> one. Again, let us go through each line:"
msgstr ""

#: C/basic.xml:334(para) 
msgid "<emphasis role=\"bold\">Package:</emphasis> The name for the binary package. Many times for simple programs (such as <application>hello</application>), the source and binary packages' names are identical."
msgstr ""

#: C/basic.xml:339(para) 
msgid "<emphasis role=\"bold\">Architecture:</emphasis> The architectures for which the binary package(s) will be built. Examples are:"
msgstr ""

#: C/basic.xml:345(para) 
msgid "<emphasis role=\"bold\">all</emphasis> - The source is <emphasis>not</emphasis> architecture-dependent. Programs that use Python or other interpreted languages would use this. The resulting binary package would end with <filename>_all.deb</filename>."
msgstr ""

#: C/basic.xml:351(para) 
msgid "<emphasis role=\"bold\">any</emphasis> - The source <emphasis>is</emphasis> architecture-dependent and should compile on all the supported architectures. There will be a .deb file for each architecture ( <filename>_i386.deb</filename> for instance)"
msgstr ""

#: C/basic.xml:358(para) 
msgid "A subset of architectures (i386, amd64, ppc, etc.) can be listed to indicate that the source is architecture-dependent and does not work for all architectures supported by &ubuntu;."
msgstr ""

#: C/basic.xml:365(para) 
msgid "<emphasis role=\"bold\">Depends:</emphasis> The list of packages that the binary package depends on for functionality. For <application>hello</application>, we see <filename>${shlibs:Depends}</filename>, which is a variable that substitutes in the needed shared libraries. See the <filename>dpkg-source</filename> man page for more information."
msgstr ""

#: C/basic.xml:373(para) 
msgid "<emphasis role=\"bold\">Recommends:</emphasis> Used for packages that are highly recommended and usually are installed with the package. Some package managers, most notably <application>aptitude</application>, automatically install Recommended packages."
msgstr ""

#: C/basic.xml:379(para) 
msgid "<emphasis role=\"bold\">Suggests:</emphasis> Used for packages that are similar or useful when this package is installed."
msgstr ""

#: C/basic.xml:383(para) 
msgid "<emphasis role=\"bold\">Conflicts:</emphasis> Used for packages that will conflict with this package. Both cannot be installed at the same time. If one is being installed, the other will be removed."
msgstr ""

#: C/basic.xml:388(para) 
msgid "<emphasis role=\"bold\">Description:</emphasis> Both short and long descriptions are used by package managers. The format is:"
msgstr ""

#: C/basic.xml:392(screen) 
#, no-wrap
msgid "Description: &lt;single line synopsis&gt;\n &lt;extended description over several lines&gt;"
msgstr ""

#: C/basic.xml:395(para) 
msgid "Note that there is one space at the beginning of each line in the long description. More information on how to make a good description can be found at <ulink url=\"http://people.debian.org/~walters/descriptions.html\">http://people.debian.org/~walters/descriptions.html</ulink>."
msgstr ""

#: C/basic.xml:406(title) 
msgid "copyright"
msgstr ""

#: C/basic.xml:408(para) 
msgid "This file gives the copyright information. Generally, copyright information is found in the <filename>COPYING</filename> file in the program's source directory. This file should include such information as the names of the author and the packager, the URL from which the source came, a Copyright line with the year and copyright holder, and the text of the copyright itself. An example template would be:"
msgstr ""

#: C/basic.xml:415(screen) 
#, no-wrap
msgid "This package was debianized by {Your Name} &lt;your email address&gt;\n{Date}\n\nIt was downloaded from: {URL of webpage} \n\nUpstream Author(s): {Name(s) and email address(es) of author(s)}\n\nCopyright:\n\tCopyright (C) {Year(s)} by {Author(s)} {Email address(es)}\n\nLicense:\n\n"
msgstr ""

#: C/basic.xml:429(para) 
msgid "As one can imagine, <application>hello</application> is released under the GPL license. In this case it is easiest to just copy the <filename>copyright</filename> file from the &ubuntu; package:"
msgstr ""

#: C/basic.xml:434(screen) 
#, no-wrap
msgid "\ncp ../../ubuntu/hello-2.1.1/debian/copyright ."
msgstr ""

#: C/basic.xml:437(para) 
msgid "You must include the complete copyright unless it is is GPL, LGPL, BSD, or Artistic License, in which case you can refer to the corresponding file in the <filename>/usr/share/common-licenses/</filename> directory."
msgstr ""

#: C/basic.xml:441(para) 
msgid "Notice that the &ubuntu; package's <filename>copyright</filename> includes a license statement for the manual. It is important that <emphasis>all</emphasis> the files in the source be covered by a license statement."
msgstr ""

#: C/basic.xml:449(title) 
msgid "rules"
msgstr ""

#: C/basic.xml:451(para) 
msgid "The <filename>rules</filename> file is an executable Makefile that has rules for building the binary package from the source packages. For <application>hello</application>, it will be easier to use the <filename>rules</filename> from the &ubuntu; package:"
msgstr ""

#: C/basic.xml:457(screen) 
#, no-wrap
msgid "#!/usr/bin/make -f\n# Sample debian/rules file - for GNU Hello.\n# Copyright 1994,1995 by Ian Jackson.\n# I hereby give you perpetual unlimited permission to copy,\n# modify and relicense this file, provided that you do not remove\n# my name from the file itself.  (I assert my moral right of\n# paternity under the Copyright, Designs and Patents Act 1988.)\n# This file may have to be extensively modified\n\npackage = hello\ndocdir = debian/tmp/usr/share/doc/$(package)\n\nCC = gcc\nCFLAGS = -g -Wall\nINSTALL_PROGRAM = install\n\nifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n  CFLAGS += -O2\nendif\nifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))\n  INSTALL_PROGRAM += -s\nendif\n\nbuild:\n        $(checkdir)\n        ./configure --prefix=/usr\n        $(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n        touch build\n\nclean:\n        $(checkdir)\n        rm -f build\n        -$(MAKE) -i distclean\n        rm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars\n\nbinary-indep:   checkroot build\n        $(checkdir)\n# There are no architecture-independent files to be uploaded\n# generated by this package.  If there were any they would be\n# made here.\n\nbinary-arch:    checkroot build\n        $(checkdir)\n        rm -rf debian/tmp\n        install -d debian/tmp/DEBIAN $(docdir)\n        install -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN\n        $(MAKE) INSTALL_PROGRAM=\"$(INSTALL_PROGRAM)\" \\\n                prefix=$$(pwd)/debian/tmp/usr install\n        cd debian/tmp &amp;&amp; mv usr/info usr/man usr/share\n        cp -a NEWS debian/copyright $(docdir)\n        cp -a debian/changelog $(docdir)/changelog.Debian\n        cp -a ChangeLog $(docdir)/changelog\n        cd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian\n        gzip -r9 debian/tmp/usr/share/man\n        gzip -9 debian/tmp/usr/share/info/*\n        dpkg-shlibdeps debian/tmp/usr/bin/hello\n        dpkg-gencontrol -isp\n        chown -R root:root debian/tmp\n        chmod -R u+w,go=rX debian/tmp\n        dpkg --build debian/tmp ..\n\ndefine checkdir\n        test -f src/$(package).c -a -f debian/rules\nendef\n\nbinary: binary-indep binary-arch\n\ncheckroot:\n        $(checkdir)\n        test $$(id -u) = 0\n\n.PHONY: binary binary-arch binary-indep clean checkroot\n"
msgstr ""

#: C/basic.xml:531(para) 
msgid "Let us go through this file in some detail. One of the first parts you will see is the declaration of some variables:"
msgstr ""

#: C/basic.xml:533(screen) 
#, no-wrap
msgid "package = hello\ndocdir = debian/tmp/usr/share/doc/$(package)\n\nCC = gcc\nCFLAGS = -g -Wall\nINSTALL_PROGRAM = install\n\nifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n  CFLAGS += -O2\nendif\nifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))\n  INSTALL_PROGRAM += -s\nendif\n"
msgstr ""

#: C/basic.xml:547(para) 
msgid "This section sets the CFLAGS for the compiler and also handles the <filename>noopt</filename> and <filename>nostrip</filename> DEB_BUILD_OPTIONS for debugging."
msgstr ""

#: C/basic.xml:551(para) 
msgid "Next is the <filename>build</filename> rule:"
msgstr ""

#: C/basic.xml:552(screen) 
#, no-wrap
msgid "build:\n\t$(checkdir)\n\t./configure --prefix=/usr\n\t$(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n\ttouch build"
msgstr ""

#: C/basic.xml:557(para) 
msgid "This rule runs <emphasis>./configure</emphasis> with the proper prefix, runs <emphasis>make</emphasis>, and creates a <filename>build</filename> file that is a timestamp of the build to prevent erroneous multiple compilations."
msgstr ""

#: C/basic.xml:560(para) 
msgid "The next rule is <filename>clean</filename>, which runs <emphasis>make -i distclean</emphasis> and removes the files that are made during the package building."
msgstr ""

#: C/basic.xml:563(screen) 
#, no-wrap
msgid "clean:\n\t$(checkdir)\n\trm -f build\n\t-$(MAKE) -i distclean\n\trm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars"
msgstr ""

#: C/basic.xml:569(para) 
msgid "Next we see an empty <filename>binary-indep</filename> rule, because there are no architecture-independent files created in this package."
msgstr ""

#: C/basic.xml:572(para) 
msgid "There are, however, many architecture-dependent files, so <filename>binary-arch</filename> is used:"
msgstr ""

#: C/basic.xml:575(screen) 
#, no-wrap
msgid "binary-arch:    checkroot build\n\t\t$(checkdir)\n\t\trm -rf debian/tmp\n\t\tinstall -d debian/tmp/DEBIAN $(docdir)\n\t\tinstall -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN\n\t\t$(MAKE) INSTALL_PROGRAM=\"$(INSTALL_PROGRAM)\" \\\n\t\tprefix=$$(pwd)/debian/tmp/usr install\n\t\tcd debian/tmp &amp;&amp; mv usr/info usr/man usr/share\n\t\tcp -a NEWS debian/copyright $(docdir)\n\t\tcp -a debian/changelog $(docdir)/changelog.Debian\n\t\tcp -a ChangeLog $(docdir)/changelog\n\t\tcd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian\n\t\tgzip -r9 debian/tmp/usr/share/man\n\t\tgzip -9 debian/tmp/usr/share/info/*\n\t\tdpkg-shlibdeps debian/tmp/usr/bin/hello\n\t\tdpkg-gencontrol -isp\n\t\tchown -R root:root debian/tmp\n\t\tchmod -R u+w,go=rX debian/tmp\n\t\tdpkg --build debian/tmp .."
msgstr ""

#: C/basic.xml:595(para) 
msgid "First, notice that this rule calls the <filename>checkroot</filename> rule to make sure the package is built as root and calls the <filename>build</filename> rule to compile the source. Then the <filename>debian/tmp/DEBIAN</filename> and <filename>debian/tmp/usr/share/doc/hello</filename> files are created, and the <filename>postinst</filename> and the <filename>prerm&gt;</filename> scripts are installed to <filename>debian/tmp/DEBIAN</filename>. Then <emphasis>make install</emphasis> is run with a prefix that installs to the <filename>debian/tmp/usr</filename> directory. Afterward the documentation files (NEWS, ChangeLog, and the debian changelog) are gzipped and installed. <emphasis>dpkg-shlibdeps</emphasis> is invoked to find the shared library dependencies of the <application>hello</application> executable, and it stores the list in the <filename>debian/substvars</filename> file for the ${shlibs:Depends} variable in <filename>control</filename>. Then <emphasis>dpkg-gencontrol</emphasis> is run to create a control file for the binary package, and it makes the substitutions created by <emphasis>dpkg-shlibdeps</emphasis>. Finally, after the permissions of the <filename>debian/tmp</filename> have been set, <emphasis>dpkg --build</emphasis> is run to build the binary .deb package and place it in the parent directory."
msgstr ""

#: C/basic.xml:613(title) 
msgid "postinst and prerm"
msgstr ""

#: C/basic.xml:615(para) 
msgid "The <filename>postinst</filename> and <filename>prerm</filename> files are examples of maintainer scripts. They are shell scripts that are executed after installation and before removal, respectively, of the package. In the case of the &ubuntu; <application>hello</application> package, they are used to install (and remove) the info file. Go ahead and copy them into the current <filename>debian</filename> directory."
msgstr ""

#: C/basic.xml:624(screen) 
#, no-wrap
msgid "\ncp ../../ubuntu/hello-2.1.1/debian/postinst .\ncp ../../ubuntu/hello-2.1.1/debian/prerm ."
msgstr ""

#: C/basic.xml:633(para) 
msgid "Now that we have gone through the files in the <filename>debian</filename> directory for <application>hello</application> in detail, we can build the source (and binary) packages. First let us move into the root of the extracted source:"
msgstr ""

#: C/basic.xml:641(para) 
msgid "Now we build the source package using <application>dpkg-buildpackage</application>:"
msgstr ""

#: C/basic.xml:644(screen) 
#, no-wrap
msgid "dpkg-buildpackage -S -rfakeroot"
msgstr ""

#: C/basic.xml:646(para) 
msgid "The -S flag tells <application>dpkg-buildpackage</application> to build a source package, and the -r flag tells it to use <application>fakeroot</application> to allow us to have fake root privileges when making the package. <application>dpkg-buildpackage</application> will take the <filename>.orig.tar.gz</filename> file and produce a <filename>.diff.gz</filename> (the difference between the original tarball from the author and the directory we have created, <filename>debian/</filename> and its contents) and a <filename>.dsc</filename> file that has the description and md5sums for the source package. The <filename>.dsc</filename> and <filename>*_source.changes</filename> (used for uploading the source package) files are signed using your GPG key."
msgstr ""

#: C/basic.xml:662(para) 
msgid "If you do not have a <application>gpg</application> key set up you will get an error from <application>debuild</application>. You can either set up a <application>gpg</application> key or use the <emphasis>-us -uc</emphasis> keys with <application>debuild</application> to turn off signing. However, you will not be able to have your packages uploaded to Ubuntu without signing them."
msgstr ""

#: C/basic.xml:664(para) 
msgid "To make sure <application>debuild</application> finds the right <application>gpg</application> key you should set the DEBFULLNAME and DEBEMAIL environment variables (in your <filename>~/.bashrc</filename> for instance) to the name and email address you use for your <application>gpg</application> key and in the <filename>debian/changelog</filename>"
msgstr ""

#: C/basic.xml:664(para) 
msgid "Some people have reported that they were unable to get <application>debuild</application> to find their <application>gpg</application> key properly, even after setting the above environment variables. To get around this you can give <application>debuild</application> the <emphasis>-k&lt;keyid&gt;</emphasis> flag where &lt;keyid&gt; is your <application>gpg</application> key ID."
msgstr ""

#: C/basic.xml:667(para) 
msgid "In addition to the source package, we can also build the binary package with <application>pbuilder</application>:"
msgstr ""

#: C/basic.xml:673(para) 
msgid "Using <application>pbuilder</application> to build the binary packages is very important. It ensures that the build dependencies are correct, because <application>pbuilder</application> provides only a minimal environment, so all the build-time dependencies are determined by the <filename>control</filename> file."
msgstr ""

#: C/basic.xml:680(para) 
msgid "We can check the source package for common mistakes using <application>lintian</application>:"
msgstr ""

#: C/basic.xml:823(screen) 
#, no-wrap
msgid "\nhello-debhelper (2.1.1-1) edgy; urgency=low\n\n  * Initial release\n\n  -- Captain Packager &lt;packager@coolness.com&gt;  Thu,  6 Apr 2006 10:07:19 -0700"
msgstr ""

#: C/basic.xml:1102(title) 
msgid "Common Mistakes"
msgstr ""

#: C/basic.xml:1105(title) 
msgid "dh_make Example Files"
msgstr ""

#: C/basic.xml:1107(para) 
msgid "When you use dh_make to create the initial \"debianization\", example files for various tasks are created in the <filename>debian/</filename> directory. The templates have a .ex extension. If you want to use one, rename it to remove the extension. If you do not need it, remove it to keep the <filename>debian/</filename> directory clean."
msgstr ""

#: C/basic.xml:1116(title) 
msgid "Changing the Original Tarball"
msgstr ""

#: C/basic.xml:1118(para) 
msgid "There are two types of source packages, native and non-native. A native package is one that is specific to &ubuntu;/Debian. It has the <application>debian/</application> directory containing the packaging information and any changes to the source included in the tarball (usually &lt;packagename&gt;_&lt;version&gt;.tar.gz). Non-native packages are more common. A non-native package splits the source package into a &lt;packagename&gt;_&lt;version&gt;.orig.tar.gz tarball that is identical (hopefully including md5sum) to the source tarball downloaded from the project's homepage and a .diff.gz file that contains all the differences (<filename>debian/</filename> directory and patches) from the original source tarball."
msgstr ""

#: C/basic.xml:1130(para) 
msgid "Here is a list of potential problems that can occur if you change the original tarball:"
msgstr ""

#: C/basic.xml:1135(para) 
msgid "Reproducibility"
msgstr ""

#: C/basic.xml:1137(para) 
msgid "If you take just the .diff.gz and .dsc, you or someone else has no means to reproduce the changes in the original tarball."
msgstr ""

#: C/basic.xml:1141(para) 
msgid "Upgradeability"
msgstr ""

#: C/basic.xml:1143(para) 
msgid "It is much easier to upgrade to a new upstream (from the author) version if the .orig.tar.gz is preserved and there is a clear separation between the upstream source and the changes made to produce the &ubuntu; source package."
msgstr ""

#: C/basic.xml:1148(para) 
msgid "Debian to &ubuntu; Synchronization"
msgstr ""

#: C/basic.xml:1150(para) 
msgid "Changing original tarballs makes it hard to automatically sync from Debian to &ubuntu;. Normally, only the .diff.gz and .dsc files change within the same upstream version, since the .orig.tar.gz file is shared by all the Debian or &ubuntu; revisions. It is much more difficult to sync if the md5sums of the .orig.tar.gz files are not the same."
msgstr ""

#: C/basic.xml:1157(para) 
msgid "Usage of Revision Control for Debian package"
msgstr ""

#: C/basic.xml:1159(para) 
msgid "If you use svn (<application>svn-buildpackage</application>) to handle your Debian package, you usually don't store the original tarball inside. If someone else does a checkout, he'll need to get the original tarball separately. Other revision control systems can be used to track only the packaging files (<filename>debian/</filename>, etc.) and not the whole source. However, if the .orig.tar.gz is not the same, then obviously problems can occur."
msgstr ""

#: C/basic.xml:1168(para) 
msgid "Security tracking"
msgstr ""

#: C/basic.xml:1170(para) 
msgid "Consider a situation where someone <emphasis>wants</emphasis> to introduce a backdoor/rootkit or other evil stuff. If the original tarball is intact, it can be scanned easily through the .diff.gz to see if the person who modified the package tried to do something evil. If the tarball has changed, however, you also need to check the differences between the tarball and the original source."
msgstr ""

#: C/basic.xml:1177(para) 
msgid "You still have to trust the authors of the software not to do anything evil, but that is the case regardless of whether the original is changed."
msgstr ""

#: C/basic.xml:1181(para) 
msgid "The .diff.gz"
msgstr ""

#: C/basic.xml:1183(para) 
msgid "The option to use the .diff.gz to reflect changes to the original tarball already exists, so it is easy to make changes without touching the original tarball."
msgstr ""

#: C/basic.xml:1190(emphasis) 
msgid "It is acceptable to change the original tarball if one or more of the following hold true:"
msgstr ""

#: C/basic.xml:1195(para) 
msgid "It contains non-free parts that cannot be redistributed. Remove those parts, and note it in the packaging. Often such packages use \"dfsg\" (which stands for Debian Free Software Guidelines) in the package name and/or versioning to indicate that non-free parts have been removed."
msgstr ""

#: C/basic.xml:1201(para) 
msgid "The authors only provide bzip2'ed source."
msgstr ""

#: C/basic.xml:1204(para) 
msgid "Just <application>bunzip2</application> the .tar.bz2 and <application>gzip -9 </application> the resulting tar."
msgstr ""

#: C/basic.xml:1208(para) 
msgid "The md5sums of the .tar you provide and the original .tar must match!"
msgstr ""

#: C/basic.xml:1211(para) 
msgid "Eventually provide a get-orig-source rule in debian/rules that does this conversion automatically."
msgstr ""

#: C/basic.xml:1218(para) 
msgid "Directly imported from SVN"
msgstr ""

#: C/basic.xml:1220(para) 
msgid "Provide get-orig-source in debian/rules."
msgstr ""

#: C/basic.xml:1226(emphasis) 
msgid "not"
msgstr ""

#: C/basic.xml:1226(emphasis) 
msgid "The following are <placeholder-1/> reasons to change the original tarball:"
msgstr ""

#: C/basic.xml:1231(para) 
msgid "Wrong Directory Layout"
msgstr ""

#: C/basic.xml:1233(para) 
msgid "<application>dpkg-source</application> is quite flexible and manages to produce the correct directory layout even if:"
msgstr ""

#: C/basic.xml:1239(para) 
msgid "The directory inside the tarball is not named &lt;upstream&gt;-&lt;version&gt;."
msgstr ""

#: C/basic.xml:1242(para) 
msgid "There is no subdirectory inside the tarball."
msgstr ""

#: C/basic.xml:1248(para) 
msgid "Files need to be removed to keep the .diff.gz small (e.g., files created by autotools). Everything that needs to be deleted should be removed in the <application>clean</application> rule. Since the .diff.gz is created with diff -u, you will not see removed files in the .diff.gz."
msgstr ""

#: C/basic.xml:1254(para) 
msgid "Files need to be modified. Files that need to be modified should to go into .diff.gz. That is its purpose!"
msgstr ""

#: C/basic.xml:1257(para) 
msgid "Wrong permissions on files. You can use <filename>debian/rules</filename> to do this."
msgstr ""

#: C/basic.xml:1263(para) 
msgid "What do I do with an .orig.tar.gz that already includes a <filename>debian/</filename> dir?"
msgstr ""

#: C/basic.xml:1266(para) 
msgid "Do not repackage it. You can ask the author(s) to delete the debian/ dir and provide a diff.gz instead. This makes it easier to review their work, and it separates packaging from program source."
msgstr ""

#: C/basic.xml:1271(para) 
msgid "It is always a good idea to contact the program's author(s) and ask if you may correct autoconf issues, directory layout, an outdated Free Software Foundation address in COPYRIGHT files, or other things that are not specific to the packaging but would be convenient for you so you do not need to \"patch\" the source in .diff.gz."
msgstr ""

#: C/basic.xml:1280(title) 
msgid "Copyright Information"
msgstr ""

#: C/basic.xml:1282(para) 
msgid "The <filename>debian/copyright</filename> file should contain:"
msgstr ""

#: C/basic.xml:1286(para) 
msgid "The licensing information for <emphasis>all</emphasis> files in the source. Sometimes author(s) put a license in <filename>COPYING</filename> but have different licensing information for some files in the source."
msgstr ""

#: C/basic.xml:1291(para) 
msgid "The copyright holder(s) and year(s)."
msgstr ""

#: C/basic.xml:1293(para) 
msgid "The <emphasis>entire</emphasis> license unless it is one of the licenses found in <filename>/usr/share/common-licenses</filename>, in which case you should just include the preamble."
msgstr ""

#: C/appendix.xml:15(title) 
msgid "Appendix"
msgstr ""

#: C/appendix.xml:18(title) 
msgid "Additional Resources"
msgstr ""

#: C/appendix.xml:20(emphasis) 
msgid "Debian Resources"
msgstr ""

#: C/appendix.xml:23(para) 
msgid "<ulink url=\"http://www.debian.org/doc/manuals/maint-guide/\"> Debian New Maintainers Guide</ulink> - Good resource for learning to package."
msgstr ""

#: C/appendix.xml:28(para) 
msgid "<ulink url=\"http://www.debian.org/doc/debian-policy/\"> Debian Policy</ulink> - The essential Policy manual for Debian and Debian-based distros."
msgstr ""

#: C/appendix.xml:33(para) 
msgid "<ulink url=\"http://www.debian.org/doc/manuals/developers-reference/\"> Debian Developer's Reference</ulink> - Specific information for Debian Developers but has some items of interest for packagers."
msgstr ""

#: C/appendix.xml:39(para) 
msgid "<ulink url=\"http://www.netfort.gr.jp/~dancer/column/libpkg-guide/libpkg-guide.html\">Library Packaging Guide</ulink> - Guide for packaging libraries."
msgstr ""

#: C/appendix.xml:43(para) 
msgid "<ulink url=\"http://women.alioth.debian.org/wiki/index.php/English/PackagingTutorial\">Debian Women Packaging Tutorial</ulink> - Another good introduction to Debian packaging."
msgstr ""

#: C/appendix.xml:50(emphasis) 
msgid "Other Resources"
msgstr ""

#: C/appendix.xml:54(ulink) 
msgid "IBM Packaging Tutorial"
msgstr ""

#: C/appendix.xml:58(ulink) 
msgid "Duckcorp CDBS Documentation"
msgstr ""

#: C/appendix.xml:62(ulink) 
msgid "Ubuntu MOTU Documentation"
msgstr ""

#: C/appendix.xml:67(ulink) 
msgid "Kubuntu Packaging Guide"
msgstr ""

#: C/appendix.xml:76(title) 
msgid "Chroot Environment"
msgstr ""

#: C/appendix.xml:78(para) 
msgid "A chroot environment is commonly used for development-related work and is basically an install of build-related software. It is always a good idea to do development work in a chroot environment, as it often requires the installation of development packages (whose main purpose is for building packages). An example is when a certain application requires the headers and development version of a library to build (e.g. <application>libabc-dev</application>). A normal user would not require the development version of <application>libabc</application>. Thus it is better to install such development packages in a chroot, leaving the normal operating environment clean and uncluttered. First, install the required packages:"
msgstr ""

#: C/appendix.xml:91(screen) 
#, no-wrap
msgid "sudo apt-get install dchroot debootstrap"
msgstr ""

#: C/appendix.xml:93(para) 
msgid "Make sure to install at least the version of <application>debootstrap</application> that is from the &ubuntu; release for which you are trying to create the chroot. You may have to download it from <ulink url=\"http://packages.ubuntu.com\">packages.ubuntu.com</ulink> and manually install it with <application>dpkg -i</application>."
msgstr ""

#: C/appendix.xml:101(para) 
msgid "The next steps are to create, configure, and enter the chroot environment."
msgstr ""

#: C/appendix.xml:104(screen) 
#, no-wrap
msgid "\nsudo mkdir /var/chroot\necho \"mychroot /var/chroot\" | sudo tee -a /etc/dchroot.conf\nsudo debootstrap --variant=buildd edgy /var/chroot/ http://archive.ubuntu.com/ubuntu/"
msgstr ""

#: C/appendix.xml:109(para) 
msgid "Creating a chroot environment will take some time as <application>debootstrap</application> downloads and configures a minimal &ubuntu; installation."
msgstr ""

#: C/appendix.xml:113(screen) 
#, no-wrap
msgid "sudo cp /etc/resolv.conf /var/chroot/etc/resolv.conf\nsudo cp /etc/apt/sources.list /var/chroot/etc/apt/\nsudo chroot /var/chroot/"
msgstr ""

#: C/appendix.xml:117(para) 
msgid "In order to be able to use apt in the chroot, add Ubuntu sources to the chroot's apt sources. For the moment, ignore any warnings about package authentication:"
msgstr ""

#: C/appendix.xml:121(screen) 
#, no-wrap
msgid "\necho \"deb     http://archive.ubuntu.com/ubuntu edgy main restricted \\\n\tuniverse multiverse\" &gt; /etc/apt/sources.list\necho \"deb-src http://archive.ubuntu.com/ubuntu edgy main restricted \\\n\tuniverse multiverse\" &gt;&gt; /etc/apt/sources.list\napt-get update\napt-get install build-essential dh-make automake pbuilder gnupg lintian \\\n\twget debconf devscripts gnupg sudo\napt-get update\nexit"
msgstr ""

#: C/appendix.xml:132(para) 
msgid "Run the following command to configure locales:"
msgstr ""

#: C/appendix.xml:134(screen) 
#, no-wrap
msgid "\nsudo chroot /var/chroot/\napt-get install dialog language-pack-en\nexit"
msgstr ""

#: C/appendix.xml:139(para) 
msgid "If you want support for a language other than English replace <emphasis>en</emphasis> in <application>language-pack-en</application> with the appropriate language code."
msgstr ""

#: C/appendix.xml:144(para) 
msgid "Next, fix the user and root passwords for the chroot environment. The last line below is to avoid sudo warnings when resolving in the chroot environment:"
msgstr ""

#: C/appendix.xml:148(screen) 
#, no-wrap
msgid "\nsudo cp /etc/passwd /var/chroot/etc/\nsudo sed 's/\\([^:]*\\):[^:]*:/\\1:*:/' /etc/shadow | sudo tee /var/chroot/etc/shadow\nsudo cp /etc/group /var/chroot/etc/\nsudo cp /etc/hosts /var/chroot/etc/"
msgstr ""

#: C/appendix.xml:154(para) 
msgid "To enable sudo, set up your root password and the first sudo user in the admin group (for the chroot environment). In the following commands, substitute \"&lt;user&gt;\" with the username that will be used in the chroot environment:"
msgstr ""

#: C/appendix.xml:159(screen) 
#, no-wrap
msgid "\nsudo cp /etc/sudoers /var/chroot/etc/\nsudo chroot /var/chroot/\ndpkg-reconfigure passwd\npasswd &lt;user&gt;\nexit"
msgstr ""

#: C/appendix.xml:166(para) 
msgid "The system fstab needs to be modified so that the chroot environment will have access to the system home directories, temp directory, etc. Note that the actual system home directory is used in the chroot environment."
msgstr ""

#: C/appendix.xml:170(screen) 
#, no-wrap
msgid "sudo editor /etc/fstab"
msgstr ""

#: C/appendix.xml:172(para) 
msgid "Add these lines:"
msgstr ""

#: C/appendix.xml:173(screen) 
#, no-wrap
msgid "\n/home           /var/chroot/home        none    bind            0       0\n/tmp            /var/chroot/tmp         none    bind            0       0 \nproc-chroot     /var/chroot/proc        proc    defaults        0       0 \ndevpts-chroot   /var/chroot/dev/pts     devpts  defaults        0       0 "
msgstr ""

#: C/appendix.xml:179(para) 
msgid "Mount the new fstab entries"
msgstr ""

#: C/appendix.xml:181(screen) 
#, no-wrap
msgid "sudo mount -a"
msgstr ""

#: C/appendix.xml:183(para) 
msgid "The default bash profile includes chroot information in the prompt. To make this visible:"
msgstr ""

#: C/appendix.xml:186(screen) 
#, no-wrap
msgid "\nsudo chroot /var/chroot/\necho mychroot &gt; /etc/debian_chroot\nexit"
msgstr ""

#: C/appendix.xml:191(para) 
msgid "Now use your chroot (you may omit the -c mychroot if there's only one or you just want the first one in <filename>/etc/dchroot.conf</filename>). The -d parameter means that your environment will be preserved. This parameter is generally useful if you want chrooted applications to seamlessly use your X server, your session manager, etc."
msgstr ""

#: C/appendix.xml:198(screen) 
#, no-wrap
msgid "dchroot -c mychroot -d"
msgstr ""

#: C/appendix.xml:203(title) 
msgid "<application>dh_make</application> example files"
msgstr ""

#: C/appendix.xml:207(term) 
msgid "Readme.Debian"
msgstr ""

#: C/appendix.xml:209(para) 
msgid "This file is used to document changes that you have made to the original upstream source that other people might need to know or information specific to Debian or &ubuntu;."
msgstr ""

#: C/appendix.xml:217(term) 
msgid "conffiles.ex"
msgstr ""

#: C/appendix.xml:219(para) 
msgid "If the package installs a configuration file, when the package is upgraded <application>dpkg</application> can prompt a user whether to keep his or her version if modified or install the new version. Such configuration files should be listed in <filename>conffiles</filename> (one per line). Do not list configuration files that are only modified by the package or have to be set up by the user to work."
msgstr ""

#: C/appendix.xml:233(term) 
msgid "cron.d.ex"
msgstr ""

#: C/appendix.xml:235(para) 
msgid "If your package requires regularly scheduled tasks to operate properly, you can use this file to configure it. If you use this file, rename it to <filename>cron.d</filename>."
msgstr ""

#: C/appendix.xml:243(term) 
msgid "dirs"
msgstr ""

#: C/appendix.xml:245(para) 
msgid "This file specifies the directories that are needed but the normal installation procedure (<application>make install</application>application) somehow doesn't create."
msgstr ""

#: C/appendix.xml:253(term) 
msgid "docs"
msgstr ""

#: C/appendix.xml:255(para) 
msgid "This file specifies the filenames of documentation files that <application>dh_installdocs</application> will install into the temporary directory."
msgstr ""

#: C/appendix.xml:263(term) 
msgid "emacsen-*.ex"
msgstr ""

#: C/appendix.xml:265(para) 
msgid "This file specifies Emacs files that will be bytecompiled at install time. They are installed into the temporary directory by <application>dh_installemacsen</application>."
msgstr ""

#: C/appendix.xml:273(term) 
msgid "init.d.ex"
msgstr ""

#: C/appendix.xml:275(para) 
msgid "If your package is a daemon that needs to be run at system startup rename this file to <filename>init.d</filename> and adjust it to your needs."
msgstr ""

#: C/appendix.xml:283(term) 
msgid "manpage.1.ex and manpage.sgml.ex"
msgstr ""

#: C/appendix.xml:285(para) 
msgid "These files are templates for <application>man</application> pages if the package does not already have one."
msgstr ""

#: C/appendix.xml:292(term) 
msgid "menu.ex"
msgstr ""

#: C/appendix.xml:294(para) 
msgid "This file is used to add your package to the Debian menu. &ubuntu; does not use Debian menu files but uses the <ulink url=\"http://www.freedesktop.org\">freedesktop.org</ulink> standard <ulink url=\"http://standards.freedesktop.org/desktop-entry-spec/latest/\">.desktop</ulink> files."
msgstr ""

#: C/appendix.xml:305(term) 
msgid "watch.ex"
msgstr ""

#: C/appendix.xml:307(para) 
msgid "The package maintainer can use the <application>uscan</application> program and a <filename>watch</filename> file to check for a new upstream source tarball."
msgstr ""

#: C/appendix.xml:315(term) 
msgid "ex.package.doc-base"
msgstr ""

#: C/appendix.xml:317(para) 
msgid "This file is used to register your package's documentation (other than <application>man</application> and <application>info</application> pages) with <application>doc-base</application>."
msgstr ""

#: C/appendix.xml:326(term) 
msgid "postinst.ex, preinst.ex, postrm.ex, and prerm.ex"
msgstr ""

#: C/appendix.xml:328(para) 
msgid "These maintainer scripts are run by <application>dpkg</application> when the package is installed, upgraded, or removed."
msgstr ""

#: C/appendix.xml:336(para) 
msgid "For more details refer to the <ulink url=\"http://www.debian.org/doc/maint-guide/ch-dother.en.html\">Debian New Maintainer's Guide</ulink>."
msgstr ""

#: C/appendix.xml:344(title) 
msgid "List of <application>debhelper</application> scripts"
msgstr ""

#: C/appendix.xml:349(para) 
msgid "dh_builddeb"
msgstr ""

#: C/appendix.xml:353(para) 
msgid "dh_clean"
msgstr ""

#: C/appendix.xml:357(para) 
msgid "dh_compress"
msgstr ""

#: C/appendix.xml:361(para) 
msgid "dh_desktop"
msgstr ""

#: C/appendix.xml:365(para) 
msgid "dh_fixperms"
msgstr ""

#: C/appendix.xml:369(para) 
msgid "dh_gconf"
msgstr ""

#: C/appendix.xml:373(para) 
msgid "dh_gencontrol"
msgstr ""

#: C/appendix.xml:377(para) 
msgid "dh_iconcache"
msgstr ""

#: C/appendix.xml:381(para) 
msgid "dh_install"
msgstr ""

#: C/appendix.xml:385(para) 
msgid "dh_installcatalogs"
msgstr ""

#: C/appendix.xml:389(para) 
msgid "dh_installchangelogs"
msgstr ""

#: C/appendix.xml:393(para) 
msgid "dh_installcron"
msgstr ""

#: C/appendix.xml:397(para) 
msgid "dh_installdeb"
msgstr ""

#: C/appendix.xml:401(para) 
msgid "dh_installdebconf"
msgstr ""

#: C/appendix.xml:405(para) 
msgid "dh_installdefoma"
msgstr ""

#: C/appendix.xml:409(para) 
msgid "dh_installdirs"
msgstr ""

#: C/appendix.xml:413(para) 
msgid "dh_installdocs"
msgstr ""

#: C/appendix.xml:417(para) 
msgid "dh_installemacsen"
msgstr ""

#: C/appendix.xml:421(para) 
msgid "dh_installexamples"
msgstr ""

#: C/appendix.xml:425(para) 
msgid "dh_installinfo"
msgstr ""

#: C/appendix.xml:429(para) 
msgid "dh_installinit"
msgstr ""

#: C/appendix.xml:433(para) 
msgid "dh_installlogcheck"
msgstr ""

#: C/appendix.xml:437(para) 
msgid "dh_installlogrotate"
msgstr ""

#: C/appendix.xml:441(para) 
msgid "dh_installman"
msgstr ""

#: C/appendix.xml:445(para) 
msgid "dh_installmenu"
msgstr ""

#: C/appendix.xml:449(para) 
msgid "dh_installmime"
msgstr ""

#: C/appendix.xml:453(para) 
msgid "dh_installmodules"
msgstr ""

#: C/appendix.xml:457(para) 
msgid "dh_installpam"
msgstr ""

#: C/appendix.xml:461(para) 
msgid "dh_installppp"
msgstr ""

#: C/appendix.xml:465(para) 
msgid "dh_installtexfonts"
msgstr ""

#: C/appendix.xml:469(para) 
msgid "dh_installwm"
msgstr ""

#: C/appendix.xml:473(para) 
msgid "dh_installxfonts"
msgstr ""

#: C/appendix.xml:477(para) 
msgid "dh_installxmlcatalogs"
msgstr ""

#: C/appendix.xml:481(para) 
msgid "dh_link"
msgstr ""

#: C/appendix.xml:485(para) 
msgid "dh_listpackages"
msgstr ""

#: C/appendix.xml:489(para) 
msgid "dh_makeshlibs"
msgstr ""

#: C/appendix.xml:493(para) 
msgid "dh_md5sums"
msgstr ""

#: C/appendix.xml:497(para) 
msgid "dh_perl"
msgstr ""

#: C/appendix.xml:501(para) 
msgid "dh_python"
msgstr ""

#: C/appendix.xml:505(para) 
msgid "dh_scrollkeeper"
msgstr ""

#: C/appendix.xml:509(para) 
msgid "dh_shlibdeps"
msgstr ""

#: C/appendix.xml:513(para) 
msgid "dh_strip"
msgstr ""

#: C/appendix.xml:517(para) 
msgid "dh_testdir"
msgstr ""

#: C/appendix.xml:521(para) 
msgid "dh_testroot"
msgstr ""

#: C/appendix.xml:525(para) 
msgid "dh_usrlocal"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: C/appendix.xml:0(None) 
msgid "translator-credits"
msgstr ""

