msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2006-04-07 11:00+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: C/packagingguide-C.omf:6(creator) 
msgid "ubuntu-doc@lists.ubuntu.com (Ubuntu Documentation Project)"
msgstr ""

#: C/packagingguide-C.omf:9(maintainer) 
msgid "mantha@ubuntu.com (Jordan Mantha)"
msgstr ""

#: C/packagingguide-C.omf:12(contributor) 
msgid "avassalotti@gmail.com (Alexandre Vassalotti)"
msgstr ""

#: C/packagingguide-C.omf:15(title) 
msgid "Ubuntu Packaging Guide"
msgstr ""

#: C/packagingguide-C.omf:18(date) 
msgid "2005-11-28"
msgstr ""

#: C/packagingguide-C.omf:23(description) 
msgid "An introduction to packaging programs for Ubuntu and other Debian based distributions."
msgstr ""

#: C/packagingguide-C.omf:26(type) 
msgid "HOWTO"
msgstr ""

#: C/ubuntu.xml:15(title) 
msgid "Ubuntu Packaging"
msgstr ""

#: C/ubuntu.xml:18(title) 
msgid "Uploading and Review"
msgstr ""

#: C/ubuntu.xml:20(para) 
msgid "Once you have created a source package (either a completely new package or just an update/bugfix) you then you will probably want to distribute your package so that other people can enjoy your hard work. The most effective way to do that for <phrase>Ubuntu</phrase> is to contribute your package to the Universe repository. The community developers that are responsible for the Universe repository are known as Masters of the Universe (<ulink url=\"https://wiki.ubuntu.com/MOTU\">MOTU</ulink>). <ulink url=\"http://revu.tauware.de\">REVU</ulink> is a web-based tool that gives people a place to upload their source packages for other people to look at and MOTUs to review in a structured manner."
msgstr ""

#: C/ubuntu.xml:32(title) 
msgid "Contributing as an Uploader"
msgstr ""

#: C/ubuntu.xml:34(para) 
msgid "First, you will need to have your <ulink url=\"https://wiki.ubuntu.com/GPGKey\">GPG Key</ulink> added to the REVU keyring. This ensures that your packages really come from you and helps track uploads."
msgstr ""

#: C/ubuntu.xml:39(para) 
msgid "To add your key, send a <emphasis>signed</emphasis> email with your GnuPG key ID, asking to be added to the REVU keyring, to <email>keyring@tiber.tauware.de</email>. One of the REVU admins will then add you to the uploaders keyring and reply to your email. You don't need a password to upload packages, only to log in to the website and reply to comments."
msgstr ""

#: C/ubuntu.xml:46(para) 
msgid "It is not necessary to get your key signed to upload to REVU, but it is a good idea to have it signed at some point."
msgstr ""

#: C/ubuntu.xml:51(title) 
msgid "Uploading your packages"
msgstr ""

#: C/ubuntu.xml:53(para) 
msgid "Uploading to REVU uses <application>dput</application>. The <phrase>Ubuntu</phrase> version of <application>dput</application> already knows about REVU so you do not need to change any configuration files. Only upload signed packages, and unlike other repositories, you should always include the original tarball, otherwise reviewers will not be able to look at your extracted source package. In order to do so, use the options \"-S -sa\" with <application>debuild</application> or <application>dpkg-buildpackage</application> to build only the source package and also include the original source in the package."
msgstr ""

#: C/ubuntu.xml:63(para) 
msgid "After the source package is built, you can use <application>dput</application> with the above config file changes to upload it by specifying just the <filename>_source.changes</filename> file that was created:"
msgstr ""

#: C/ubuntu.xml:68(screen) 
#, no-wrap
msgid "dput revu *_source.changes"
msgstr ""

#: C/ubuntu.xml:70(para) 
msgid "If you are reuploading a changed package (after receiving reviews), you may get an error like this:"
msgstr ""

#: C/ubuntu.xml:73(screen) 
#, no-wrap
msgid "\nUpload package to host revu\nAlready uploaded to tauware.de\nDoing nothing for myapp_source.changes"
msgstr ""

#: C/ubuntu.xml:78(para) 
msgid "To fix, add the -f option to dput to force the upload or remove the <filename>.upload</filename> file that was created by <application>dput</application>."
msgstr ""

#: C/ubuntu.xml:82(para) 
msgid "Processing of uploads is done every 5 minutes. So, if your upload does not show up, please contact the REVU administrators by email or join the IRC channel #ubuntu-motu."
msgstr ""

#: C/ubuntu.xml:88(title) 
msgid "How to login to REVU"
msgstr ""

#: C/ubuntu.xml:90(para) 
msgid "After your first upload, you will be automatically registered to the database and assigned a random password. On the <ulink url=\"http://revu.tauware.de\">REVU</ulink> website, use the email address you used in the changelog file of your upload as the login and press the 'recover password' link. You will be taken to a page that has your encrypted password with instructions on how to decrypt it."
msgstr ""

#: C/ubuntu.xml:101(title) 
msgid "View and comment uploads"
msgstr ""

#: C/ubuntu.xml:103(para) 
msgid "Packages uploaded to REVU are made public. You can browse them without logging in to the system. However, commenting uploads is only available to registered users. As an uploader, you can only comment your own uploads. This can be useful to give reviewers some info on the changes you have made between two uploads of your packages."
msgstr ""

#: C/ubuntu.xml:112(title) 
msgid "Additional rules"
msgstr ""

#: C/ubuntu.xml:116(para) 
msgid "You must have reviewed the package for known security vulnerabilities and provide patches for all of them."
msgstr ""

#: C/ubuntu.xml:119(para) 
msgid "The package can be refused on the grounds of known security problems and design."
msgstr ""

#: C/ubuntu.xml:122(para) 
msgid "You must have included a copyright and license file, and those must allow inclusion of the package in the universe component and on mirrors."
msgstr ""

#: C/ubuntu.xml:126(para) 
msgid "The package must be known to build on top of the main component of the current <phrase>Ubuntu</phrase> stable release, it may require other packages already in Universe."
msgstr ""

#: C/ubuntu.xml:133(title) 
msgid "Getting Help"
msgstr ""

#: C/ubuntu.xml:134(para) 
msgid "If you need help on these steps or if you have more questions about REVU, you can ask on #ubuntu-motu on the Freenode IRC network."
msgstr ""

#: C/ubuntu.xml:143(title) 
msgid "Merges and Syncs"
msgstr ""

#: C/ubuntu.xml:147(para) 
msgid "<emphasis role=\"bold\">Requirements:</emphasis> build-essential, automake, gnupg, lintian, fakeroot, patchutils, debhelper and <xref linkend=\"gs-pbuilder\"/>."
msgstr ""

#: C/ubuntu.xml:152(para) 
msgid "<phrase>Ubuntu</phrase> is based on the Debian Linux distribution and uses the same package management system (APT). At the beginning of each <phrase>Ubuntu</phrase> development cycle the packages in <phrase>Ubuntu</phrase> are updated to those in Debian unstable. However, because <phrase>Ubuntu</phrase> is not the same as Debian, some of the packages need to be modified to work in <phrase>Ubuntu</phrase>. There might also be bug fixes that <phrase>Ubuntu</phrase> developers have introduced into the packages. You can determine whether this has taken place by noting the package version. If the package version include ubuntu in it (an example would be gimp-2.2.9-3ubuntu2) then the <phrase>Ubuntu</phrase> developers have made some change and it is no longer the same as the Debian package. There are more than 1000 such packages in the Universe repository."
msgstr ""

#: C/ubuntu.xml:163(para) 
msgid "At the start of the development cycle a decision has to be made with regard to these Ubuntu versioned packages. Of course if the Debian version hasn't changed since the last <phrase>Ubuntu</phrase> release then nothing needs to be changed. However, if there is a newer version of the package in Debian, then one of two things should happen. If all of the reasons that the Ubuntu version existed (bug fixes, dependencies, etc.) are fixed in the new Debian package, then we can just take the Debian package directly. This is called a <emphasis>sync</emphasis>. However, if the new Debian version has the same issues that caused the ubuntu version to be made, then those changes need to be applied to the new Debian version. This is called <emphasis>merging</emphasis>."
msgstr ""

#: C/ubuntu.xml:175(title) 
msgid "Merging Tutorial"
msgstr ""

#: C/ubuntu.xml:176(para) 
msgid "The merging process involves looking at the changes to both the Debian and Ubuntu source packages and determining what has changed, and what changes are Ubuntu-specific. Let's now look at an example. Our example will be the classic CD burning program, <application>xcdroast</application>."
msgstr ""

#: C/ubuntu.xml:181(para) 
msgid "To start, let's make a folder to hold our project and move there:"
msgstr ""

#: C/ubuntu.xml:182(screen) 
#, no-wrap
msgid "\nmkdir ~/xcdroast\ncd ~/xcdroast"
msgstr ""

#: C/ubuntu.xml:185(para) 
msgid "Now let's download all of the source packages involved into this directory:"
msgstr ""

#: C/ubuntu.xml:188(para) 
msgid "The <application>xcdroast</application> source tarball that is used by all versions:"
msgstr ""

#: C/ubuntu.xml:192(ulink) 
msgid "xcdroast_0.98+0alpha15.orig.tar.gz"
msgstr ""

#: C/ubuntu.xml:197(para) 
msgid "The <phrase>Ubuntu</phrase> Breezy source package files:"
msgstr ""

#: C/ubuntu.xml:200(ulink) 
msgid "xcdroast_0.98+0alpha15-1.1ubuntu1.dsc"
msgstr ""

#: C/ubuntu.xml:204(ulink) 
msgid "xcdroast_0.98+0alpha15-1.1ubuntu1.diff.gz"
msgstr ""

#: C/ubuntu.xml:210(para) 
msgid "The Debian source package files that the Breezy packages are derived from:"
msgstr ""

#: C/ubuntu.xml:213(ulink) 
msgid "xcdroast_0.98+0alpha15-1.1.diff.gz"
msgstr ""

#: C/ubuntu.xml:217(ulink) 
msgid "xcdroast_0.98+0alpha15-1.1.dsc"
msgstr ""

#: C/ubuntu.xml:223(para) 
msgid "The new Debian source package files that the Dapper packages will be derived from:"
msgstr ""

#: C/ubuntu.xml:227(ulink) 
msgid "xcdroast_0.98+0alpha15-3.dsc"
msgstr ""

#: C/ubuntu.xml:231(ulink) 
msgid "xcdroast_0.98+0alpha15-3.diff.gz"
msgstr ""

#: C/ubuntu.xml:237(para) 
msgid "This can also be done by searching for the Debian packages at <ulink url=\"packages.debian.org\">packages.debian.org</ulink> and the Ubuntu packages at <ulink url=\"packages.ubuntu.com\">packages.ubuntu.com</ulink>."
msgstr ""

#: C/ubuntu.xml:241(para) 
msgid "A very useful tool to have when doing merges (or any Ubuntu packaging) is <application>devscripts</application>. If you do not have that already installed, install it before procceding."
msgstr ""

#: C/ubuntu.xml:245(para) 
msgid "By looking at the <phrase>Ubuntu</phrase> changelog you should be able to know what differences to expect between the Ubuntu package and the Debian version that it was derived from. For xcdroast, the <phrase>Ubuntu</phrase> changelog can be found at <ulink url=\"http://changelogs.ubuntu.com/changelogs/pool/universe/x/xcdroast/xcdroast_0.98+0alpha15-1.1ubuntu1/changelog\"> changelogs.ubuntu.com</ulink>. It says that a .desktop file was fixed and properly installed to fix a bug reported in <ulink url=\"https://launchpad.net/malone/bugs/2698\">Malone</ulink>."
msgstr ""

#: C/ubuntu.xml:254(para) 
msgid "Now let's see what the actual changes in the source packages are:"
msgstr ""

#: C/ubuntu.xml:255(screen) 
#, no-wrap
msgid "\ndebdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-1.1ubuntu1.dsc &gt; ubuntu.debdiff\nless ubuntu.debdiff"
msgstr ""

#: C/ubuntu.xml:259(para) 
msgid "The lines that start with - have been removed from the Debian version and those that start with + have been added to the <phrase>Ubuntu</phrase> version."
msgstr ""

#: C/ubuntu.xml:261(para) 
msgid "This is what we see:"
msgstr ""

#: C/ubuntu.xml:264(para) 
msgid "in debian/rules install is being used instead of cp to install the xcdroast icon. Also, there is a new line installing the .desktop file."
msgstr ""

#: C/ubuntu.xml:268(para) 
msgid "in debian/changelog the changes made are added to the changelog entry."
msgstr ""

#: C/ubuntu.xml:271(para) 
msgid "in debian/dirs usr/share/applications has been added for install lines above to work properly."
msgstr ""

#: C/ubuntu.xml:275(para) 
msgid "xcdroast.desktop is added"
msgstr ""

#: C/ubuntu.xml:279(para) 
msgid "Now we know why the Debian source was changed. Now we need to see what has changed in the Debian versions."
msgstr ""

#: C/ubuntu.xml:281(screen) 
#, no-wrap
msgid "\ndebdiff xcdroast_0.98+0alpha15-1.1.dsc xcdroast_0.98+0alpha15-3.dsc &gt; debian.debdiff\nless debian.debdiff"
msgstr ""

#: C/ubuntu.xml:284(para) 
msgid "There is a lot more in this debdiff than in the last one. One way we can get a better idea of what has changed is to see what files were changed in the debdiff:"
msgstr ""

#: C/ubuntu.xml:287(screen) 
#, no-wrap
msgid "grep diff debian.debdiff"
msgstr ""

#: C/ubuntu.xml:289(para) 
msgid "This indicates that debian/postinst, debian/rules, debian/changelog, debian/doc-base.manual, debian/control, and debian/menu were changed in the new Debian version."
msgstr ""

#: C/ubuntu.xml:291(para) 
msgid "Thus we can see that we need to check debian/rules to see if the <phrase>Ubuntu</phrase> changes were made. We can also see that debian/dirs was not changed from the old Debian version. Let us now look at the files. We can unpack the source package by using <application>dpkg-source</application>:"
msgstr ""

#: C/ubuntu.xml:296(screen) 
#, no-wrap
msgid "dpkg-source -x xcdroast_0.98+0alpha15-3.dsc"
msgstr ""

#: C/ubuntu.xml:298(para) 
msgid "This will unzip the xcdroast_0.98+0alpha15.orig.tar.gz file to create a xcdroast-0.98+0alpha15 directory and apply the changes found in xcdroast_0.98+0alpha15-3.diff.gz."
msgstr ""

#: C/ubuntu.xml:300(para) 
msgid "Let's now go to the debian directory:"
msgstr ""

#: C/ubuntu.xml:302(screen) 
#, no-wrap
msgid "cd xcdroast-0.98+0alpha15/debian/"
msgstr ""

#: C/ubuntu.xml:304(para) 
msgid "One can see in <filename>rules</filename> that changes made by <phrase>Ubuntu</phrase> were not applied to the new Debian version. This means that:"
msgstr ""

#: C/ubuntu.xml:307(screen) 
#, no-wrap
msgid "cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps"
msgstr ""

#: C/ubuntu.xml:309(para) 
msgid "...should be changed to:"
msgstr ""

#: C/ubuntu.xml:311(screen) 
#, no-wrap
msgid "\n#cp debian/xcdroast.xpm `pwd`/debian/$(PACKAGE)/usr/share/pixmaps\n\n#install desktop and icon\ninstall -D -m 644 $(CURDIR)/debian/xcdroast.desktop \\\n\t$(CURDIR)/debian/xcdroast/usr/share/applications/xcdroast.desktop\ninstall -D -m 644 $(CURDIR)/debian/xcdroast.xpm \\\n\t$(CURDIR)/debian/xcdroast/usr/share/pixmaps/xcdroast.xpm"
msgstr ""

#: C/ubuntu.xml:320(para) 
msgid "Now in <filename>dirs</filename>, the following line needs to be added for the .desktop file to be installed:"
msgstr ""

#: C/ubuntu.xml:321(screen) 
#, no-wrap
msgid "usr/share/applications"
msgstr ""

#: C/ubuntu.xml:323(para) 
msgid "Now we need the actual .desktop file (saved as <emphasis>debian/xcdroast.desktop</emphasis>). From the ubuntu.debdiff (or the Ubuntu source package), we see that it is:"
msgstr ""

#: C/ubuntu.xml:325(screen) 
#, no-wrap
msgid "\n[Desktop Entry]\nEncoding=UTF-8\nName=X-CD-Roast\nComment=Create a CD\nExec=xcdroast\nIcon=xcdroast.xpm\nType=Application\nCategories=Application;AudioVideo;"
msgstr ""

#: C/ubuntu.xml:335(para) 
msgid "The last change that needs to be made is in <filename>changelog</filename>. Not only do we need to add what we have just done (resync to Debian), but we should also add in the previous <phrase>Ubuntu</phrase> changelog entries. To do this, run <application>dch -i -D dapper</application> and put something to the effect of:"
msgstr ""

#: C/ubuntu.xml:340(emphasis) 
msgid "ubuntu1"
msgstr ""

#: C/ubuntu.xml:339(screen) 
#, no-wrap
msgid "\nxcdroast (0.98+0alpha15-3<placeholder-1/>) dapper; urgency=low\n\n  * Resynchronise with Debian."
msgstr ""

#: C/ubuntu.xml:344(para) 
msgid "Make sure to change the version number to the correct <phrase>Ubuntu</phrase> version. Also add:"
msgstr ""

#: C/ubuntu.xml:346(screen) 
#, no-wrap
msgid "\nxcdroast (0.98+0alpha15-1.1ubuntu1) breezy; urgency=low\n\n  * Fix and install existing .desktop file. (Closes Malone #2698)\n\t\t\t\t\n  -- Captain Packager &lt;packager@coolness.com&gt;  Sat,  1 Oct 2005 19:39:04 -0400"
msgstr ""

#: C/ubuntu.xml:352(para) 
msgid "between the 0.98+0alpha15-1.1 and 0.98+0alpha15-2 log entries."
msgstr ""

#: C/ubuntu.xml:354(para) 
msgid "Now you can build and test the new source packages. There are different ways to do this, but one example is:"
msgstr ""

#: C/ubuntu.xml:355(screen) 
#, no-wrap
msgid "\ncd ..\ndebuild -S\ncd ..\nsudo pbuilder build xcdroast_0.98+0alpha15-3ubuntu1.dsc"
msgstr ""

#: C/ubuntu.xml:361(para) 
msgid "This will build the source package and sign it and then build the .deb in a pbuilder environment to make sure it builds correctly. Make sure to always test your packages before submitting patches, etc. Now the last step is to make a debdiff that can be submitted to a bug report or the MOTUs on the #ubuntu-motu irc channel. To do this, we get the difference between the Debian sid source package and the new <phrase>Ubuntu</phrase> version:"
msgstr ""

#: C/ubuntu.xml:367(screen) 
#, no-wrap
msgid "debdiff xcdroast_0.98+0alpha15-3.dsc xcdroast_0.98+0alpha15-3ubuntu1.dsc &gt; \\\n\txcdroast_0.98+0alpha15-3ubuntu1.debdiff"
msgstr ""

#: C/ubuntu.xml:373(title) 
msgid "Packaging for Kubuntu"
msgstr ""

#: C/ubuntu.xml:375(para) 
msgid "As one might imagine, the main packaging issues specific to Kubuntu are with KDE and Qt."
msgstr ""

#: C/ubuntu.xml:379(title) 
msgid "Build Dependencies"
msgstr ""

#: C/ubuntu.xml:381(para) 
msgid "Kubuntu programs are mostly KDE ones. Therefore, they need to Build-Depend on <filename>kdelibs4-dev</filename>. Since KDE's focus is to have programs interacting, some programs might also need to Build-Depend on other parts of KDE, such as <filename>kdepim-dev</filename> for example. Be sure to get the list of necessary dependencies for your program."
msgstr ""

#: C/ubuntu.xml:391(title) 
msgid "Desktop Files"
msgstr ""

#: C/ubuntu.xml:393(para) 
msgid "KDE has some specific paths. Most settings for KDE go to either <filename>/etc/kde3/</filename> or <filename>/usr/share/apps/</filename>. It is important to note that the general desktop files for KDE should go to <filename>/usr/share/applications/kde/</filename>. The install path for the desktop files should be fixed if they don't use this (except for specific desktop files, such as service menus)."
msgstr ""

#: C/ubuntu.xml:400(para) 
msgid "KDE desktop files also need specific entries to fit in the KMenu. A minimal desktop file for a KDE program could be something like this:"
msgstr ""

#: C/ubuntu.xml:404(screen) 
#, no-wrap
msgid "[Desktop Entry]\nEncoding=UTF-8\nName=Kfoo\nName[xx]=Kfoo\nGenericName=Bar description\nExec=kfoo\nIcon=kfoo\nTerminal=false\nCategories=Qt;KDE;Utility;"
msgstr ""

#: C/ubuntu.xml:414(para) 
msgid "Note that the Categories field must begin with Qt;KDE;. There are specific desktop file entries for KDE programs and modules that allow su to declare the given programs as KCModules or autostart them when logging in."
msgstr ""

#: C/ubuntu.xml:422(title) 
msgid "Generating .pot Files"
msgstr ""

#: C/ubuntu.xml:424(para) 
msgid "The Ubuntu translation website, <ulink url=\"https://launchpad.net/rosetta/\">Rosetta</ulink>, now supports KDE, which means KDE packages need to support Rosetta by generating .pot template files for translators. If you use <application>cdbs</application> in Dapper, your package should now automatically build and check for a .pot file in po/ directory."
msgstr ""

#: C/ubuntu.xml:431(para) 
msgid "You will need the <ulink url=\"../files/kubuntu_01_kdepot.diff\">kdepot patch</ulink> (or similar; it may not apply exactly depending on the age of the admin directory)."
msgstr ""

#: C/ubuntu.xml:435(para) 
msgid "If your package uses <application>debhelper</application> or <application>cdbs</application> and includes its own kde.mk file, you need to add the rules yourself."
msgstr ""

#: C/ubuntu.xml:439(para) 
msgid "For <application>cdbs</application> add these lines to your debian/rules:"
msgstr ""

#: C/ubuntu.xml:441(screen) 
#, no-wrap
msgid "\ncommon-post-build-arch::\n\tmkdir -p po\n        XGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages\n\nclean::\n        rm -rf po"
msgstr ""

#: C/ubuntu.xml:448(para) 
msgid "And for <application>debhelper</application>, add the following to the end of the <emphasis>install</emphasis> rule:"
msgstr ""

#: C/ubuntu.xml:450(screen) 
#, no-wrap
msgid "\nmkdir -p po\nXGETTEXT=/usr/bin/kde-xgettext sh admin/cvs.sh extract-messages"
msgstr ""

#: C/ubuntu.xml:453(para) 
msgid "Then add this to the <emphasis>clean</emphasis> rule:"
msgstr ""

#: C/ubuntu.xml:454(screen) 
#, no-wrap
msgid "\nrm -f po/*.pot"
msgstr ""

#: C/packagingguide.xml:16(title) C/bookinfo.xml:16(title) 
msgid "The Ubuntu Packaging Guide"
msgstr ""

#: C/introduction.xml:15(title) 
msgid "Introduction"
msgstr ""

#: C/introduction.xml:17(para) 
msgid "Welcome to the <phrase>Ubuntu</phrase> Packaging Guide! This guide is primarily addressed to those who would like to make and maintain <phrase>Ubuntu</phrase> packages. Although many of the concepts in this guide could be used to make binary packages for personal use, it is designed for those people wanting to distribute their packages to and for others. While it is also written with the <phrase>Ubuntu</phrase> Linux distribution in mind, it should also be useful for any Debian-based distribution."
msgstr ""

#: C/introduction.xml:24(para) 
msgid "There are several reasons you might want to learn how to package for Ubuntu. First, building and fixing <phrase>Ubuntu</phrase> packages is a great way to contribute to the <phrase>Ubuntu</phrase> community. It is also a good way to learn how <phrase>Ubuntu</phrase> and the applications you have installed work; or maybe you want to install a package that is not in the <phrase>Ubuntu</phrase> repositories. Hopefully after you have completed this guide you will have the tools and knowledge you need to do all of these."
msgstr ""

#: C/introduction.xml:32(title) 
msgid "Prerequisites"
msgstr ""

#: C/introduction.xml:34(para) 
msgid "This guide assumes that the reader has a reasonable knowledge of building and installing software from source on Linux distributions. The guide also uses the Command Line Interface (CLI) throughout, so you should be comfortable using a terminal. Below is a quick overview or review of some of the requisite knowledge."
msgstr ""

#: C/introduction.xml:41(title) 
msgid "make"
msgstr ""

#: C/introduction.xml:42(emphasis) C/introduction.xml:61(emphasis) 
msgid "Description:"
msgstr ""

#: C/introduction.xml:44(para) 
msgid "This a very important software building tool. GNU Make is used to transform a complex compilation task into a trivial one. It is important that you know how to use it, because we will store most of the information about the packaging process in a Makefile."
msgstr ""

#: C/introduction.xml:50(emphasis) C/introduction.xml:100(emphasis) 
msgid "References:"
msgstr ""

#: C/introduction.xml:52(para) 
msgid "GNU Make has a well-written <application>man</application> page and extensive <application>info</application> documentation. Documentation is also available at the <ulink url=\"www.gnu.org/software/make/manual/make.html\">GNU </ulink> website."
msgstr ""

#: C/introduction.xml:60(title) 
msgid "./configure"
msgstr ""

#: C/introduction.xml:63(para) 
msgid "This script is included in almost all Linux source, especially for software written in compiled languages such as C and C++. It is used to generate a Makefile (file used by <application>make</application>) that is properly configured for your system. Standard Debian packaging tools use it and so it is important that you know what the <filename>configure</filename> script does. You do not need to know how to create a <filename>configure</filename> script yourself, as the software author (or <application>autoconf</application> will do that. However, you may have to adjust it at some point to get a <phrase>Ubuntu</phrase> package to build correctly."
msgstr ""

#: C/introduction.xml:74(emphasis) 
msgid "Quick Howto:"
msgstr ""

#: C/introduction.xml:76(para) 
msgid "First, get the <application>GNU Hello</application> source. From a terminal:"
msgstr ""

#: C/introduction.xml:79(screen) 
#, no-wrap
msgid "\nwget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz   # get the package\ntar -xzf hello-2.1.1.tar.gz                            # unpack it\ncd hello-2.1.1/\n\t\t\t"
msgstr ""

#: C/introduction.xml:85(para) 
msgid "Now, with <command>./configure</command> you can run the <filename>configure</filename> script to generate a Makefile that is customized to your system."
msgstr ""

#: C/introduction.xml:89(para) 
msgid "You can also give <filename>./configure</filename> command line options. For instance, by default <application>GNU Hello</application> will install to the <filename>/usr/local/</filename> directory. You could instead install it somewhere else (a personal binary directory, <filename>~/programs/</filename>, for example)"
msgstr ""

#: C/introduction.xml:95(screen) 
#, no-wrap
msgid "./configure --prefix=\"$HOME/programs/\"   # specify install dir."
msgstr ""

#: C/introduction.xml:97(para) 
msgid "You can see all the <filename>./configure</filename> options by running <application>./configure --help</application>."
msgstr ""

#: C/introduction.xml:102(para) 
msgid "Information on <filename>./configure</filename> can be found in the <application>make</application> documentation."
msgstr ""

#: C/introduction.xml:108(title) 
msgid "Apt/Dpkg"
msgstr ""

#: C/introduction.xml:109(para) 
msgid "Beyond the basic use of installing programs, <application>apt</application> and <application>dpkg</application> have many features that are useful for packaging."
msgstr ""

#: C/introduction.xml:114(para) 
msgid "<emphasis role=\"bold\">apt-cache dump</emphasis> - dumps a listing of every package in the cache. This is especially helpful in combination with a <application>grep</application> pipe such as <application>apt-cache dump | grep foo</application> to search for packages whose names or dependencies include <quote>foo</quote>."
msgstr ""

#: C/introduction.xml:120(para) 
msgid "<emphasis role=\"bold\">apt-cache policy</emphasis> - gives an easy way to check which repository (main/restricted/universe/multiverse) a package is coming from."
msgstr ""

#: C/introduction.xml:125(para) 
msgid "<emphasis role=\"bold\">apt-cache show </emphasis> - gives information about a binary package."
msgstr ""

#: C/introduction.xml:128(para) 
msgid "<emphasis role=\"bold\">apt-cache showsrc </emphasis> - gives information about a source package."
msgstr ""

#: C/introduction.xml:131(para) 
msgid "<emphasis role=\"bold\">apt-cache rdepends </emphasis> - shows reverse dependencies for a package; that is, what packages depend on the given packages."
msgstr ""

#: C/introduction.xml:135(para) 
msgid "<emphasis role=\"bold\">dpkg -S </emphasis> - gives the binary package that a particular file belongs to."
msgstr ""

#: C/introduction.xml:138(para) 
msgid "<emphasis role=\"bold\">dpkg -l </emphasis> - lists the installed packages. This is similar to <application>apt-cache dump</application>, but for installed packages."
msgstr ""

#: C/introduction.xml:143(para) 
msgid "<emphasis role=\"bold\">dpkg -c </emphasis> - lists the contents of a binary packages. It is very useful to make sure that files are installed to the right place."
msgstr ""

#: C/introduction.xml:147(para) 
msgid "<emphasis role=\"bold\">dpkg -f </emphasis> - shows the control file for a binary package. This helps to make sure that the dependencies are right."
msgstr ""

#: C/introduction.xml:151(para) 
msgid "<emphasis role=\"bold\">grep-dctrl</emphasis> - a special <application>grep</application> package (not installed by default) that can be used to search for various kinds of information in packages."
msgstr ""

#: C/introduction.xml:161(title) 
msgid "diff and patch"
msgstr ""

#: C/introduction.xml:163(para) 
msgid "The <application>diff</application> program can be used to compare two different files. It is primarily used to compare two files and to make patches. A typical example might be <application>diff -ruN file.old file.new &gt; file.diff</application>. This will create a diff (recursively if directories are used) that shows the changes, or <quote>delta</quote>, between the two files."
msgstr ""

#: C/introduction.xml:170(para) 
msgid "The <application>patch</application> program is used to apply a patch (usually created by <application>diff</application> or another similar program) to a file or directory. To apply the patch created above, we can do <application>patch -p0 &lt; file.diff</application>. The <emphasis>-p</emphasis> tells <application>patch</application> how much it should strip from the paths for the file names in the patch. -p0 means to strip nothing, or leave the path intact."
msgstr ""

#: C/getting_started.xml:15(title) 
msgid "Getting Started"
msgstr ""

#: C/getting_started.xml:18(title) 
msgid "Packaging Tools"
msgstr ""

#: C/getting_started.xml:20(para) 
msgid "There are many tools written specifically for packaging on Debian-based systems. Many of them are not <emphasis>essential</emphasis> to creating packages but are very helpful and often automate repetitive tasks. Their <application>man</application> and <application>info</application> pages are good sources of information. However, the following is a list of packages that are deemed necessary to begin packaging:"
msgstr ""

#: C/getting_started.xml:29(application) 
msgid "build-essential"
msgstr ""

#: C/getting_started.xml:30(para) 
msgid "a metapackage that depends on <application>libc6-dev</application>, <application>gcc</application>, <application>g++</application>, <application>make</application>, and <application>dpkg-dev</application>. One that you might not be familiar with is <application>dpkg-dev</application>. It contains tools such as <application>dpkg-buildpackage</application> and <application>dpkg-source</application> that are used to create, unpack, and build source and binary packages."
msgstr ""

#: C/getting_started.xml:43(application) 
msgid "devscripts"
msgstr ""

#: C/getting_started.xml:44(para) 
msgid "contains many scripts that will make the packager's life much easier. Some of the more commonly used are <application>debdiff</application>, <application>dch</application>, <application>debuild</application>, and <application>debsign</application>."
msgstr ""

#: C/getting_started.xml:51(term) 
msgid "<application>debhelper</application> and <application>dh-make</application>"
msgstr ""

#: C/getting_started.xml:53(para) 
msgid "this set of scripts helps packagers by automating common packaging tasks. <application>dh-make</application> can be used to do the initial \"debianization\" and provides many example files."
msgstr ""

#: C/getting_started.xml:59(term) 
msgid "<application>patch</application> and <application>diff</application>"
msgstr ""

#: C/getting_started.xml:60(para) 
msgid "used to create and apply patches. They are quite extensively used in packaging because it is easier, cleaner, and more efficient to represent small changes as patches rather than have multiple copies of a file."
msgstr ""

#: C/getting_started.xml:66(application) 
msgid "gnupg"
msgstr ""

#: C/getting_started.xml:67(para) 
msgid "a complete and free replacement for PGP, used to digitally sign files, including packages."
msgstr ""

#: C/getting_started.xml:71(application) 
msgid "fakeroot"
msgstr ""

#: C/getting_started.xml:72(para) 
msgid "simulates running a command with root privileges. This is useful for creating binary packages as a regular user."
msgstr ""

#: C/getting_started.xml:76(term) 
msgid "<application>lintian</application> and <application>linda</application>"
msgstr ""

#: C/getting_started.xml:78(para) 
msgid "dissect Debian packages and report bugs and policy violations. They contain automated checks for many aspects of Debian policy as well as some checks for common errors."
msgstr ""

#: C/getting_started.xml:84(application) 
msgid "pbuilder"
msgstr ""

#: C/getting_started.xml:85(para) 
msgid "constructs a chroot system and builds a package inside the chroot. It is an ideal system to use to check that a package has correct build dependencies and to build clean packages to be distributed and tested."
msgstr ""

#: C/getting_started.xml:95(title) 
msgid "Binary and Source Packages"
msgstr ""

#: C/getting_started.xml:97(para) 
msgid "Most users of a Debian-based distribution such as <phrase>Ubuntu</phrase> will never have to deal with the actual source code that is used to create all of the applications on their computers. Instead, the source code is compiled into <emphasis>binary</emphasis> packages from the <emphasis>source</emphasis> package that contains both the source code itself and the rules for making the binary package. So packagers upload the source packages with their changes to the build systems that then compile the binary packages for each architecture and distribute the binary .deb files to the apt mirrors."
msgstr ""

#: C/getting_started.xml:109(title) 
msgid "The Personal Builder: pbuilder"
msgstr ""

#: C/getting_started.xml:111(para) 
msgid "Using pbuilder as a package builder allows you to build the package from within a chroot environment. You can build binary packages without using <application>pbuilder</application>, but you must have all the build dependencies installed on your system first. However, pbuilder allows the packager to check the build dependencies because the package is built within a minimal <phrase>Ubuntu</phrase> installation, and the build dependencies are downloaded according to the <filename>debian/control</filename> file."
msgstr ""

#: C/getting_started.xml:120(title) 
msgid "Installing and configuring a pbuilder environment"
msgstr ""

#: C/getting_started.xml:122(para) 
msgid "The first, and perhaps most obvious, thing to do is install <application>pbuilder</application>. If you want to create a <application>pbuilder</application> for a release newer than the one you currently have installed you will need to manually install the <application>debootstrap</application> .deb (from <ulink url=\"http://packages.ubuntu.com\">packages.ubuntu.com</ulink> from the newer release. Then you need to set up the <filename>/etc/pbuilderrc</filename> configuration file."
msgstr ""

#: C/getting_started.xml:132(screen) 
#, no-wrap
msgid "\n# URL of package archive.\t\t\t\t\nMIRRORSITE=http://archive.ubuntu.com/ubuntu # URL of package archive.\n\t\t\t\n# Release you want to use.\nDISTRIBUTION=dapper \n\n# Directory where pbuilder will look for apt configuration files.\nAPTCONFDIR=\"/etc/pbuilder/apt.config/\"\n\n# Other repositories you want pbuilder to use. In this case the Universe repos.\nOTHERMIRROR=\"deb http://archive.ubuntu.com/ubuntu dapper universe multiverse\"\n\t\t"
msgstr ""

#: C/getting_started.xml:146(para) 
msgid "To avoid having <application>pbuilder</application> complain about unauthenticated packages, you have apt allow unauthenticated packages by:"
msgstr ""

#: C/getting_started.xml:148(screen) 
#, no-wrap
msgid "sudo mkdir /etc/pbuilder/apt.config/\nsudo cp -a /etc/apt/* /etc/pbuilder/apt.config/\necho \"APT::Get::AllowUnauthenticated 1;\" | \\\n\tsudo tee -a /etc/pbuilder/apt.config/apt.conf.d/allow-unauthenticated\n\t\t"
msgstr ""

#: C/getting_started.xml:154(para) 
msgid "It is important that the distribution in the <filename>/etc/pbuilder/ap.config/sources.list</filename> is that same as the distribution of the pbuilder you are trying to create (<emphasis>i.e.</emphasis> you should have \"dapper\" in the <filename>sources.list</filename> file if you want to create a \"dapper\" pbuilder"
msgstr ""

#: C/getting_started.xml:161(para) 
msgid "You will need to remove the <filename>99update-notifier</filename> file from the <filename>/etc/pbuilder/apt.config/apt.conf.d/</filename> directory as it can potentially break future pbuilder updates, because <application>update-notifies</application> is not usually installed."
msgstr ""

#: C/getting_started.xml:168(para) 
msgid "Once you have adjusted the <application>pbuilder</application> configuration files you can create the pbuilder chroot by:"
msgstr ""

#: C/getting_started.xml:171(screen) 
#, no-wrap
msgid "sudo pbuilder create --distribution dapper"
msgstr ""

#: C/getting_started.xml:173(para) 
msgid "Creating a pbuilder environment will take some time as <application>debootstrap</application> is essentially making a minimal <phrase>Ubuntu</phrase> installation."
msgstr ""

#: C/getting_started.xml:179(title) 
msgid "Using the pbuilder"
msgstr ""

#: C/getting_started.xml:180(para) 
msgid "Now that you have a running pbuilder you can build binary packages from the source package by:"
msgstr ""

#: C/getting_started.xml:183(screen) 
#, no-wrap
msgid "sudo pbuilder build *.dsc"
msgstr ""

#: C/getting_started.xml:185(para) 
msgid "This will build all the source packages in the current directory. The resulting .debs and source packages can be found in <filename>/var/cache/pbuilder/result/</filename> (default) or whatever you set the <emphasis>BUILDRESULT</emphasis> variable to be in the <filename>/etc/pbuilderrc</filename> configuration file."
msgstr ""

#: C/getting_started.xml:194(title) 
msgid "Updating the pbuilder"
msgstr ""

#: C/getting_started.xml:196(para) 
msgid "You should always have a current pbuilder whenever you are testing your source packages, especially when you are building for a development release that is rapidly changing, to ensure that the dependencies are properly found. To update your pbuilder use:"
msgstr ""

#: C/getting_started.xml:201(screen) 
#, no-wrap
msgid "sudo pbuilder update"
msgstr ""

#: C/getting_started.xml:203(para) 
msgid "Or if you change something in the <filename>/etc/pbuilderrc</filename> configuration file (or any pbuilder config file, for example <filename>/etc/pbuilder/apt.config/sources.list</filename>):"
msgstr ""

#: C/getting_started.xml:207(screen) 
#, no-wrap
msgid "sudo pbuilder update --override-config"
msgstr ""

#: C/getting_started.xml:209(para) 
msgid "You can also use this update technique to change releases. Once the development version has been released, you can start building for the next development releases by changing all of the occurrences of the previous release name to the new one in <filename>/etc/pbuilderrc</filename> and <filename>/etc/pbuilder/apt.config/sources.list</filename> and then updating the pbuilder."
msgstr ""

#: C/bugs.xml:15(title) 
msgid "Bugs"
msgstr ""

#: C/bugs.xml:17(para) 
msgid "One thing that you will almost certainly face as a packager is a bug, either in the software itself or in your packaging. Packaging bugs are often fairly easy and straightforward to fix. However, as packagers often act as the initial contact for software bugs for the users of their distribution, they also many times implement temporary fixes and are responsible for forwarding software bugs and fixes to the original (upstream) authors."
msgstr ""

#: C/bugs.xml:25(title) C/bugs.xml:32(emphasis) 
msgid "Bug Tracking Systems"
msgstr ""

#: C/bugs.xml:27(para) 
msgid "In order to track bugs (both software and packaging), many distributions have developed bug tracking systems to manage the bug reports and notify the package maintainers and reporters of changes. The table below shows some of the Debian and <phrase>Ubuntu</phrase> tools for tracking bugs."
msgstr ""

#: C/bugs.xml:33(para) 
msgid "Debian : <ulink url=\"http://bugs.debian.org\">http://bugs.debian.org</ulink>"
msgstr ""

#: C/bugs.xml:34(para) 
msgid "<phrase>Ubuntu</phrase> : <ulink url=\"http://launchpad.net/malone/distros/ubuntu\">http://launchpad.net/malone/distros/ubuntu</ulink>"
msgstr ""

#: C/bugs.xml:36(emphasis) 
msgid "Bugs For Specific Packages"
msgstr ""

#: C/bugs.xml:37(para) 
msgid "Debian : http://bugs.debian.org/<emphasis>&lt;packagename&gt;</emphasis>"
msgstr ""

#: C/bugs.xml:38(para) 
msgid "<phrase>Ubuntu</phrase> : use search at <phrase>Ubuntu</phrase> BTS"
msgstr ""

#: C/bugs.xml:39(emphasis) 
msgid "Bugs For Source Packages"
msgstr ""

#: C/bugs.xml:40(para) 
msgid "Debian : http://bugs.debian.org/src:<emphasis>&lt;packagename&gt;</emphasis>"
msgstr ""

#: C/bugs.xml:41(para) 
msgid "<phrase>Ubuntu</phrase> : https://launchpad.net/distros/ubuntu/+source/<emphasis>&lt;packagename&gt;</emphasis>/+bugs"
msgstr ""

#: C/bugs.xml:42(emphasis) 
msgid "Package Information"
msgstr ""

#: C/bugs.xml:43(para) 
msgid "Debian : <ulink url=\"http://packages.debian.org\">http://packages.debian.org</ulink> or http://packages.qa.ubuntu.org/<emphasis>&lt;packagename&gt;</emphasis>"
msgstr ""

#: C/bugs.xml:45(para) 
msgid "<phrase>Ubuntu</phrase> : <ulink url=\"http://packages.ubuntu.com\">http://package.ubuntu.com</ulink> or https://launchpad.net/distros/ubuntu/+source/<emphasis>&lt;packagename&gt;</emphasis> for source packages"
msgstr ""

#: C/bugs.xml:53(title) 
msgid "Bug Tips"
msgstr ""

#: C/bugs.xml:56(title) 
msgid "Proper source package"
msgstr ""

#: C/bugs.xml:58(para) 
msgid "Assigning bugs to packages helps direct bug reports to the developer(s) most likely to be able to help. By ensuring that this information is accurate, you can increase the chances of the bug being fixed promptly. Often, it is unclear which package contains the bug, and in these cases it is appropriate to file the bug in Ubuntu. If a bug is assigned to a package which is clearly not correct, and you don't know the correct package, change it to Ubuntu."
msgstr ""

#: C/bugs.xml:66(para) 
msgid "The correct package for bugs in the Linux kernel is <application>linux</application>, regardless of which particular package is in use (there are many packages which contain Linux kernels)."
msgstr ""

#: C/bugs.xml:72(title) 
msgid "Confirming problems"
msgstr ""

#: C/bugs.xml:74(para) 
msgid "If a bug is marked as Unconfirmed, it is helpful for you to try to reproduce the problem and record the results in Malone. If you are able to confirm the problem, you may change the status to Confirmed. If you are unable to confirm the problem, that is also useful information which should be recorded in a comment. Forwarding bugs upstream"
msgstr ""

#: C/bugs.xml:80(para) 
msgid "You can forward bugs to the authors of the software (upstream), if"
msgstr ""

#: C/bugs.xml:85(para) 
msgid "you made sure that the bug doesn't occur because of Ubuntu related changes"
msgstr ""

#: C/bugs.xml:90(para) 
msgid "the change is too hard to be fixed by yourself or anyone else on the team"
msgstr ""

#: C/bugs.xml:94(para) 
msgid "If you do this, be sure to include all the necessary information, such as"
msgstr ""

#: C/bugs.xml:99(para) 
msgid "how to reproduce the bug"
msgstr ""

#: C/bugs.xml:101(para) 
msgid "which version is used (which version of dependent libraries, if the bug indicates problems there)"
msgstr ""

#: C/bugs.xml:104(para) 
msgid "who reported it"
msgstr ""

#: C/bugs.xml:106(para) 
msgid "where the whole conversation can be found"
msgstr ""

#: C/bugs.xml:111(para) 
msgid "Make sure to also create a bug watch in Malone for this bug."
msgstr ""

#: C/bugs.xml:116(title) 
msgid "How to Deal with Feature Requests"
msgstr ""

#: C/bugs.xml:118(para) 
msgid "If you feel that the bug reported is a feature request disguised as a bug report, please introduce the reporter gently to the Specification Process we have. Be sure to mention the following specification resources: FeatureSpecifications, SpecSpec, SpecTemplate, and <ulink url=\"http://launchpad.net/specs\">http://launchpad.net/specs</ulink>"
msgstr ""

#: C/bugs.xml:127(title) 
msgid "How to deal with Support Requests"
msgstr ""

#: C/bugs.xml:129(para) 
msgid "If you feel that the bug reported is a support request disguised as a bug report, please introduce the reporter gently to the Support Tracker we have. Be sure to mention <ulink url=\"http://launchpad.net/support\">http://launchpad.net/support</ulink>."
msgstr ""

#: C/bugs.xml:136(title) 
msgid "How to deal with suggestions for changing defaults"
msgstr ""

#: C/bugs.xml:138(para) 
msgid "If you feel that the bug reported is a suggestion for changing defaults disguised as a bug report, please kindly reroute the discussion to an appropriate mailing list or a discussion forum. If this has already been discussed and rejected, explain the reasons to the user and direct him or her to the relevant discussion for further suggestions/comments."
msgstr ""

#: C/bugs.xml:146(title) 
msgid "Finding Duplicates"
msgstr ""

#: C/bugs.xml:148(para) 
msgid "Finding duplicates of bugs is a very valuable contribution in the Bug community. Users sometimes don't know how to check if the same bug has already been filed, and sometimes they don't care. Weeding out simple ME TOO messages and aggregating information in one place is crucial to the process of fixing a bug."
msgstr ""

#: C/bugs.xml:154(para) 
msgid "There are quite a few measures you can take to assist with this aspect. One is to search for bugs filed for the same component. Also try to rephrase your search, and concentrate on actions and words that describe the items involved to reproduce the bug."
msgstr ""

#: C/bugs.xml:159(emphasis) 
msgid "Examples:"
msgstr ""

#: C/bugs.xml:162(para) 
msgid "Easy ones: <ulink url=\"https://launchpad.net/malone/bugs/24932\">DAAP support</ulink> is a duplicate of <ulink url=\"https://launchpad.net/malone/bugs/24860\">please enable daap</ulink>."
msgstr ""

#: C/bugs.xml:167(para) 
msgid "More difficult ones: <ulink url=\"https://launchpad.net/malone/bugs/24011\">plug:spdif on emu10k1 gone after breezy upgrade</ulink> is a duplicate of <ulink url=\"https://launchpad.net/malone/bugs/21804\"> Muted sound after dist-upgrade from Hoary to Breezy</ulink>."
msgstr ""

#: C/bugs.xml:175(para) 
msgid "If you can't find it in the list of open bugs, you could try to find it in the list of closed ones. Don't feel discouraged if you don't find duplicates fast in the beginning. after some time you will get to know the usual suspects and learn how to more easily identify them."
msgstr ""

#: C/bugs.xml:180(para) 
msgid "If you encounter a bug that has a terrible/unintelligible title, rephrase it so people find it more easily."
msgstr ""

#: C/bugs.xml:186(title) 
msgid "Reminder of the Code of Conduct"
msgstr ""

#: C/bugs.xml:188(para) 
msgid "Note that the Code of Conduct applies to conversations in bug reports too. So if you observe people being disrespectful, please direct them to the <ulink url=\"http://www.ubuntu.com/community/conduct\">Ubuntu Code of Conduct</ulink>."
msgstr ""

#: C/bugs.xml:197(title) 
msgid "Managing Status"
msgstr ""

#: C/bugs.xml:199(para) 
msgid "As a reporter you usually don't have to take care of statuses. As a bug triager or developer it's an important tool to categorize bugs and have a good overview of the state of packages and software."
msgstr ""

#: C/bugs.xml:203(para) 
msgid "Here's a brief list and explanation of the various statuses:"
msgstr ""

#: C/bugs.xml:207(para) 
msgid "<emphasis role=\"bold\">Unconfirmed:</emphasis> Bugs start with this status. Bugs marked Unconfirmed sometimes lack information, are not ready, or are not confirmed yet. Most of them have not yet been triaged."
msgstr ""

#: C/bugs.xml:212(para) 
msgid "<emphasis role=\"bold\">Needs Info:</emphasis> If you have to ask the reporter questions, please set this bug to \"Needs Info\". A regular task for Needs Info bugs is to ask back. If there are no answers after a reasonable period, close them saying \"If you have more information on this bug, please reopen.\""
msgstr ""

#: C/bugs.xml:219(para) 
msgid "<emphasis role=\"bold\">Rejected:</emphasis> Bugs marked as Rejected are closed. Be sure to triple-check a bug before you reject it."
msgstr ""

#: C/bugs.xml:223(para) 
msgid "<emphasis role=\"bold\">Confirmed:</emphasis> Confirmed bugs require somebody else to confirm. Please don't confirm your own bugs."
msgstr ""

#: C/bugs.xml:227(para) 
msgid "<emphasis role=\"bold\">In Progress:</emphasis> If you start working on a bug, set it to In Progress so people know someone is working on the bug."
msgstr ""

#: C/bugs.xml:231(para) 
msgid "<emphasis role=\"bold\">Fix Committed:</emphasis> For upstream projects this means the fix is in CVS/SVN/bzr or committed somewhere. For package maintainers it means that the changes are pending and to be uploaded soon (it is what PENDINGUPLOAD was in Bugzilla)"
msgstr ""

#: C/bugs.xml:237(para) 
msgid "<emphasis role=\"bold\">Fix Released:</emphasis> For upstream projects this means that a release tarball was announced and is publicly available. For package maintainers this means that a fix was uploaded. Please don't be hesitant to add a changelog as a comment, so people know what to look for."
msgstr ""

#: C/bugs.xml:248(title) 
msgid "Managing Severity"
msgstr ""

#: C/bugs.xml:250(para) 
msgid "Ubuntu uses the following guidelines for assigning severity:"
msgstr ""

#: C/bugs.xml:254(para) 
msgid "<emphasis role=\"bold\">Wishlist:</emphasis> a request to add a new feature to one of the programs in Ubuntu. Use this for bugs which aren't really bugs, but ideas for new features which do not yet exist."
msgstr ""

#: C/bugs.xml:259(para) 
msgid "<emphasis role=\"bold\">Minor:</emphasis> bugs which affect functionality, but to a lesser extent than most bugs"
msgstr ""

#: C/bugs.xml:263(para) 
msgid "<emphasis role=\"bold\">Normal:</emphasis> a functionality bug of the standard variety. Most bugs are of \"Normal\" severity."
msgstr ""

#: C/bugs.xml:267(para) 
msgid "<emphasis role=\"bold\">Major:</emphasis> a bug which has a severe impact on a small portion of Ubuntu users (estimated) or has a moderate impact on a large portion of Ubuntu users (estimated)"
msgstr ""

#: C/bugs.xml:272(para) 
msgid "<emphasis role=\"bold\">Critical:</emphasis> a bug which has a severe impact on a large portion of Ubuntu users"
msgstr ""

#: C/bugs.xml:281(title) 
msgid "Target Milestone"
msgstr ""

#: C/bugs.xml:283(para) 
msgid "Don't change this field unless specifically instructed by a developer. In particular, do NOT use this field to record the release of Ubuntu in which the bug was observed: that is not its purpose! It is used by the release team when there is a reason to address the bug in a specific milestone release."
msgstr ""

#: C/bookinfo.xml:18(title) 
msgid "Credits and License"
msgstr ""

#: C/bookinfo.xml:19(para) 
msgid "The following Ubuntu Documentation Team authors maintain this document:"
msgstr ""

#: C/bookinfo.xml:23(para) 
msgid "Jordan Mantha"
msgstr ""

#: C/bookinfo.xml:26(para) 
msgid "The Ubuntu Packaging Guide is also based on the contributions of:"
msgstr ""

#: C/bookinfo.xml:29(para) 
msgid "Alexandre Vassalotti"
msgstr ""

#: C/bookinfo.xml:32(para) 
msgid "Jonathan Patrick Davies"
msgstr ""

#: C/bookinfo.xml:35(para) 
msgid "Ankur Kotwal"
msgstr ""

#: C/bookinfo.xml:38(para) 
msgid "Rapha&euml;l Pinson"
msgstr ""

#: C/bookinfo.xml:41(para) 
msgid "This document is made available under the GNU General Public License (GPL)."
msgstr ""

#: C/bookinfo.xml:42(para) 
msgid "You are free to modify, extend, and improve the Ubuntu documentation source code under the terms of this license. All derivative works must be released under this license."
msgstr ""

#: C/bookinfo.xml:44(para) 
msgid "This documentation is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE AS DESCRIBED IN THE DISCLAIMER."
msgstr ""

#: C/bookinfo.xml:47(para) 
msgid "Copies of the license are available in the appendices section of this book and online at <ulink url=\"http://www.gnu.org/licenses/gpl.html\">GNU General Public License</ulink>."
msgstr ""

#: C/bookinfo.xml:3(year) 
msgid "2004, 2005, 2006"
msgstr ""

#: C/bookinfo.xml:4(holder) 
msgid "Canonical Ltd. and members of the Ubuntu Documentation Project"
msgstr ""

#: C/bookinfo.xml:2(emphasis) 
msgid "&lt;ubuntu-doc@lists.ubuntu.com&gt;"
msgstr ""

#: C/bookinfo.xml:2(corpauthor) 
msgid "Ubuntu Documentation Project <placeholder-1/>"
msgstr ""

#: C/bookinfo.xml:55(para) 
msgid "The Ubuntu Packaging Guide is an introduction to packaging programs for Ubuntu and other Debian based distributions"
msgstr ""

#: C/bookinfo.xml:3(title) 
msgid "Disclaimer"
msgstr ""

#: C/bookinfo.xml:4(para) 
msgid "Every effort has been made to ensure that the information compiled in this publication is accurate and correct. However, this does not guarantee complete accuracy. Neither Canonical Ltd., the authors, nor translators shall be held liable for possible errors or the consequences thereof."
msgstr ""

#: C/bookinfo.xml:8(para) 
msgid "Some of the software and hardware descriptions cited in this publication may from time-to-time be registered trademarks. Names of products and trademarks and trade protection laws and may thus fall under copyright restrictions. All trade names are subject to copyright restrictions and are registered trade marks of their respective owners. In citation of such names, Canonical Ltd. and contributing members of the Ubuntu Documentation Project essentially adhere to the manufacturer's spelling and in no way make claim to them."
msgstr ""

#: C/bookinfo.xml:14(para) 
msgid "THIS DOCUMENTATION IS PROVIDED BY THE AUTHORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
msgstr ""

#: C/bookinfo.xml:3(publishername) 
msgid "The Ubuntu Documentation Project"
msgstr ""

#: C/basic.xml:15(title) 
msgid "Basic Packaging"
msgstr ""

#: C/basic.xml:17(para) 
msgid "One of the problems that many beginning packagers face is that there are multiple ways of packaging and there is often more than one tool to do the same job. We will go through three examples with the common build systems. First, we will use no build helper. This is usually the most difficult way to build source packages and is not often used in practice, but gives the most straightforward look at the packaging process. The second example will use <application>debhelper</application>, the most common build system in Debian. It helps the packager by automating common and repetitive tasks. Thirdly, we will briefly cover <application>CDBS</application> (<emphasis role=\"bold\">C</emphasis>ommon <emphasis role=\"bold\">D</emphasis>ebian <emphasis role=\"bold\">B</emphasis>uild <emphasis role=\"bold\">S</emphasis>ystem), a more highly automated build system that uses <application>debhelper</application> and is also commonly used."
msgstr ""

#: C/basic.xml:34(para) 
msgid "Package development often requires installing many packages (especially <application>-dev</application> packages containing headers and other common development files) that are not usually needed for a normal desktop <phrase>Ubuntu</phrase> installation. If you want avoid installing extra packages or would like to develop for a different <phrase>Ubuntu</phrase> release than what you currently have (the development release, for instance) the use of a chroot environment is highly recommended. A guide to setting up a <xref linkend=\"appendix-chroot\"/> can be found in the Appendix"
msgstr ""

#: C/basic.xml:48(title) 
msgid "Packaging From Scratch"
msgstr ""

#: C/basic.xml:50(para) 
msgid "<emphasis role=\"bold\">Requirements:</emphasis> build-essential, automake, gnupg, lintian, fakeroot and <xref linkend=\"gs-pbuilder\"/>."
msgstr ""

#: C/basic.xml:54(para) 
msgid "In this example we will be using the GNU <application><ulink url=\"http://www.gnu.org/software/hello/hello.html\">hello</ulink></application> program as our example. You can download the source tarball from <ulink url=\"http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz\">ftp.gnu.org</ulink>. For the purposes of this example we will be using the <filename>~/hello/</filename> directory."
msgstr ""

#: C/basic.xml:61(screen) 
#, no-wrap
msgid "\nmkdir ~/hello\ncd ~/hello\nwget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz"
msgstr ""

#: C/basic.xml:66(para) 
msgid "We will also compare our package to the one that is already been packaged and is in the <phrase>Ubuntu</phrase> repository. For now, we will place it in the <filename>ubuntu</filename> directory so we can look at it later. To get the source package, make sure you have a \"deb-src\" line in your <filename>/etc/apt/sources.list</filename> file for the Main repository. Then, simply execute:"
msgstr ""

#: C/basic.xml:74(screen) 
#, no-wrap
msgid "\nmkdir ubuntu\ncd ubuntu\napt-get source hello\ncd .."
msgstr ""

#: C/basic.xml:80(para) 
msgid "Unlike with most <application>apt-get</application> commands, you do not need to have root privileges to get the source package, because it is downloaded to the current directory. In fact, it is recommended that you <emphasis>only</emphasis> use <application>apt-get source</application> as a regular user, because then you can edit files in the source package without needing root privileges."
msgstr ""

#: C/basic.xml:87(para) 
msgid "What the <application>apt-get source</application> command does is:"
msgstr ""

#: C/basic.xml:91(para) 
msgid "Download the source package. A source package usually consists of a .dsc file, which describes the package and gives md5sums for the source package; a .orig.tar.gz file, which is the source code from the author; and a .diff.gz file, which is the patch that is applied to the source code to include the packaging information."
msgstr ""

#: C/basic.xml:97(para) 
msgid "Untar the .orig.tar.gz file into the current directory."
msgstr ""

#: C/basic.xml:100(para) 
msgid "Apply the gunziped .diff.gz to the unpacked source directory."
msgstr ""

#: C/basic.xml:105(para) 
msgid "If you manually download the source package (.dsc, .orig.tar.gz, and .diff.gz files), you can unpack them in the same way <application>apt-get source</application> does by using <application>dpkg-source</application> like so:"
msgstr ""

#: C/basic.xml:109(screen) 
#, no-wrap
msgid "dpkg-source -x *.dsc"
msgstr ""

#: C/basic.xml:111(para) 
msgid "The first thing you will need to do is make a copy of the original (sometimes called \"upstream\") tarball in the following format: <filename>&lt;packagename&gt;-&lt;version&gt;.orig.tar.gz</filename>. This does two things. Firstly, it creates two copies of the source code. If you accidentally change or delete the working copy you can use the one you downloaded. Secondly, it is considered poor packaging practice to change the original source tarball unless absolutely necessary. See <xref linkend=\"basic-mistakes\"/> for reasons."
msgstr ""

#: C/basic.xml:122(screen) 
#, no-wrap
msgid "\ncp hello-2.1.1.tar.gz hello_2.1.1.orig.tar.gz\ntar -xzvf hello_2.1.1.orig.tar.gz"
msgstr ""

#: C/basic.xml:126(para) 
msgid "The \"_\" between the package name (hello) and the version (2.1.1), as opposed to a \"-\", is very important. Your source package will fail to build if this is wrong."
msgstr ""

#: C/basic.xml:131(para) 
msgid "We now have a <filename>hello-2.1.1</filename> directory containing the source files. Now we need to create the customary <application>debian</application> directory where all the packaging information is stored. This allows us to separate the packaging files from the application source files."
msgstr ""

#: C/basic.xml:137(screen) 
#, no-wrap
msgid "\nmkdir hello-2.1.1/debian\ncd hello-2.1.1/debian/"
msgstr ""

#: C/basic.xml:141(para) 
msgid "We now need to create the essential files for any <phrase>Ubuntu</phrase> source package: <filename>changelog</filename>, <filename>control</filename>, <filename>copyright</filename>, and <filename>rules</filename>. These are the files needed to create the binary packages (.deb files) from the original (upstream) source code. Let us look at each one in turn."
msgstr ""

#: C/basic.xml:149(title) 
msgid "changelog"
msgstr ""

#: C/basic.xml:151(para) 
msgid "The <filename>changelog</filename> file is, as the name indicates, a listing of the changes made in each version. It has a specific format that gives the package name, version, distribution, and changes, and indicates who made the changes and when. If you have a GPG key make sure to use the same name and email address in <filename>changelog</filename> as you have in your key. The following is a template <filename>changelog</filename>:"
msgstr ""

#: C/basic.xml:159(screen) 
#, no-wrap
msgid "\npackage (version) distribution; urgency=urgency\n\n  * change details\n    more change details\n  * even more change details\n\n-- maintainer name &lt;email address&gt;[two spaces]  date"
msgstr ""

#: C/basic.xml:168(para) 
msgid "The format (especially of the date) are important. The date should be in RFC822 format, which can be obtained from the <application>822-date</application> program."
msgstr ""

#: C/basic.xml:172(para) 
msgid "Here is a sample <filename>changelog</filename> file for <application>hello</application>:"
msgstr ""

#: C/basic.xml:175(screen) 
#, no-wrap
msgid "\nhello (2.1.1-1) dapper; urgency=low\n\n   * New upstream release with lots of bug fixes.\n\n-- Captain Packager &lt;packager@coolness.com&gt;  Wed,  5 Apr 2006 22:38:49 -0700"
msgstr ""

#: C/basic.xml:182(para) 
msgid "Notice that the version has a -1 appended to it. This is what is called the Debian revision. This is used so that the packaging can be updated (to fix bugs for example) with new uploads within the same source release version."
msgstr ""

#: C/basic.xml:187(para) 
msgid "<phrase>Ubuntu</phrase> and Debian have slightly different versioning schemes to avoid conflicting packages with the same version. If a Debian package has been changed in <phrase>Ubuntu</phrase> it has an <emphasis>ubuntuX</emphasis> (where <emphasis>X</emphasis> is the <phrase>Ubuntu</phrase> revision number) appended to the end of the Debian version. So if the Debian <application>hello</application> packages was changed by <phrase>Ubuntu</phrase>, the version would be <filename>2.1.1-1ubuntu1</filename>. If a package for the application does not exist in Debian then the <phrase>Ubuntu</phrase> version is <emphasis>0</emphasis> (<emphasis>i.e.</emphasis><filename>2.1.1-0ubuntu1</filename>)."
msgstr ""

#: C/basic.xml:201(para) 
msgid "Now look at the <filename>changelog</filename> for the <phrase>Ubuntu</phrase> source package we downloaded earlier:"
msgstr ""

#: C/basic.xml:204(screen) 
#, no-wrap
msgid "\nless ../../ubuntu/hello-2.1.1/debian/changelog"
msgstr ""

#: C/basic.xml:207(para) 
msgid "Notice that in this case <emphasis>distribution</emphasis> is <emphasis>unstable</emphasis> (a Debian release). This is because the Debian package has not been changed by <phrase>Ubuntu</phrase>. Remember to set the <emphasis>distribution</emphasis> to your target distribution release."
msgstr ""

#: C/basic.xml:213(para) 
msgid "At this point create a <filename>changelog</filename> file in the <filename>debian</filename> directory, where you should still be."
msgstr ""

#: C/basic.xml:220(title) 
msgid "control"
msgstr ""

#: C/basic.xml:221(para) 
msgid "The control file contains the information that the package manager (such as <application>apt-get</application>, <application>synaptic</application>, and <application>aptitude</application>) uses, build-time dependencies, maintainer information, and much more."
msgstr ""

#: C/basic.xml:226(para) 
msgid "For the <phrase>Ubuntu</phrase><application>hello</application> package the control file looks something like like:"
msgstr ""

#: C/basic.xml:228(screen) 
#, no-wrap
msgid "Source: hello\nSection: devel\nPriority: optional\nMaintainer: Captain Packager &lt;packager@coolness.com&gt; \nStandards-Version: 3.6.1\n\nPackage: hello\nArchitecture: any\nDepends: ${shlibs:Depends}\nDescription: The classic greeting, and a good example\n The GNU hello program produces a familiar, friendly greeting.  It\n allows non-programmers to use a classic computer science tool which\n would otherwise be unavailable to them.\n .\n Seriously, though: this is an example of how to do a Debian\n package.\n It is the Debian version of the GNU Project's `hello world' program\n (which is itself an example for the GNU Project)."
msgstr ""

#: C/basic.xml:247(para) 
msgid "Create the <filename>control</filename> using the information above (making sure to provide your information for the <emphasis>Maintainer</emphasis> field)."
msgstr ""

#: C/basic.xml:251(para) 
msgid "The first paragraph gives information about the source package. Let us go through each line:"
msgstr ""

#: C/basic.xml:255(para) 
msgid "<emphasis role=\"bold\">Source:</emphasis> This is the name of the source package. In this case, <emphasis>hello</emphasis>."
msgstr ""

#: C/basic.xml:259(para) 
msgid "<emphasis role=\"bold\">Section:</emphasis> The apt repositories are split up into sections for ease of browsing and categorization of software. In this case, <application>hello</application> belongs in the <emphasis>devel</emphasis> section."
msgstr ""

#: C/basic.xml:265(para) 
msgid "<emphasis role=\"bold\">Priority:</emphasis> This sets the importance of the package to users. It should be one of the following:"
msgstr ""

#: C/basic.xml:271(para) 
msgid "<emphasis role=\"bold\">Required</emphasis> - packages that are essential for the system to work properly. If they are removed it is highly likely that your system will break in an unrecoverable way."
msgstr ""

#: C/basic.xml:277(para) 
msgid "<emphasis role=\"bold\">Important</emphasis> - minimal set of packages for a usable system. These are packages that will not produce an unrecoverable breakage of your system, but they are generally considered important tools that no Linux installation would be complete without. Note: this does not include things like Emacs, or even the X-Windows System."
msgstr ""

#: C/basic.xml:285(para) 
msgid "<emphasis role=\"bold\">Standard</emphasis> - Somewhat self explanatory."
msgstr ""

#: C/basic.xml:288(para) 
msgid "<emphasis role=\"bold\">Optional</emphasis> - in essence this category is for non-required packages. This is the bulk of packages. However, these packages should not conflict with each other."
msgstr ""

#: C/basic.xml:293(para) 
msgid "<emphasis role=\"bold\">Extra</emphasis> - packages that may conflict with packages in one of the above categories. Also used for specialized packages that would only be useful to people who already know what the package is used for."
msgstr ""

#: C/basic.xml:302(para) 
msgid "<emphasis role=\"bold\">Maintainer:</emphasis> The package maintainer, with email address."
msgstr ""

#: C/basic.xml:305(para) 
msgid "<emphasis role=\"bold\">Standards-Version:</emphasis> The version of the <ulink url=\"http://www.debian.org/doc/debian-policy/\">Debian Policy</ulink> that the package adheres to (in this case, version 3.6.1). An easy way to find the current version is <emphasis>apt-cache show debian-policy | grep Version</emphasis>."
msgstr ""

#: C/basic.xml:313(para) 
msgid "<emphasis role=\"bold\">Build-Depends:</emphasis> One of the most important fields and often the source of bugs, this line gives the list of binary packages (with versions if necessary) that needs to be installed in order to build the binary packages. Packages that are essential to build virtually all packages are required by <emphasis>build-essential</emphasis> do not need to be included in the Build-Depends line. In the case of <application>hello</application>, all the needed packages are a part of build-essential so a Build-Depends line is not needed. The list of build-essential packages can be found at <filename>/usr/share/doc/build-essential/list</filename>"
msgstr ""

#: C/basic.xml:329(para) 
msgid "The second paragraph is for the binary package that will be built from the source. If more than one binary package is built from the same source package, there should be one section for <emphasis>each</emphasis> one. Again, let us go through each line:"
msgstr ""

#: C/basic.xml:336(para) 
msgid "<emphasis role=\"bold\">Package:</emphasis> The name for the binary package. Many times for simple programs (such as <application>hello</application>), the source package name and binary package name will be the same."
msgstr ""

#: C/basic.xml:341(para) 
msgid "<emphasis role=\"bold\">Architecture:</emphasis> What architectures the binary package will be built for. Examples are:"
msgstr ""

#: C/basic.xml:347(para) 
msgid "<emphasis role=\"bold\">all</emphasis> - The source is <emphasis>not</emphasis> architecture-dependent. Programs that use Python or other interpreted languages would use this. The resulting binary package would end with <filename>_all.deb</filename> ."
msgstr ""

#: C/basic.xml:353(para) 
msgid "<emphasis role=\"bold\">any</emphasis> - The source <emphasis>is</emphasis> architecture-dependent but should compile on all the supported architectures. There will be a .deb file for each architecture ( <filename>_i386.deb</filename> for instance)"
msgstr ""

#: C/basic.xml:360(para) 
msgid "A list of architectures (i386, amd64, ppc, etc.) can give given to indicate that the source is architecture-dependent and does not work for all architectures supported by <phrase>Ubuntu</phrase>."
msgstr ""

#: C/basic.xml:367(para) 
msgid "<emphasis role=\"bold\">Depends:</emphasis> The list of packages that the binary package depends on for functionality. For <application>hello</application>, we see <filename>${shlibs:Depends}</filename>, which is a variable that substitutes in the needed shared libraries. See the <filename>dpkg-source</filename> man page for more information."
msgstr ""

#: C/basic.xml:375(para) 
msgid "<emphasis role=\"bold\">Recommends:</emphasis> Used for packages that are highly recommended and are usually found installed with the package. Some packages managers, most notably <application>aptitude</application>, will automatically install Recommended packages."
msgstr ""

#: C/basic.xml:381(para) 
msgid "<emphasis role=\"bold\">Suggests:</emphasis> Used for packages that are similar or useful when this package is installed."
msgstr ""

#: C/basic.xml:385(para) 
msgid "<emphasis role=\"bold\">Conflicts:</emphasis> Used for packages that will conflict with this package. Both cannot be installed at the same time. If one is being installed, the other will be removed."
msgstr ""

#: C/basic.xml:390(para) 
msgid "<emphasis role=\"bold\">Description:</emphasis> Both short and long descriptions are used by package managers. The format is:"
msgstr ""

#: C/basic.xml:394(screen) 
#, no-wrap
msgid "Description: &lt;single line synopsis&gt;\n &lt;extended description over several lines&gt;"
msgstr ""

#: C/basic.xml:397(para) 
msgid "Note that there is one space at the beginning of each line in the long description. More information on how to make a good description can be found at <ulink url=\"http://people.debian.org/~walters/descriptions.html\">http://people.debian.org/~walters/descriptions.html</ulink>."
msgstr ""

#: C/basic.xml:408(title) 
msgid "copyright"
msgstr ""

#: C/basic.xml:410(para) 
msgid "This file gives the copyright information. Generally, copyright information is found in the <filename>COPYING</filename> file in the program's source directory. This file should include such information as the names of the author and the packager, the URL from which the source came, a Copyright line with the year and copyright holder, and the text of the copyright itself. An example template would be:"
msgstr ""

#: C/basic.xml:417(screen) 
#, no-wrap
msgid "This package was debianized by {Your Name} &lt;your email address&gt;\n{Date}\n\nIt was downloaded from: {URL of webpage} \n\nUpstream Author(s): {Name and email address of authors}\n\nCopyright:\n\tCopyright (C) {Year(s)} by {Authors} {Email}\n\nLicense:\n\n"
msgstr ""

#: C/basic.xml:431(para) 
msgid "As one can imagine, <application>hello</application> is released under the GPL license. In this case it is easiest to just copy the <filename>copyright</filename> file from the <phrase>Ubuntu</phrase> package:"
msgstr ""

#: C/basic.xml:436(screen) 
#, no-wrap
msgid "\ncp ../../ubuntu/hello-2.1.1/debian/copyright ."
msgstr ""

#: C/basic.xml:439(para) 
msgid "You must include the complete copyright unless it is is GPL, LGPL, BSD, or Artistic License, in which case you can refer to the corresponding file in the <filename>/usr/share/common-licenses/</filename> directory."
msgstr ""

#: C/basic.xml:443(para) 
msgid "Notice that the <phrase>Ubuntu</phrase> package version of the <filename>copyright</filename> includes a license statement for the manual. It is important that <emphasis>all</emphasis> the files in the source be covered by a license statement."
msgstr ""

#: C/basic.xml:451(title) 
msgid "rules"
msgstr ""

#: C/basic.xml:453(para) 
msgid "The <filename>rules</filename> file is an executable Makefile that has rules for building the binary package from the source packages. For <application>hello</application> it will again be easier to use the <filename>rules</filename> from the <phrase>Ubuntu</phrase> package:"
msgstr ""

#: C/basic.xml:459(screen) 
#, no-wrap
msgid "#!/usr/bin/make -f\n# Sample debian/rules file - for GNU Hello.\n# Copyright 1994,1995 by Ian Jackson.\n# I hereby give you perpetual unlimited permission to copy,\n# modify and relicense this file, provided that you do not remove\n# my name from the file itself.  (I assert my moral right of\n# paternity under the Copyright, Designs and Patents Act 1988.)\n# This file may have to be extensively modified\n\npackage = hello\ndocdir = debian/tmp/usr/share/doc/$(package)\n\nCC = gcc\nCFLAGS = -g -Wall\nINSTALL_PROGRAM = install\n\nifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n  CFLAGS += -O2\nendif\nifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))\n  INSTALL_PROGRAM += -s\nendif\n\nbuild:\n        $(checkdir)\n        ./configure --prefix=/usr\n        $(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n        touch build\n\nclean:\n        $(checkdir)\n        rm -f build\n        -$(MAKE) -i distclean\n        rm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars\n\nbinary-indep:   checkroot build\n        $(checkdir)\n# There are no architecture-independent files to be uploaded\n# generated by this package.  If there were any they would be\n# made here.\n\nbinary-arch:    checkroot build\n        $(checkdir)\n        rm -rf debian/tmp\n        install -d debian/tmp/DEBIAN $(docdir)\n        install -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN\n        $(MAKE) INSTALL_PROGRAM=\"$(INSTALL_PROGRAM)\" \\\n                prefix=$$(pwd)/debian/tmp/usr install\n        cd debian/tmp &amp;&amp; mv usr/info usr/man usr/share\n        cp -a NEWS debian/copyright $(docdir)\n        cp -a debian/changelog $(docdir)/changelog.Debian\n        cp -a ChangeLog $(docdir)/changelog\n        cd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian\n        gzip -r9 debian/tmp/usr/share/man\n        gzip -9 debian/tmp/usr/share/info/*\n        dpkg-shlibdeps debian/tmp/usr/bin/hello\n        dpkg-gencontrol -isp\n        chown -R root:root debian/tmp\n        chmod -R u+w,go=rX debian/tmp\n        dpkg --build debian/tmp ..\n\ndefine checkdir\n        test -f src/$(package).c -a -f debian/rules\nendef\n\nbinary: binary-indep binary-arch\n\ncheckroot:\n        $(checkdir)\n        test $$(id -u) = 0\n\n.PHONY: binary binary-arch binary-indep clean checkroot\n"
msgstr ""

#: C/basic.xml:533(para) 
msgid "Let us go through this file in some detail. One of the first parts you will see is the declaration of some variables:"
msgstr ""

#: C/basic.xml:535(screen) 
#, no-wrap
msgid "package = hello\ndocdir = debian/tmp/usr/share/doc/$(package)\n\nCC = gcc\nCFLAGS = -g -Wall\nINSTALL_PROGRAM = install\n\nifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n  CFLAGS += -O2\nendif\nifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))\n  INSTALL_PROGRAM += -s\nendif\n"
msgstr ""

#: C/basic.xml:549(para) 
msgid "This section sets the CFLAGS for the compiler and also handles the <filename>noopt</filename> and <filename>nostrip</filename> DEB_BUILD_OPTIONS for debugging."
msgstr ""

#: C/basic.xml:553(para) 
msgid "Next is the <filename>build</filename> rule:"
msgstr ""

#: C/basic.xml:554(screen) 
#, no-wrap
msgid "build:\n\t$(checkdir)\n\t./configure --prefix=/usr\n\t$(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n\ttouch build"
msgstr ""

#: C/basic.xml:559(para) 
msgid "This rule runs <emphasis>./configure</emphasis> with the proper prefix and then runs <emphasis>make</emphasis> and then creates a <filename>build</filename> file that is a time stamp of the build so it is not done more than once."
msgstr ""

#: C/basic.xml:562(para) 
msgid "The next rule is <filename>clean</filename> which runs <emphasis>make -i distclean</emphasis> and removes the files that are made during the package building."
msgstr ""

#: C/basic.xml:565(screen) 
#, no-wrap
msgid "clean:\n\t$(checkdir)\n\trm -f build\n\t-$(MAKE) -i distclean\n\trm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars"
msgstr ""

#: C/basic.xml:571(para) 
msgid "Next we see an empty <filename>binary-indep</filename> rule, because there are no architecture-independent files created in this package."
msgstr ""

#: C/basic.xml:574(para) 
msgid "There are, however, many architecture-dependent files, so the <filename>binary-arch</filename> is used:"
msgstr ""

#: C/basic.xml:577(screen) 
#, no-wrap
msgid "binary-arch:    checkroot build\n\t\t$(checkdir)\n\t\trm -rf debian/tmp\n\t\tinstall -d debian/tmp/DEBIAN $(docdir)\n\t\tinstall -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN\n\t\t$(MAKE) INSTALL_PROGRAM=\"$(INSTALL_PROGRAM)\" \\\n\t\tprefix=$$(pwd)/debian/tmp/usr install\n\t\tcd debian/tmp &amp;&amp; mv usr/info usr/man usr/share\n\t\tcp -a NEWS debian/copyright $(docdir)\n\t\tcp -a debian/changelog $(docdir)/changelog.Debian\n\t\tcp -a ChangeLog $(docdir)/changelog\n\t\tcd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian\n\t\tgzip -r9 debian/tmp/usr/share/man\n\t\tgzip -9 debian/tmp/usr/share/info/*\n\t\tdpkg-shlibdeps debian/tmp/usr/bin/hello\n\t\tdpkg-gencontrol -isp\n\t\tchown -R root:root debian/tmp\n\t\tchmod -R u+w,go=rX debian/tmp\n\t\tdpkg --build debian/tmp .."
msgstr ""

#: C/basic.xml:597(para) 
msgid "First, notice that this rule calls the <filename>checkroot</filename> rule to make sure the package is built as root and calls the <filename>build</filename> rule to compile the source. Then the <filename>debian/tmp/DEBIAN</filename> and <filename>debian/tmp/usr/share/doc/hello</filename> files are created, and the <filename>postinst</filename> and the <filename>prerm&gt;</filename> scripts are installed to <filename>debian/tmp/DEBIAN</filename>. Then <emphasis>make install</emphasis> is run with a prefix that installs to the <filename>debian/tmp/usr</filename> directory. Then the documentation files (NEWS, ChangeLog, and the debian changelog) are gzipped and installed. <emphasis>dpkg-shlibdeps</emphasis> is then run to find the shared library dependencies of the <application>hello</application> executable, and it stores the list in <filename>debian/substvars</filename> file for the ${shlibs:Depends} variable in <filename>control</filename>. Then <emphasis>dpkg-gencontrol</emphasis> is run to create a control file for the binary package, and it makes the substitutions created by <emphasis>dpkg-shlibdeps</emphasis>. Finally, after the permissions of the <filename>debian/tmp</filename> have been set, <emphasis>dpkg --build</emphasis> is run to build the binary .deb package and place it in the parent directory."
msgstr ""

#: C/basic.xml:615(title) 
msgid "postinst and prerm"
msgstr ""

#: C/basic.xml:617(para) 
msgid "The <filename>postinst</filename> and <filename>prerm</filename> files are examples of maintainer scripts. They are shell scripts that are executed after installation and before removal, respectively. In the case of the <phrase>Ubuntu</phrase><application>hello</application> package, they are used to install (and remove) the info file. Go ahead and copy then into the current <filename>debian</filename> directory."
msgstr ""

#: C/basic.xml:626(screen) 
#, no-wrap
msgid "\ncp ../../ubuntu/hello-2.1.1/debian/postinst .\ncp ../../ubuntu/hello-2.1.1/debian/prerm ."
msgstr ""

#: C/basic.xml:633(title) C/basic.xml:967(title) 
msgid "Building the Source Package"
msgstr ""

#: C/basic.xml:635(para) 
msgid "Now that we have gone through the files in the <filename>debian</filename> directory for <application>hello</application> in detail, we can build the source (and binary) packages. First let us move into the source directory:"
msgstr ""

#: C/basic.xml:641(screen) C/basic.xml:975(screen) 
#, no-wrap
msgid "cd .."
msgstr ""

#: C/basic.xml:643(para) 
msgid "Now we build the source package using <application>dpkg-buildpackage</application>:"
msgstr ""

#: C/basic.xml:646(screen) 
#, no-wrap
msgid "dpkg-buildpackage -S -rfakeroot"
msgstr ""

#: C/basic.xml:648(para) 
msgid "The -S flag tells <application>dpkg-buildpackage</application> to build a source package, and the -r flag tells it to use <application>fakeroot</application> to allow us to have fake root privileges when making the package. <application>dpkg-buildpackage</application> will take the <filename>.orig.tar.gz</filename> file and produce a <filename>.diff.gz</filename> that is the difference between the original tarball from the author and the directory we have created (<filename>debian/</filename> and its contents), and the <filename>.dsc</filename> file that has the description and md5sums for the source package. The <filename>.dsc</filename> file and the <filename>*_source.changes</filename> (used for uploading the source package) are signed using your GPG key. If you do not have a GPG key use the <emphasis>-us -uc</emphasis> flags with <application>dpkg-buildpackage</application>. Your package will build but it cannot be uploaded until it is signed."
msgstr ""

#: C/basic.xml:668(para) 
msgid "In addition to the source package, we can also build the binary package, with <application>pbuilder</application>"
msgstr ""

#: C/basic.xml:672(screen) C/basic.xml:986(screen) 
#, no-wrap
msgid "sudo pbuilder ../*.dsc"
msgstr ""

#: C/basic.xml:674(para) 
msgid "Using <application>pbuilder</application> to build the binary packages is very important. It ensures that the build dependencies are correct because <application>pbuilder</application> provides only a minimal environment so all the build-time dependencies installed are determined by the <filename>control</filename> file."
msgstr ""

#: C/basic.xml:681(para) 
msgid "We can also check the source package for common mistakes using <application>lintian</application>:"
msgstr ""

#: C/basic.xml:684(screen) C/basic.xml:991(screen) 
#, no-wrap
msgid "cd ..\nlintian -i *.dsc"
msgstr ""

#: C/basic.xml:692(title) 
msgid "Packaging With Debhelper"
msgstr ""

#: C/basic.xml:694(para) 
msgid "<emphasis role=\"bold\">Requirements:</emphasis> The requirements from the <xref linkend=\"basic-scratch\"/> section plus debhelper and dh-make"
msgstr ""

#: C/basic.xml:699(para) 
msgid "As a packager, you will rarely create packages from scratch as we have done in the previous section. As you can imagine many of the tasks and information in the <filename>rules</filename> file, for instance, are common to many packages. To make packaging easier and more efficient, you can use <application>debhelper</application> to help with these tasks. Debhelper is a set of Perl scripts (that start with <emphasis>dh_</emphasis>) that automate the process of package-building. With these scripts, building a Debian package becomes quite simple."
msgstr ""

#: C/basic.xml:710(para) 
msgid "In this example, we will again build the GNU Hello package, but this time we will be comparing our work to the <phrase>Ubuntu</phrase><application>hell-debhelper</application> package. Again, create a directory where your will be working:"
msgstr ""

#: C/basic.xml:715(screen) 
#, no-wrap
msgid "mkdir ~/hello-debhelper\ncd ~/hello-debhelper\nwget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz\nmkdir ubuntu\ncd ubuntu"
msgstr ""

#: C/basic.xml:722(para) 
msgid "Then, get the <phrase>Ubuntu</phrase> source package:"
msgstr ""

#: C/basic.xml:724(screen) 
#, no-wrap
msgid "apt-get source hello-debhelper\ncd .."
msgstr ""

#: C/basic.xml:727(para) 
msgid "Like the previous example, the first thing we need to do is unpack the original (upstream) tarball."
msgstr ""

#: C/basic.xml:730(screen) 
#, no-wrap
msgid "tar -xzvf hello-2.1.1.tar.gz"
msgstr ""

#: C/basic.xml:732(para) 
msgid "Instead of copying the upstream tarball to <filename>hello_2.1.1.orig.tar.gz</filename> as we did in the previous example, we will let <application>dh_make</application> do the work for us. The only thing you have to do is rename the source folder so it is in the form of <emphasis>&lt;packagename&gt;-&lt;version&gt;</emphasis> and the package name is all lowercase. In this case just untarring the tarball produces a correctly named source directory so we can move into it:"
msgstr ""

#: C/basic.xml:742(screen) 
#, no-wrap
msgid "cd hello-2.1.1"
msgstr ""

#: C/basic.xml:744(para) 
msgid "To create the initial \"debianization\" of the source we will use <application>dh_make</application>"
msgstr ""

#: C/basic.xml:747(screen) 
#, no-wrap
msgid "\ndh_make -e your.maintainer@address -f ../hello-2.1.1.tar.gz\n\t\t"
msgstr ""

#: C/basic.xml:751(para) 
msgid "dh_make will then ask you a series of questions:"
msgstr ""

#: C/basic.xml:755(emphasis) 
msgid "s"
msgstr ""

#: C/basic.xml:753(screen) 
#, no-wrap
msgid "\nType of package: single binary, multiple binary, library, kernel module or cdbs?\n[s/m/l/k/b] <placeholder-1/>"
msgstr ""

#: C/basic.xml:765(emphasis) 
msgid "Enter"
msgstr ""

#: C/basic.xml:757(screen) 
#, no-wrap
msgid "\nMaintainer name : Captain Packager\nEmail-Address   : packager@coolness.com\nDate            : Thu,  6 Apr 2006 10:07:19 -0700\nPackage Name    : hello\nVersion         : 2.1.1\nLicense         : blank\nType of Package : Single\nHit &lt;enter&gt; to confirm: <placeholder-1/>"
msgstr ""

#: C/basic.xml:767(para) 
msgid "Only run <application>dh_make -e</application> once. If you run it again after you do it the first time, it will not work properly. If you want to change it or you made a mistake, remove the source directory and untar the upstream tarball again. Then you can move into the source directory and try again."
msgstr ""

#: C/basic.xml:773(para) 
msgid "Running <application>dh_make -e</application> has done two things:"
msgstr ""

#: C/basic.xml:778(para) 
msgid "Created the <filename>hello_2.1.1.orig.tar.gz</filename> file above the source directory."
msgstr ""

#: C/basic.xml:782(para) 
msgid "Created the basic files needed in the <filename>debian/</filename>, plus many template files (.ex) that may or may not be needed."
msgstr ""

#: C/basic.xml:788(para) 
msgid "The <application>Hello</application> program is not very complicated and as we have seen in <xref linkend=\"basic-scratch\"/>, packaging it does not require much more than the basic files. Therefore, let us remove the <filename>.ex</filename> files:"
msgstr ""

#: C/basic.xml:794(screen) 
#, no-wrap
msgid "cd debian\nrm *.ex *.EX"
msgstr ""

#: C/basic.xml:797(para) 
msgid "For <application>hello</application> you will also not need the <filename>Readme.Debian</filename> (Readme file for specific Debian issues not the programs Readme), <filename>dirs</filename> (used by <application>dh_installdirs</application> to create needed directories), <filename>docs</filename> (used by <application>dh_installdocs</application> to install program documentation), and <filename>info</filename> (used by <application>dh_installinfo</application> to install the info file) files in the <filename>debian</filename> directory. For more information on these files see the <xref linkend=\"appendix-examples\"/> in the Appendix"
msgstr ""

#: C/basic.xml:809(para) 
msgid "At this point you should have only <filename>changelog</filename>, <filename>compat</filename>, <filename>control</filename>, <filename>copyright</filename>, and <filename>rules</filename> files in the <filename>debian</filename> directory. From <xref linkend=\"basic-scratch\"/> the only file that is new is <filename>compat</filename>, which is a file that contains the <application>debhelper</application> version (in this case 4) that is used."
msgstr ""

#: C/basic.xml:819(para) 
msgid "You will need to adjust the <filename>changelog</filename>slightly in this case to reflect that this package is named <application>hello-debhelper</application> rather than just <application>hello</application>:"
msgstr ""

#: C/basic.xml:825(screen) 
#, no-wrap
msgid "\nhello-debhelper (2.1.1-1) dapper; urgency=low\n\n  * Initial release\n\n  -- Captain Packager &lt;packager@coolness.com&gt;  Thu,  6 Apr 2006 10:07:19 -0700"
msgstr ""

#: C/basic.xml:832(para) 
msgid "For use with <application>debhelper</application> the only things we need to change in <filename>control</filename> are the name (substituting <application>hello</application> for <application>hello-debhelper</application>) and adding <application>debhelper (&gt;= 4.0.0)</application> to the <emphasis>Build-Depends</emphasis> field for the source package. The <phrase>Ubuntu</phrase> package for <application>hello-debhelper</application> looks like:"
msgstr ""

#: C/basic.xml:841(screen) 
#, no-wrap
msgid "\nSource: hello-debhelper\nSection: devel\nPriority: extra\nMaintainer: Capitan Packager &lt;packager@coolness.com&gt;\nStandards-Version: 3.6.1\nBuild-Depends: debhelper (&gt;= 4)\n\nPackage: hello-debhelper\nArchitecture: any\nDepends: ${shlibs:Depends}\nConflicts: hello\nProvides: hello\nReplaces: hello\nDescription: The classic greeting, and a good example\n The GNU hello program produces a familiar, friendly greeting.  It\n allows non-programmers to use a classic computer science tool which\n would otherwise be unavailable to them.\n .\n Seriously, though: this is an example of how to do a Debian package.\n It is the Debian version of the GNU Project's `hello world' program\n (which is itself an example for the GNU Project).\n .\n This is the same as the hello package, except it uses debhelper to\n make the deb.  Please see debhelper as to what it is.\n\t\t"
msgstr ""

#: C/basic.xml:868(para) 
msgid "We can copy the <filename>copyright</filename> file and the <filename>postinst</filename> and <filename>prerm</filename> scripts from the <phrase>Ubuntu</phrase><application>hello-debhelper</application> package as they have not changed since <xref linkend=\"basic-scratch\"/>. We will also copy the <filename>rules</filename> file so we can look at it next."
msgstr ""

#: C/basic.xml:876(screen) 
#, no-wrap
msgid "\ncp ../../ubuntu/hello-debhelper-2.1.1/debian/copyright .\ncp ../../ubuntu/hello-debhelper-2.1.1/debian/postinst .\ncp ../../ubuntu/hello-debhelper-2.1.1/debian/prerm .\ncp ../../ubuntu/hello-debhelper-2.1.1/debian/rules."
msgstr ""

#: C/basic.xml:882(para) 
msgid "The lase file we need to look at is <filename>rules</filename>. This is where the power of the <application>debhelper</application> scripts can be seen. The <application>debhelper</application> version of <filename>rules</filename> is somewhat smaller (54 lines as opposed to 72 in the <xref linkend=\"basic-scratch-rules\"/> version)"
msgstr ""

#: C/basic.xml:890(para) 
msgid "The <application>debhelper</application> version looks like:"
msgstr ""

#: C/basic.xml:892(screen) 
#, no-wrap
msgid " #!/usr/bin/make -f\n\npackage = hello-debhelper\n\nCC = gcc\nCFLAGS = -g -Wall\n\nifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))\n  CFLAGS += -O2\nendif\n\n#export DH_VERBOSE=1\n\nclean:\n        dh_testdir\n        dh_clean\n        rm -f build\n        -$(MAKE) -i distclean\n\ninstall: build\n        dh_clean\n        dh_installdirs\n        $(MAKE) prefix=$(CURDIR)/debian/$(package)/usr \\\n                mandir=$(CURDIR)/debian/$(package)/usr/share/man \\\n                infodir=$(CURDIR)/debian/$(package)/usr/share/info \\\n                install\n\nbuild:\n        ./configure --prefix=/usr\n        $(MAKE) CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\"\n        touch build\n\nbinary-indep: install\n# There are no architecture-independent files to be uploaded\n# generated by this package.  If there were any they would be\n# made here.\n\nbinary-arch: install\n        dh_testdir -a\n        dh_testroot -a\n        dh_installdocs -a NEWS\n        dh_installchangelogs -a ChangeLog\n        dh_strip -a\n        dh_compress -a\n        dh_fixperms -a\n        dh_installdeb -a\n        dh_shlibdeps -a\n        dh_gencontrol -a\n        dh_md5sums -a\n        dh_builddeb -a\n\nbinary: binary-indep binary-arch\n\n.PHONY: binary binary-arch binary-indep clean checkroot\n\t\t\t"
msgstr ""

#: C/basic.xml:948(para) 
msgid "Notice that tasks like testing if you are in the right directory (<application>dh_testdir</application>), making sure you are building the package with root privileges (<application>dh_testroot</application>), installing documentation (<application>dh_installdocs</application> and <application>dh_installchangelogs</application>), and cleaning up after the build (<application>dh_clean</application>) are handled automatically. Many packages much more complicated than <application>hello</application> have <filename>rules</filename> files no bigger because the <application>debhelper</application> scripts handle most of the tasks. For a complete list of <application>debhelper</application> scripts, please see the <xref linkend=\"appendix-debhelper\"/>. They are also well documented in their <application>man</application> pages. It would be a very useful exercise to read the man page (they usually well written not too long) for each helper script used in the <filename>rules</filename> file above"
msgstr ""

#: C/basic.xml:969(para) 
msgid "Now that we have gone through the files in the <filename>debian</filename> directory for <application>hello-debhelper</application> we can build the source (and binary) packages. First let us move back into the source directory:"
msgstr ""

#: C/basic.xml:977(para) 
msgid "Now we build the source package using <application>debuild</application> which is a wrapper script for <application>dpkg-buildpackage</application>:"
msgstr ""

#: C/basic.xml:981(screen) 
#, no-wrap
msgid "debuild -S"
msgstr ""

#: C/basic.xml:983(para) 
msgid "and the binary package, with <application>pbuilder</application>"
msgstr ""

#: C/basic.xml:988(para) 
msgid "and check the source package for common mistakes using <application>lintian</application>:"
msgstr ""

#: C/basic.xml:999(title) 
msgid "Packaging With CDBS"
msgstr ""

#: C/basic.xml:1001(para) 
msgid "CDBS is a tool that uses debhelper to make building and maintaining Debian packages even easier. It has many advantages:"
msgstr ""

#: C/basic.xml:1005(para) 
msgid "it produces a short, readable and efficient <filename>debian/rules</filename>"
msgstr ""

#: C/basic.xml:1008(para) 
msgid "it automates debhelper and autotools for you so you do not have to worry about repetitive tasks"
msgstr ""

#: C/basic.xml:1011(para) 
msgid "it helps you focus on more important packaging problems because it helps without limiting customization"
msgstr ""

#: C/basic.xml:1014(para) 
msgid "classes used in CDBS have been well-tested, so you can avoid dirty hacks to solve common problems"
msgstr ""

#: C/basic.xml:1017(para) 
msgid "switching to CDBS is easy"
msgstr ""

#: C/basic.xml:1019(para) 
msgid "it is easily extendable"
msgstr ""

#: C/basic.xml:1023(title) 
msgid "Using CDBS in packages"
msgstr ""

#: C/basic.xml:1025(para) 
msgid "Using CDBS in an <phrase>Ubuntu</phrase> package is very easy. After adding <application>cdbs</application> to the Build-Depends in <filename>debian/control</filename>, a basic <filename>debian/rules</filename> file using CDBS can fit in 2 lines. For a simple C/C++ application with no extra rules, such as <application>hello</application>, <filename>debian/rules</filename> can look like this :"
msgstr ""

#: C/basic.xml:1033(screen) 
#, no-wrap
msgid "#!/usr/bin/make -f\n\t\t\t\t\ninclude /usr/share/cdbs/1/rules/debhelper.mk\ninclude /usr/share/cdbs/1/class/autotools.mk"
msgstr ""

#: C/basic.xml:1038(para) 
msgid "That is all you need to build the program and deal with installing and cleaning! You can then use the <filename>.install</filename> and <filename>.info</filename> files and tune your package with the usual debhelper functions in the various sections for <filename>debian/rules</filename>."
msgstr ""

#: C/basic.xml:1044(para) 
msgid "Do not use DEB_AUTO_UPDATE_DEBIAN_CONTROL:=yes to automatically change <filename>debian/control</filename>. It can cause bad things and Debian considers it a reason to reject a package from entering the archives. See <ulink url=\"http://ftp-master.debian.org/REJECT-FAQ.html\"> http://ftp-master.debian.org/REJECT-FAQ.html</ulink> for more information."
msgstr ""

#: C/basic.xml:1052(para) 
msgid "As you can see, CDBS mostly works by including <filename>.mk</filename> files in <filename>debian/rules</filename>. The <application>cdbs</application> package provides such files in <filename>/usr/share/cdbs/1/</filename>, that allow you to do quite a lot of packaging tasks. Other packages, such as <application>quilt</application>, add more modules to CDBS and can be used as Build-Depends. Note that you can also use your own CDBS rules and include them in the package. The most useful modules included with the <application>cdbs</application> package are:"
msgstr ""

#: C/basic.xml:1064(para) 
msgid "<filename>rules/debhelper.mk</filename>: calls debhelper in all required sections"
msgstr ""

#: C/basic.xml:1067(para) 
msgid "<filename>rules/dpatch.mk</filename>: allows you to use dpatch to ease patching the source"
msgstr ""

#: C/basic.xml:1070(para) 
msgid "<filename>rules/simple-patchsys.mk</filename>: provides a very easy way to patch the source"
msgstr ""

#: C/basic.xml:1073(para) 
msgid "<filename>rules/tarball.mk</filename>: allows you to build packages using the compressed tarball in the package"
msgstr ""

#: C/basic.xml:1077(para) 
msgid "<filename>class/autotools.mk</filename>: calls autotools in all required sections"
msgstr ""

#: C/basic.xml:1080(para) 
msgid "<filename>class/gnome.mk</filename>: builds GNOME programs (requires the proper Build-Depends in <filename>debian/control</filename>)"
msgstr ""

#: C/basic.xml:1084(para) 
msgid "<filename>class/kde.mk</filename>: builds KDE programs (requires the proper Build-Depends in <filename>debian/control</filename>)"
msgstr ""

#: C/basic.xml:1088(para) 
msgid "<filename>class/python-distutils.mk</filename>: facilitates packaging python programs"
msgstr ""

#: C/basic.xml:1095(title) 
msgid "More information on CDBS"
msgstr ""

#: C/basic.xml:1097(para) 
msgid "For more information on CDBS, see Marc Dequènes's guide at <ulink url=\"https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml\">https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml</ulink>.i"
msgstr ""

#: C/basic.xml:1105(title) 
msgid "Updating Packages"
msgstr ""

#: C/basic.xml:1107(para) 
msgid "If you have been around Linux distributions for any amount of time you will realized that there are sometimes bugs in programs. In the Debian and <phrase>Ubuntu</phrase> distributions bugs are often fixed through the packaging by patching the source code. Sometimes there are bugs in the packaging itself that can cause users difficulties."
msgstr ""

#: C/basic.xml:1114(para) 
msgid "To patch the programs source code you could simple download the current <phrase>Ubuntu</phrase> source package (with <application>apt-get source</application>) and make the needed changes. You can then add a new entry to the <filename>debian/changelog</filename> using <application>dch -i</application> or <application>dch -v &lt;version&gt;-&lt;revision&gt;</application> to specify the version. When you run <application>debuild -S</application> from the source directory you will have a new source package with a <filename>.diff.gz</filename> that contains your changes. A problem with this approach is that the seperation between source and patch is not very clear."
msgstr ""

#: C/basic.xml:1128(para) 
msgid "A solution to this problem is to separate the changes to the source code into individual patches stored in the <filename>debian</filename> directory. One such patch system is called <application>dpatch</application>. The patches are stored in the <filename>debian/patches/</filename> directory and have a special format."
msgstr ""

#: C/basic.xml:1135(para) 
msgid "To creat a <application>dpatch</application> patch do the following:"
msgstr ""

#: C/basic.xml:1138(para) 
msgid "Create a temporary work space and two copies of the current source directory:"
msgstr ""

#: C/basic.xml:1141(screen) 
#, no-wrap
msgid "\nmkdir tmp\ncd tmp\ncp -a ../&lt;package&gt;-&lt;version&gt; . \ncp -a &lt;package&gt;-&lt;version&gt; &lt;package&gt;-&lt;version&gt;.orig \n"
msgstr ""

#: C/basic.xml:1148(para) 
msgid "Make the canges in the <filename>&lt;package&gt;-&lt;version&gt;</filename> directory."
msgstr ""

#: C/basic.xml:1152(para) 
msgid "Create a patch file using <application>diff</application> and place it in the <filename>debian/patches</filename> directory."
msgstr ""

#: C/basic.xml:1156(screen) 
#, no-wrap
msgid "\ndiff -Nru  &lt;package&gt;-&lt;version&gt;.orig &lt;package&gt;-&lt;version&gt; &gt; patch-file\n"
msgstr ""

#: C/basic.xml:1160(para) 
msgid "Create the <application>dpatch</application> patch using <application>dpatch patch-template</application> and a file named <filename>00list</filename> that lists the dpatches."
msgstr ""

#: C/basic.xml:1163(screen) 
#, no-wrap
msgid "\ndpatch patch-template -p \"01_patchname\" \"patch-file description\" \\\n\t&lt; patch-file &gt; 01_patchname.dpatch\necho 01_patchname.dpatch &gt;00list"
msgstr ""

#: C/basic.xml:1168(para) 
msgid "You can now place <filename>01_patchname.dpatch</filename> and <filename>00list</filename> in the <filename>debian/patches</filename> directory of your source package."
msgstr ""

#: C/basic.xml:1173(screen) 
#, no-wrap
msgid "\nmkdir ../&lt;package&gt;-&lt;version&gt;/debian/patches\ncp 01_patchname.dpatch 00list ../&lt;package&gt;-&lt;version&gt;/debian/patches\ncd ..\nrm -rf tmp\n\t\t\t"
msgstr ""

#: C/basic.xml:1180(para) 
msgid "You can also edit a pre-existing patch using <application>dpatch-edit-patch</application>"
msgstr ""

#: C/basic.xml:1183(para) 
msgid "Once all the changes have been made, a changelog entry added, and <application>dpatch</application> added to the <filename>debian/control</filename> file (if needed), then you can rebuild the source package with <application>debuild -S</application>."
msgstr ""

#: C/basic.xml:1189(para) 
msgid "To get your fixed source package uploaded to the <phrase>Ubuntu</phrase> repositories you will need to get you source package sponsored by a person that has upload rights. See <xref linkend=\"ubuntu-upload\"/> for more details. Sometimes, rather than giving the entire source package (.diff.gz, .dsc. and .orig.tar.gz) it is easier and more efficient to just give the difference between the source package that is currently in the repositories and your fixed source package. A tool has been created (of course) to do just that, called <application>debdiff</application>. Using <application>debdiff</application> is similar to using <application>diff</application> but is made specifically for packaging. You can either <application>debdiff</application> the source package by:"
msgstr ""

#: C/basic.xml:1204(screen) 
#, no-wrap
msgid "\ndebdiff &lt;oldpackage&gt;.dsc &lt;newpackage&gt;.dsc &gt; package.debdiff\n\t\t"
msgstr ""

#: C/basic.xml:1208(para) 
msgid "or the binary package by:"
msgstr ""

#: C/basic.xml:1210(screen) 
#, no-wrap
msgid "\ndebdiff &lt;oldpackage&gt;.deb &lt;newpackage&gt;.deb &gt; package.debdiff\n\t\t"
msgstr ""

#: C/basic.xml:1214(para) 
msgid "Debdiffs are great to attach to bug reports and have ready for a sponsor to upload."
msgstr ""

#: C/basic.xml:1220(title) 
msgid "Common Mistakes"
msgstr ""

#: C/basic.xml:1223(title) 
msgid "dh_make Example Files"
msgstr ""

#: C/basic.xml:1225(para) 
msgid "When you use dh_make to create the initial \"debianization\", example files for various tasks are created in the <filename>debian/</filename> directory. The templates have a .ex extension. If you want to use one, rename it to remove the extension. If you do not need it, remove it to keep the <filename>debian/</filename> directory clean."
msgstr ""

#: C/basic.xml:1234(title) 
msgid "Changing the Original Tarball"
msgstr ""

#: C/basic.xml:1236(para) 
msgid "There are two different types of source package: native and non-native. A native package is one that is specific to <phrase>Ubuntu</phrase>/Debian. It has the <application>debian/</application> directory containing the packaging information and any changes to the source included in the tarball (usually &lt;packagename&gt;_&lt;version&gt;.tar.gz). Non-native packages are more common and recommended for most situations. A non-native package splits the source package into a &lt;packagename&gt;_&lt;version&gt;.orig.tar.gz tarball that is identical (hopefully including md5sum) to the source tarball downloaded from the project's homepage and a .diff.gz file that contains all the differences (<filename>debian/</filename> directory and patches) from the original source tarball."
msgstr ""

#: C/basic.xml:1248(para) 
msgid "Here is a list of potential problems that can occur if you change the original tarball:"
msgstr ""

#: C/basic.xml:1253(para) 
msgid "Reproducibility"
msgstr ""

#: C/basic.xml:1255(para) 
msgid "If you take just the .diff.gz and .dsc, you or someone else has no means to reproduce the changes in the original tarball."
msgstr ""

#: C/basic.xml:1259(para) 
msgid "Upgradeability"
msgstr ""

#: C/basic.xml:1261(para) 
msgid "It is much easier to upgrade to a new upstream (from the author) version if the .orig.tar.gz is preserved and there is a clear separation between the upstream source and the changes made to produce the <phrase>Ubuntu</phrase> source package."
msgstr ""

#: C/basic.xml:1266(para) 
msgid "Debian to <phrase>Ubuntu</phrase> Synchronization"
msgstr ""

#: C/basic.xml:1268(para) 
msgid "Changing original tarballs makes it hard to automatically sync from Debian to <phrase>Ubuntu</phrase>. Normally, only the .diff.gz and .dsc files change within the same upstream version, since the .orig.tar.gz file is shared by all the Debian or <phrase>Ubuntu</phrase> revisions. It is much more difficult to sync if the md5sums of the .orig.tar.gz files are not the same."
msgstr ""

#: C/basic.xml:1275(para) 
msgid "Usage of Revision Control for Debian package"
msgstr ""

#: C/basic.xml:1277(para) 
msgid "If you use svn (<application>svn-buildpackage</application>) to handle your Debian package, you usually don't store the original tarball inside. If someone else does a checkout, he'll need to get the original tarball separately. Other revision control systems can be used to track only the packaging files (<filename>debian/</filename>, etc.) and not the whole source. However, if the .orig.tar.gz is not the same, then obviously problems can occur."
msgstr ""

#: C/basic.xml:1286(para) 
msgid "Security tracking"
msgstr ""

#: C/basic.xml:1288(para) 
msgid "Consider a situation where someone <emphasis>wants</emphasis> to introduce a backdoor/rootkit or other evil stuff. If the original tarball is intact, it can be easily scanned through the .diff.gz to see if the one who debianized the package tried to do something evil. If the tarball has changed, however, one also needs to check the differences between the tarball and the original source, if the individual wants to check if the one who debianized the software introduces evil stuff."
msgstr ""

#: C/basic.xml:1297(para) 
msgid "You still have to trust the authors of the software not to do anything evil, but that is the case regardless of whether the original is changed."
msgstr ""

#: C/basic.xml:1301(para) 
msgid "The .diff.gz"
msgstr ""

#: C/basic.xml:1303(para) 
msgid "The option to use the .diff.gz to reflect changes to the original tarball already exists, so it is easy to make changes without touching the original tarball."
msgstr ""

#: C/basic.xml:1310(emphasis) 
msgid "It is acceptable to change the original tarball if:"
msgstr ""

#: C/basic.xml:1315(para) 
msgid "it contains non-free parts that cannot be redistributed. Remove those parts and note it somewhere in the packaging. Often such packages use \"dfsg\" (which stands for Debian Free Software Guidelines) in the package name or versioning to indicate that non-free parts have been removed."
msgstr ""

#: C/basic.xml:1321(para) 
msgid "the authors only provide bzip2'ed source."
msgstr ""

#: C/basic.xml:1324(para) 
msgid "Just <application>bunzip2</application> the .tar.bz2 and <application>gzip -9 </application> the resulting tar."
msgstr ""

#: C/basic.xml:1328(para) 
msgid "The md5sums of the .tar you provide and the original .tar must match!"
msgstr ""

#: C/basic.xml:1331(para) 
msgid "Eventually provide a get-orig-source rule in debian/rules that does this conversion automatically."
msgstr ""

#: C/basic.xml:1338(para) 
msgid "Directly imported from SVN"
msgstr ""

#: C/basic.xml:1340(para) 
msgid "Provide get-orig-source in debian/rules."
msgstr ""

#: C/basic.xml:1346(emphasis) 
msgid "not"
msgstr ""

#: C/basic.xml:1346(emphasis) 
msgid "The following are <placeholder-1/> reasons to change the original tarball:"
msgstr ""

#: C/basic.xml:1351(para) 
msgid "Wrong Directory Layout"
msgstr ""

#: C/basic.xml:1353(para) 
msgid "<application>dpkg-source</application> is quite flexible and manages to produce the correct directory layout even if:"
msgstr ""

#: C/basic.xml:1359(para) 
msgid "The directory inside the tarball is not named &lt;upstream&gt;-&lt;version&gt;."
msgstr ""

#: C/basic.xml:1362(para) 
msgid "There is no subdirectory inside the tarball"
msgstr ""

#: C/basic.xml:1367(para) 
msgid "Files need to be removed to keep the .diff.gz small; for example, files created by autotools. Everything that needs to be deleted should be removed in the <application>clean</application> rule. Since the .diff.gz is created with diff -u, you will not see removed files in the .diff.gz."
msgstr ""

#: C/basic.xml:1373(para) 
msgid "Files need to be modified. Files that need to be modified should to go into .diff.gz. That is its purpose!"
msgstr ""

#: C/basic.xml:1376(para) 
msgid "Wrong permissions on files. You can use <filename>debian/rules</filename> to do this."
msgstr ""

#: C/basic.xml:1382(para) 
msgid "What do I do with a .orig.tar.gz which already includes a <filename>debian/</filename> dir?"
msgstr ""

#: C/basic.xml:1385(para) 
msgid "Do not repackage it. You can ask the authors to delete the debian/ dir and provide a diff.gz instead. This makes it easier to review the authors' work, and it separates packaging from program source."
msgstr ""

#: C/basic.xml:1390(para) 
msgid "It's always a good idea to contact the program's authors and ask them if they can correct autoconf issues, directory layout, old Free Software Foundation address in COPYRIGHT files, or other things that are not specific to the packaging but would be convenient for you so you do not need to \"patch\" the source in .diff.gz."
msgstr ""

#: C/basic.xml:1399(title) 
msgid "Copyright Information"
msgstr ""

#: C/basic.xml:1401(para) 
msgid "The <filename>debian/copyright</filename> file should contain:"
msgstr ""

#: C/basic.xml:1405(para) 
msgid "the licensing information for <emphasis>all</emphasis> files in the source. Sometimes authors put a license in <filename>COPYING</filename> but some files in their source have different licensing information."
msgstr ""

#: C/basic.xml:1410(para) 
msgid "the copyright holder(s) and year(s)."
msgstr ""

#: C/basic.xml:1412(para) 
msgid "the <emphasis>entire</emphasis> license unless it is one of the licenses found in <filename>/usr/share/common-licenses/</filename>, in which case you should just include the preamble."
msgstr ""

#: C/appendix.xml:15(title) 
msgid "Appendix"
msgstr ""

#: C/appendix.xml:19(title) 
msgid "Additional Resources"
msgstr ""

#: C/appendix.xml:21(emphasis) 
msgid "Debian Resources"
msgstr ""

#: C/appendix.xml:24(para) 
msgid "<ulink url=\"http://www.debian.org/doc/manuals/maint-guide/\"> Debian New Maintainers Guide</ulink> - Good resource for learning to package."
msgstr ""

#: C/appendix.xml:29(para) 
msgid "<ulink url=\"http://www.debian.org/doc/debian-policy/\"> Debian Policy</ulink> - The essential Policy manual for Debian and Debian-based distros."
msgstr ""

#: C/appendix.xml:34(para) 
msgid "<ulink url=\"http://www.debian.org/doc/manuals/developers-reference/\"> Debian Developer's Reference</ulink> - Specific information for Debian Developers but has some items of interest for packagers."
msgstr ""

#: C/appendix.xml:40(para) 
msgid "<ulink url=\"http://www.netfort.gr.jp/~dancer/column/libpkg-guide/libpkg-guide.html\">Library Packaging Guide</ulink> - Guide for packaging libraries."
msgstr ""

#: C/appendix.xml:44(para) 
msgid "<ulink url=\"http://women.alioth.debian.org/wiki/index.php/English/PackagingTutorial\">Debian Women Packaging Tutorial</ulink> - Another good introduction to Debian packaging."
msgstr ""

#: C/appendix.xml:51(emphasis) 
msgid "Other Resources"
msgstr ""

#: C/appendix.xml:55(ulink) 
msgid "IBM Packaging Tutorial"
msgstr ""

#: C/appendix.xml:59(ulink) 
msgid "Duckcorp CDBS Documentation"
msgstr ""

#: C/appendix.xml:63(ulink) 
msgid "Ubuntu MOTU Documentation"
msgstr ""

#: C/appendix.xml:68(ulink) 
msgid "Kubuntu Packaging Guide"
msgstr ""

#: C/appendix.xml:77(title) 
msgid "Chroot Environment"
msgstr ""

#: C/appendix.xml:79(para) 
msgid "A chroot environment is commonly used for development-related work and is basically like a virtual install of build-related software. It is always a dh_installlogcheck good idea to do development work in a chroot environment, as development work often requires the installation of development packages (whose main purpose is for building packages). An example of this is when a certain application requires the development version of a library to build (e.g. <application>libabc-dev</application>). A normal user would not require the development version of <application>libabc</application>. Thus it is better to install such development packages in a chroot, so as to leave the normal operating environment clean and uncluttered. First, install the required packages:"
msgstr ""

#: C/appendix.xml:93(screen) 
#, no-wrap
msgid "sudo apt-get install dchroot debootstrap"
msgstr ""

#: C/appendix.xml:95(para) 
msgid "Make sure to install the version of <application>debootstrap</application> from the <phrase>Ubuntu</phrase> release you are trying to create the chroot for."
msgstr ""

#: C/appendix.xml:100(para) 
msgid "The next steps are to create, configure, and enter the chroot environment."
msgstr ""

#: C/appendix.xml:103(screen) 
#, no-wrap
msgid "\nsudo mkdir /var/chroot\necho \"mychroot /var/chroot\" | sudo tee -a /etc/dchroot.conf\nsudo debootstrap --variant=buildd dapper /var/chroot/ http://archive.ubuntu.com/ubuntu/\nsudo cp /etc/resolv.conf /var/chroot/etc/resolv.conf\nsudo cp /etc/apt/sources.list /var/chroot/etc/apt/\nsudo chroot /var/chroot/"
msgstr ""

#: C/appendix.xml:111(para) 
msgid "In order to be able to use apt in the chroot, add Ubuntu sources to the chroot's apt sources. For the moment ignore any warnings about package authentication:"
msgstr ""

#: C/appendix.xml:115(screen) 
#, no-wrap
msgid "\necho \"deb     http://archive.ubuntu.com/ubuntu dapper main restricted \\\n\tuniverse multiverse\" &gt; /etc/apt/sources.list\necho \"deb-src http://archive.ubuntu.com/ubuntu dapper main restricted \\\n\tuniverse multiverse\" &gt;&gt; /etc/apt/sources.list\napt-get update\napt-get install build-essential dh-make automake pbuilder gnupg lintian \\\n\twget debconf devscripts gnupg sudo\napt-get update\nexit"
msgstr ""

#: C/appendix.xml:126(para) 
msgid "Run the following to configure locales:"
msgstr ""

#: C/appendix.xml:128(screen) 
#, no-wrap
msgid "\nsudo chroot /var/chroot/\napt-get install locales dialog\ndpkg-reconfigure locales\nexit"
msgstr ""

#: C/appendix.xml:134(para) 
msgid "Next, fix the user and root passwords for the chroot environment. The last line below is to avoid sudo warnings when resolving in the chroot environment:"
msgstr ""

#: C/appendix.xml:138(screen) 
#, no-wrap
msgid "\nsudo cp /etc/passwd /var/chroot/etc/\nsudo sed 's/\\([^:]*\\):[^:]*:/\\1:*:/' /etc/shadow | sudo tee /var/chroot/etc/shadow\nsudo cp /etc/group /var/chroot/etc/\nsudo cp /etc/hosts /var/chroot/etc/"
msgstr ""

#: C/appendix.xml:144(para) 
msgid "To enable sudo, set up your root password and the first sudo user in the admin group (for the chroot environment). In the following commands, substitute \"&lt;user&gt;\" with the username that will be used in the chroot environment:"
msgstr ""

#: C/appendix.xml:149(screen) 
#, no-wrap
msgid "\nsudo cp /etc/sudoers /var/chroot/etc/\nsudo chroot /var/chroot/\ndpkg-reconfigure passwd\npasswd &lt;user&gt;\nexit"
msgstr ""

#: C/appendix.xml:156(para) 
msgid "The system fstab needs to be modified so that the chroot environment will have access to the system home directories, temp directory, etc. Note that the actual system home directory is used in the chroot environment."
msgstr ""

#: C/appendix.xml:160(screen) 
#, no-wrap
msgid "sudo editor /etc/fstab"
msgstr ""

#: C/appendix.xml:162(para) 
msgid "Add these lines:"
msgstr ""

#: C/appendix.xml:163(screen) 
#, no-wrap
msgid "\n/home           /var/chroot/home        none    bind            0       0\n/tmp            /var/chroot/tmp         none    bind            0       0 \nproc-chroot     /var/chroot/proc        proc    defaults        0       0 \ndevpts-chroot   /var/chroot/dev/pts     devpts  defaults        0       0 "
msgstr ""

#: C/appendix.xml:169(para) 
msgid "Mount the new fstab entries"
msgstr ""

#: C/appendix.xml:171(screen) 
#, no-wrap
msgid "sudo mount -a"
msgstr ""

#: C/appendix.xml:173(para) 
msgid "The default bash profile includes chroot information in the prompt. To make this visible:"
msgstr ""

#: C/appendix.xml:176(screen) 
#, no-wrap
msgid "\nsudo chroot /var/chroot/\necho mychroot &gt; /etc/debian_chroot\nexit"
msgstr ""

#: C/appendix.xml:181(para) 
msgid "Now when you want to use your chroot (you may omit the -c mychroot if there's only one, or you just want the first one in <filename>/etc/dchroot.conf</filename>). The -d parameter means that your environment will be preserved. This is generally useful if you want chrooted applications to seamlessly use your X server, your session manager, etc."
msgstr ""

#: C/appendix.xml:188(screen) 
#, no-wrap
msgid "dchroot -c mychroot -d"
msgstr ""

#: C/appendix.xml:193(title) 
msgid "<application>dh_make</application> example files"
msgstr ""

#: C/appendix.xml:197(term) 
msgid "Readme.Debian"
msgstr ""

#: C/appendix.xml:199(para) 
msgid "This file is used to document changes that you have made to the original upstream source that othere people might need to know about or information specific to Debian or <phrase>Ubuntu</phrase>."
msgstr ""

#: C/appendix.xml:207(term) 
msgid "conffiles.ex"
msgstr ""

#: C/appendix.xml:209(para) 
msgid "If the package installs a configuration file, when the package is upgraded <application>dpkg</application> can prompt a user whether to keep their version, if modified, or install the new version for the package. Such configuration files should be listed in <filename>conffiles</filename> (one per line). Do not list configuration files that are only modified by the package or have to be set up by the user to work."
msgstr ""

#: C/appendix.xml:223(term) 
msgid "cron.d.ex"
msgstr ""

#: C/appendix.xml:225(para) 
msgid "If your package requires regularly scheduled tasks to operate properly, you an use this file to set it up. If you use this file rename it to <filename>cron.d</filename>."
msgstr ""

#: C/appendix.xml:233(term) 
msgid "dirs"
msgstr ""

#: C/appendix.xml:235(para) 
msgid "This file specifies the directories which are need but the normal installation procedure (<application>make install</application>application) somehow doesn't create."
msgstr ""

#: C/appendix.xml:243(term) 
msgid "docs"
msgstr ""

#: C/appendix.xml:245(para) 
msgid "This file specifies the file names of documentation files that <application>dh_installdocs</application> will install into the temporary directory."
msgstr ""

#: C/appendix.xml:253(term) 
msgid "emacsen-*.ex"
msgstr ""

#: C/appendix.xml:255(para) 
msgid "This file specifies Emacs files that will be bytecompiled at install time. They are installed into the temporary directory by <application>dh_installemacsen</application>."
msgstr ""

#: C/appendix.xml:263(term) 
msgid "init.d.ex"
msgstr ""

#: C/appendix.xml:265(para) 
msgid "If your package is a daemon that needs to be run at system startup rename this file to <filename>init.d</filename> and adjust it toyour needs."
msgstr ""

#: C/appendix.xml:273(term) 
msgid "manpage.1.ex and manpage.sgml.ex"
msgstr ""

#: C/appendix.xml:275(para) 
msgid "These files are templates for <application>man</application> pages if the package does not already have one."
msgstr ""

#: C/appendix.xml:282(term) 
msgid "menu.ex"
msgstr ""

#: C/appendix.xml:284(para) 
msgid "This file is used to add your package to the Debian menu. <phrase>Ubuntu</phrase> does not use Debian menu files but uses the <ulink url=\"http://www.freedesktop.org\">freedesktop.org</ulink> standard <ulink url=\"http://standards.freedesktop.org/desktop-entry-spec/latest/\">.desktop</ulink> files."
msgstr ""

#: C/appendix.xml:295(term) 
msgid "watch.ex"
msgstr ""

#: C/appendix.xml:297(para) 
msgid "The package maintainer can use the <application>uscan</application> program and a <filename>watch</filename> file to check for a new upstream source tarball."
msgstr ""

#: C/appendix.xml:305(term) 
msgid "ex.package.doc-base"
msgstr ""

#: C/appendix.xml:307(para) 
msgid "This file is used to register your package's documentation (other than <application>man</application> and <application>info</application> pages) with <application>doc-base</application>."
msgstr ""

#: C/appendix.xml:316(term) 
msgid "postinst.ex, preinst.ex, postrm.ex, and prerm.ex"
msgstr ""

#: C/appendix.xml:318(para) 
msgid "These maintainer scripts are run by <application>dpkg</application> when the package is installed, upgraded, or removed."
msgstr ""

#: C/appendix.xml:326(para) 
msgid "For more details refer to the <ulink url=\"http://www.debian.org/doc/maint-guide/ch-dother.en.html\">Debian New Maintainer's Guide</ulink>."
msgstr ""

#: C/appendix.xml:335(title) 
msgid "List of <application>debhelper</application> scripts"
msgstr ""

#: C/appendix.xml:340(para) 
msgid "dh_builddeb"
msgstr ""

#: C/appendix.xml:344(para) 
msgid "dh_clean"
msgstr ""

#: C/appendix.xml:348(para) 
msgid "dh_compress"
msgstr ""

#: C/appendix.xml:352(para) 
msgid "dh_desktop"
msgstr ""

#: C/appendix.xml:356(para) 
msgid "dh_fixperms"
msgstr ""

#: C/appendix.xml:360(para) 
msgid "dh_gconf"
msgstr ""

#: C/appendix.xml:364(para) 
msgid "dh_gencontrol"
msgstr ""

#: C/appendix.xml:368(para) 
msgid "dh_iconcache"
msgstr ""

#: C/appendix.xml:372(para) 
msgid "dh_install"
msgstr ""

#: C/appendix.xml:376(para) 
msgid "dh_installcatalogs"
msgstr ""

#: C/appendix.xml:380(para) 
msgid "dh_installchangelogs"
msgstr ""

#: C/appendix.xml:384(para) 
msgid "dh_installcron"
msgstr ""

#: C/appendix.xml:388(para) 
msgid "dh_installdeb"
msgstr ""

#: C/appendix.xml:392(para) 
msgid "dh_installdebconf"
msgstr ""

#: C/appendix.xml:396(para) 
msgid "dh_installdefoma"
msgstr ""

#: C/appendix.xml:400(para) 
msgid "dh_installdirs"
msgstr ""

#: C/appendix.xml:404(para) 
msgid "dh_installdocs"
msgstr ""

#: C/appendix.xml:408(para) 
msgid "dh_installemacsen"
msgstr ""

#: C/appendix.xml:412(para) 
msgid "dh_installexamples"
msgstr ""

#: C/appendix.xml:416(para) 
msgid "dh_installinfo"
msgstr ""

#: C/appendix.xml:420(para) 
msgid "dh_installinit"
msgstr ""

#: C/appendix.xml:424(para) 
msgid "dh_installlogcheck"
msgstr ""

#: C/appendix.xml:428(para) 
msgid "dh_installlogrotate"
msgstr ""

#: C/appendix.xml:432(para) 
msgid "dh_installman"
msgstr ""

#: C/appendix.xml:436(para) 
msgid "dh_installmenu"
msgstr ""

#: C/appendix.xml:440(para) 
msgid "dh_installmime"
msgstr ""

#: C/appendix.xml:444(para) 
msgid "dh_installmodules"
msgstr ""

#: C/appendix.xml:448(para) 
msgid "dh_installpam"
msgstr ""

#: C/appendix.xml:452(para) 
msgid "dh_installppp"
msgstr ""

#: C/appendix.xml:456(para) 
msgid "dh_installtexfonts"
msgstr ""

#: C/appendix.xml:460(para) 
msgid "dh_installwm"
msgstr ""

#: C/appendix.xml:464(para) 
msgid "dh_installxfonts"
msgstr ""

#: C/appendix.xml:468(para) 
msgid "dh_installxmlcatalogs"
msgstr ""

#: C/appendix.xml:472(para) 
msgid "dh_link"
msgstr ""

#: C/appendix.xml:476(para) 
msgid "dh_listpackages"
msgstr ""

#: C/appendix.xml:480(para) 
msgid "dh_makeshlibs"
msgstr ""

#: C/appendix.xml:484(para) 
msgid "dh_md5sums"
msgstr ""

#: C/appendix.xml:488(para) 
msgid "dh_perl"
msgstr ""

#: C/appendix.xml:492(para) 
msgid "dh_python"
msgstr ""

#: C/appendix.xml:496(para) 
msgid "dh_scrollkeeper"
msgstr ""

#: C/appendix.xml:500(para) 
msgid "dh_shlibdeps"
msgstr ""

#: C/appendix.xml:504(para) 
msgid "dh_strip"
msgstr ""

#: C/appendix.xml:508(para) 
msgid "dh_testdir"
msgstr ""

#: C/appendix.xml:512(para) 
msgid "dh_testroot"
msgstr ""

#: C/appendix.xml:516(para) 
msgid "dh_usrlocal"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: C/appendix.xml:0(None) 
msgid "translator-credits"
msgstr ""

