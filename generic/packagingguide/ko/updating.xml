<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
        "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % pg-common SYSTEM "../pg-common.ent">
%pg-common;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
<!ENTITY ubuntu '<phrase>Ubuntu</phrase>'>
]>
<chapter id="updating-chap" status="writing">
 		<title>패키지 업데이트 하기</title>

			<para>만약 여러분이 리눅스 배포판을 어느 기간 동안이라도 사용해 보았다면, 때때로 프로그램들에 버그들이 있음을 알았을 겁니다. 데비안과 &ubuntu; 배포판에서는, 종종 소스 코드를 패치하여 패키징을 하는 것으로 버그들이 고쳐집니다. 때로는 패키징 자체에 있는 버그들이 장애를 일으킬 수도 있습니다.</para>

			<para>프로그램 소스 코드를 패치하기 위하여, 여러분은 간단히 현재의 &ubuntu; 소스 패키지를 (<application>apt-get source</application>로) 내려받을 수 있고 필요한 변경을 만들 수 있습니다. 그런 후에 새 리비전을 명시하기 위하여 <application>dch -i</application> 또는 <application>dch -v &lt;version&gt;-&lt;revision&gt;</application>을 사용하여 <filename>debian/changelog</filename>에 새 항목을 추가할 수 있습니다. 소스 디렉토리에서 <application>debuild -S</application>를 실행할 때 여러분의 변경을 포함하는 새로운 소스 패키지를 <filename>.diff.gz</filename>과 함께 상위 디렉토리에 가지게 됩니다. 이 방법의 한 가지 문제는 소스와 패치 간의 구분이 불분명하다는 것입니다.</para>

			<para>이 문제의 해결책은 소스 코드의 변경을 각각의 <filename>debian</filename> 디렉토리로 저장할 패치들로 나누는 것 입니다. 하나의 이러한 패치 시스템은 <application>dpatch</application> 로 불려집니다. 패치들은 <filename>debian/patches/</filename> 디렉토리에 저장되고 특별한 형식을 가지고 있습니다.</para>

			<para><application>dpatch</application> 를 만들기 위해, 다음의 단계를 순서적으로 수행 합니다.</para>

			<para>임시 작업 장소를 만들고 현재 소스 디렉토리의 두 복사본을 만듭니다:</para>
			
			<screen>
mkdir tmp
cd tmp
cp -a ../&lt;package&gt;-&lt;version&gt; . 
cp -a &lt;package&gt;-&lt;version&gt; &lt;package&gt;-&lt;version&gt;.orig 
</screen>

			<para><filename>&lt;package&gt;-&lt;version&gt;</filename> 디렉토리에서 변경을 합니다.</para>

			<para><application>diff</application> 를 사용하여 패치를 만들고 <filename>debian/patches</filename> 디렉토리에 그것을 가져다 놓습니다:</para>

			<screen>
diff -Nru &lt;package&gt;-&lt;version&gt;.orig &lt;package&gt;-&lt;version&gt; &gt; patch-file
</screen>

			<para><application>dpatch patch-template</application> 을 사용하여 <application>dpatch</application> 와 dpatch 들을 나열하는 <filename>00list</filename> 로 이름한 파일을 만듭니다.</para>
			<screen>
ddpatch patch-template -p "01_patchname" "patch-file description" \
	&lt; patch-file &gt; 01_patchname.dpatch
echo 01_patchname.dpatch &gt;00list</screen>

			<para>여러분은 이제 소스 패키지의 <filename>debian/patches</filename> 디렉토리에 <filename>01_patchname.dpatch</filename> 와 <filename>00list</filename> 를 위치 시킬 수 있습니다:</para>

			<screen>
mkdir ../&lt;package&gt;-&lt;version&gt;/debian/patches
cp 01_patchname.dpatch 00list ../&lt;package&gt;-&lt;version&gt;/debian/patches
cd ..
rm -rf tmp
			</screen>

			<note><para>여러분은 또한 <application>dpatch-edit-patch</application> 를 사용하여 이미 존재하는 패치를 편집할 수 있습니다.</para></note>
			
		<para>모든 변경이 만들어지고, changelog 항목도 추가되고, (필요한 경우) <application>dpatch</application> 도 <filename>debian/control</filename> 파일에 더해진 후, 여러분은 <application>debuild -S</application> 를 가지고 소스 패키지를 다시 만들 수 있습니다.</para>

		<para>&ubuntu; 저장소로 고쳐진 소스 패키지를 업로드 위하여, 여러분은 업로드 권한을 가진 사람에게 여러분의 소스 패키지를 후원받는 것이 필요합니다. 좀 더 자세한 것은 <xref linkend="ubuntu-upload"/>를 보십시오. 때로는, 전체 소스 패키지(.diff.gz, .dsc, and .orig.tar.gz)를 주는 것보다, 현재 저장소에 있는 소스 패키지와 여러분이 고친 소스 패키지 간의 차이만을 주는 것이 보다 쉽고 효과적일 수 있습니다. <application>debdiff</application>를 사용하는 것은 <application>diff</application>를 사용하는 것과 비슷하지만 패키징을 위하여 특별히 만들어진 것입니다. 다음과 같이 소스 패키지를 <application>debdiff</application> 할 수 있습니다:</para>

		<screen>
debdiff &lt;oldpackage&gt;.dsc &lt;newpackage&gt;.dsc &gt; package.debdiff
		</screen>

		<para>또는 다음에 의해 바이너리 패키지:</para>

		<screen>
debdiff &lt;oldpackage&gt;.deb &lt;newpackage&gt;.deb &gt; package.debdiff
		</screen>
	
		<para>Debdiff 들을 버그 리포트에 첨부하는 것은 아주 좋고 스폰서가 업로드를 하도록 준비 합니다.</para>
		
</chapter>

