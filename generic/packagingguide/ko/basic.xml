<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
<!-- NAMES --><!ENTITY canonical-name "Canonical Ltd.">
<!ENTITY project-name "Ubuntu Documentation Project">
<!ENTITY ubuntu "<phrase>Ubuntu</phrase>">
<!-- VERSIONS --><!ENTITY distro-version "Dapper Drake">
<!ENTITY distro-rev "6.06">
<!ENTITY distro-release-date "June 2006">
<!ENTITY linux-kernel-version "2.6.15">
<!ENTITY gcc-version "4.0.3">
<!ENTITY glibc-version "2.3.6">
<!ENTITY python-version "2.4.3">
<!-- AUTHORS --><!ENTITY author-ubuntu-documentation-project SYSTEM "../common/authors/ubuntu-documentation-project.xml">
<!ENTITY author-christoph-haas SYSTEM "../common/authors/christoph-haas.xml">
<!ENTITY author-alexander-poslavsky SYSTEM "../common/authors/alexander-poslavsky.xml">
<!ENTITY author-alan-hood SYSTEM "../common/authors/alan-hood.xml">
<!ENTITY author-johnathon-hornbeck SYSTEM "../common/authors/johnathon-hornbeck.xml">
<!ENTITY author-nick-loeve SYSTEM "../common/authors/nick-loeve.xml">
<!ENTITY author-gordon-ingram SYSTEM "../common/authors/gordon-ingram.xml">
<!ENTITY author-sean-wheller SYSTEM "../common/authors/sean-wheller.xml">
<!ENTITY author-enrico-zini SYSTEM "../common/authors/enrico-zini.xml">
<!ENTITY author-kevin-muligan SYSTEM "../common/authors/kevin-muligan.xml">
<!ENTITY author-ari-torhamo SYSTEM "../common/authors/ari-torhamo.xml">
<!ENTITY author-jeff-schering SYSTEM "../common/authors/jeff-schering.xml">
<!ENTITY author-corey-burger SYSTEM "../common/authors/corey-burger.xml">
<!ENTITY author-niel-tallim SYSTEM "../common/authors/niel-tallim.xml">
<!ENTITY author-henry-meyerding SYSTEM "../common/authors/henry-meyerding.xml">
<!ENTITY author-matthew-east SYSTEM "../common/authors/matthew-east.xml">
<!ENTITY author-jerome-gotangco SYSTEM "../common/authors/jerome-gotangco.xml">
<!ENTITY author-johnathan-jesse SYSTEM "../common/authors/johnathan-jesse.xml">
<!ENTITY author-greg-taylor SYSTEM "../common/authors/greg-taylor.xml">
<!ENTITY author-troy-williams SYSTEM "../common/authors/troy-williams.xml">
<!ENTITY author-matt-galvin SYSTEM "../common/authors/matt-galvin.xml">
<!ENTITY author-robert-stoffers SYSTEM "../common/authors/robert-stoffers.xml">
<!ENTITY author-jordan-mantha SYSTEM "../common/authors/jordan-mantha.xml">
<!ENTITY author-venkat-raghavan SYSTEM "../common/authors/venkat-raghavan.xml">
<!ENTITY author-brian-burger SYSTEM "../common/authors/brian-burger.xml">
<!ENTITY author-rocco-stanzione SYSTEM "../common/authors/rocco-stanzione.xml">
<!ENTITY glossary SYSTEM "../common/C/glossary.xml">
<!-- LEGAL URLs --><!ENTITY gpl-url '<ulink url="http://www.gnu.org/licenses/gpl.html">GNU General Public License</ulink>'>
<!ENTITY cc "http://creativecommons.org/">
<!ENTITY cc-attrib '<ulink url="http://creativecommons.org/licenses/by-sa/2.0/">Attribution-ShareAlike 2.0</ulink>'>
<!ENTITY cc-fulldeed-url "http://creativecommons.org/licenses/by-sa/2.0/legalcode/">
<!ENTITY fdl-url '<ulink url="http://www.gnu.org/copyleft/fdl.html">GNU Free Documentation License</ulink>'>
<!ENTITY cc-disclaimer-url "http://creativecommons.org/licenses/disclaimer-popup?lang=en">
<!-- CANONICAL URL RESOURCES --><!ENTITY canonical-url "http://www.canonical.com">
<!-- UBUNTU URL RESOURCES --><!ENTITY ubuntu-packages "http://packages.ubuntu.com">
<!ENTITY ubuntu-dpkgfile "ubuntu5.10.tar">
<!ENTITY ubuntu-web "http://www.ubuntu.com">
<!ENTITY ubuntu-main "http://www.ubuntu.com">
<!ENTITY ubuntu-download "http://www.ubuntu.com/download">
<!ENTITY ubuntu-forums "http://www.ubuntu.com/community/forums">
<!ENTITY ubuntu-components "http://www.ubuntu.com/ubuntu/components">
<!ENTITY ubuntu-lists "http://lists.ubuntu.com">
<!ENTITY ubuntu-wiki "http://wiki.ubuntu.com">
<!ENTITY ubuntu-irc "irc.freenode.net channel #ubuntu">
<!ENTITY ubuntu-bugzilla "https://launchpad.net/distros/ubuntu/+bugs">
<!ENTITY ubuntu-doc-bugs "https://launchpad.net/products/ubuntu-doc/+bugs">
<!ENTITY ubuntu-paidsupport "http://www.ubuntu.com/support/supportoptions/paidsupport">
<!ENTITY ubuntu-freesupport "http://www.ubuntu.com/support/supportoptions/freesupport">
<!ENTITY ubuntu-comments "http://www.ubuntuforums.org/showthread.php?p=21787">
<!ENTITY ubuntu-documentation "http://help.ubuntu.com">
<!ENTITY ubuntu-documentation-repos "https://docteam.ubuntu.com/repos/trunk">
<!ENTITY ubuntu-doc-team "https://wiki.ubuntu.com/DocumentationTeam">
<!ENTITY ubuntu-doc-list "http://lists.ubuntu.com/mailman/listinfo/ubuntu-doc">
<!ENTITY ubuntu-shipit "http://shipit.ubuntu.com">
<!ENTITY ubuntu-launchpad "https://launchpad.ubuntu.com">
<!ENTITY ubuntu-rosetta "https://launchpad.ubuntu.com/rosetta">
<!ENTITY ubuntu-planet "http://planet.ubuntu.com">
<!ENTITY ubuntu-philosophy "http://www.ubuntu.com/ubuntu/philosophy">
<!ENTITY ubuntu-participate "http://www.ubuntu.com/community/participate/">
<!-- UBUNTU WIKI RESOURCES --><!ENTITY wiki-UserDocumentation "https://wiki.ubuntu.com/UserDocumentation">
<!ENTITY restricted-formats "https://wiki.ubuntu.com/RestrictedFormats">
<!ENTITY wiki-RestrictedFormats "https://wiki.ubuntu.com/RestrictedFormats">
<!ENTITY wiki-XChatHowto "https://wiki.ubuntu.com/XChatHowto">
<!ENTITY wiki-RootSudo "https://wiki.ubuntu.com/RootSudo">
<!ENTITY wiki-HowToGetHelp "https://wiki.ubuntu.com/HowToGetHelp">
<!ENTITY transcode "https://wiki.ubuntu.com/DVDRippingandEncoding">
<!ENTITY wiki-Wine "https://wiki.ubuntu.com/Wine">
<!ENTITY wiki-Cedega "https://wiki.ubuntu.com/Cedega">
<!ENTITY wiki-Nano "https://wiki.ubuntu.com/NanoHowto">
<!ENTITY wiki-locoteams "https://wiki.ubuntu.com/LoCoTeamList">
<!ENTITY wiki-BasicCommands "https://wiki.ubuntu.com/BasicCommands">
<!ENTITY wiki-filepermissions "https://wiki.ubuntu.com/FilePermissions">
<!-- KUBUNTU URL RESOURCES --><!ENTITY kubuntu-web "http://www.kubuntu.org">
<!ENTITY kubuntu-main "http://www.kubuntu.org">
<!ENTITY kubuntu-download "http://releases.ubuntu.com/kubuntu/">
<!ENTITY kubuntu-packages "http://packages.ubuntu.com/breezy/">
<!ENTITY kubuntu-cdpackages-nodefault "http://people.ubuntu.com/~cjwatson/seeds/kubuntu-breezy/ship">
<!ENTITY kubuntu-lists "http://lists.ubuntu.com/archives/kubuntu-users/">
<!ENTITY kubuntu-lists-users "http://lists.ubuntu.com/mailman/listinfo/kubuntu-users/">
<!ENTITY kubuntu-lists-devel "http://lists.ubuntu.com/mailman/listinfo/kubuntu-devel/">
<!ENTITY kubuntu-mirrors "http://distrowatch.com/kubuntu">
<!ENTITY kubuntu-forums "http://ubuntuforums.org/forumdisplay.php?f=68">
<!ENTITY kubuntu-forums2 "http://kubuntuforums.net">
<!ENTITY kubuntu-wiki "http://www.ubuntu.com/wiki/Kubuntu">
<!ENTITY kubuntu-irc "irc.freenode.net channel kubuntu">
<!ENTITY kubuntu-documentation-site "http://www.kubuntu.org/documentation.php">
<!ENTITY kubuntu-wiki-UserDocumentation "https://wiki.kubuntu.com/UserDocumentation">
<!-- XUBUNTU URL RESOURCES --><!ENTITY xubuntu-irc "irc.freenode.net channel xubuntu">
<!-- DEBIAN RESOURCES --><!ENTITY debian-apt "http://www.debian.org/doc/user-manuals#apt-howto">
<!-- EXTERNAL URL RESOURCES --><!ENTITY linmodem "http://www.linmodems.org/">
<!ENTITY gnome "http://www.gnome.org/">
<!ENTITY linuxorg "http://www.linux.org/">
<!ENTITY ooo "http://www.openoffice.org/">
<!ENTITY kde "http://www.kde.org/">
<!ENTITY lugww "http://lugww.counter.li.org/">
<!ENTITY ubuntu-watch "http://distrowatch.com/ubuntu/">
<!ENTITY realplayer-download "http://www.real.com/linux/">
<!ENTITY nvu-download "http://www.nvu.com/download.html">
<!ENTITY sunjava-download "http://java.sun.com/j2se/1.5.0/download.jsp">
<!ENTITY xorg "http://www.x.org">
<!ENTITY dyndns "http://www.dyndns.org">
<!ENTITY shoutcast "http://www.shoutcast.com/">
<!ENTITY freedomtoaster "http://www.freedomtoaster.org/">
<!-- ubuntu-screenshots TODO --><!ENTITY kubuntu-screenshots "http://shots.osdir.com/slideshows/slideshow.php?release=306&amp;slide=1">
<!ENTITY mozilla "http://www.mozilla.org/">
<!ENTITY mozilla-firefox "http://www.mozilla.org/products/firefox/">
<!ENTITY gnu "http://www.gnu.org/">
<!ENTITY gnu-philosophy "http://www.gnu.org/philosophy/">
<!ENTITY win4lin "http://www.win4lin.com">
<!ENTITY codeweavers "http://www.codeweavers.com">
<!ENTITY kernel "http://www.kernel.org">
<!ENTITY google "http://www.google.com">
<!ENTITY kdelook " http://www.kde-look.org">
<!-- this entity controls the url for addons--><!ENTITY java-download "http://java.sun.com/j2se/1.5.0/download.jsp">
<!ENTITY skype-deb "skype_1.2.0.17-1_i386.deb">
<!ENTITY skype-download "http://www.skype.com/go/getskype-linux-deb">
<!ENTITY scanmodem-gz "scanModem.gz">
<!ENTITY scanmodem-url "http://linmodems.technion.ac.il/packages/scanModem.gz">
<!ENTITY ext2fs-url "http://www.fs-driver.org/index.html">
<!ENTITY mvb-tar "mvb_1.6.tgz">
<!ENTITY mvb-url "http://www.xscd.com/pub/mvb/&mvb-tar;">
<!-- TLDP --><!ENTITY ldp-pre-install-check "http://tldp.org/HOWTO/Pre-Installation-Checklist/">
<!-- LANGUAGES (sorted by two letter code)--><!ENTITY Afar "aa">
<!ENTITY Abkhazian "ab">
<!ENTITY Afrikaans "af">
<!ENTITY Amharic "af">
<!ENTITY Arabic "ar">
<!ENTITY Assamese "as">
<!ENTITY Aymara "ay">
<!ENTITY Azerbaijani "az">
<!ENTITY Bashkir "ba">
<!ENTITY Byelorussian "be">
<!ENTITY Bulgarian "bg">
<!ENTITY Bihari "bh">
<!ENTITY Bislama "bi">
<!ENTITY Bangla "bn">
<!ENTITY Bengali "bn">
<!ENTITY Tibetan "bo">
<!ENTITY Breton "br">
<!ENTITY Catalan "ca">
<!ENTITY Corsican "co">
<!ENTITY Czech "cs">
<!ENTITY Welsh "cy">
<!ENTITY Danish "da">
<!ENTITY German "de">
<!ENTITY Bhutani "dz">
<!ENTITY Greek "el">
<!-- <!ENTITY EnglishAmerican 'en'> --><!ENTITY EnglishAmerican "C">
<!ENTITY Esperanto "eo">
<!ENTITY Spanish "es">
<!ENTITY Estonian "et">
<!ENTITY Basque "eu">
<!ENTITY Persian "fa">
<!ENTITY Finnish "fi">
<!ENTITY Fiji "fj">
<!ENTITY Faeroese "fo">
<!ENTITY French "fr">
<!ENTITY Frisian "fy">
<!ENTITY Irish "ga">
<!ENTITY Gaelic "gd">
<!ENTITY ScotsGaelic "gd">
<!ENTITY Galician "gl">
<!ENTITY Guarani "gn">
<!ENTITY Gujarati "gu">
<!ENTITY Hausa "ha">
<!ENTITY Hindi "hi">
<!ENTITY Croatian "hr">
<!ENTITY Hungarian "hu">
<!ENTITY Armenian "hy">
<!ENTITY Interlingua "ia">
<!ENTITY Interlingue "ie">
<!ENTITY Inupiak "ik">
<!ENTITY Indonesian "in">
<!ENTITY Icelandic "is">
<!ENTITY Italian "it">
<!ENTITY Hebrew "iw">
<!ENTITY Japanese "ja">
<!ENTITY Yiddish "ji">
<!ENTITY Javanese "jw">
<!ENTITY Georgian "ka">
<!ENTITY Kazakh "kk">
<!ENTITY Greenlandic "kl">
<!ENTITY Cambodian "km">
<!ENTITY Kannada "kn">
<!ENTITY Korean "ko">
<!ENTITY Kashmiri "ks">
<!ENTITY Kurdish "ku">
<!ENTITY Kirghiz "ky">
<!ENTITY Latin "la">
<!ENTITY Lingala "ln">
<!ENTITY Laothian "lo">
<!ENTITY Lithuanian "lt">
<!ENTITY Latvian "lv">
<!ENTITY Lettish "lv">
<!ENTITY Malagasy "mg">
<!ENTITY Maori "mi">
<!ENTITY Macedonian "mk">
<!ENTITY Malayalam "ml">
<!ENTITY Mongolian "mn">
<!ENTITY Moldavian "mo">
<!ENTITY Marathi "mr">
<!ENTITY Malay "ms">
<!ENTITY Maltese "mt">
<!ENTITY Burmese "my">
<!ENTITY Nauru "na">
<!ENTITY Nepali "ne">
<!ENTITY Dutch "nl">
<!ENTITY Norwegian "no">
<!ENTITY Occitan "oc">
<!ENTITY Afan "om">
<!ENTITY Oromo "om">
<!ENTITY Oriya "or">
<!ENTITY Punjabi "pa">
<!ENTITY Polish "pl">
<!ENTITY Pushto "ps">
<!ENTITY Pashto "ps">
<!ENTITY Portuguese "pt">
<!ENTITY Quechua "qu">
<!ENTITY Rhaeto-Romance "rm">
<!ENTITY Kirundi "rn">
<!ENTITY Romanian "ro">
<!ENTITY Russian "ru">
<!ENTITY Kinyarwanda "rw">
<!ENTITY Sanskrit "sa">
<!ENTITY Sindhi "sd">
<!ENTITY Sangro "sg">
<!ENTITY Serbo-Croatian "sh">
<!ENTITY Singhalese "si">
<!ENTITY Slovak "sk">
<!ENTITY Slovenian "sl">
<!ENTITY Samoan "sm">
<!ENTITY Shona "sn">
<!ENTITY Somali "so">
<!ENTITY Albanian "sq">
<!ENTITY Serbian "sr">
<!ENTITY Siswati "ss">
<!ENTITY Sesotho "st">
<!ENTITY Sudanese "su">
<!ENTITY Swedish "sv">
<!ENTITY Swahili "sw">
<!ENTITY Tamil "ta">
<!ENTITY Tegulu "te">
<!ENTITY Tajik "tg">
<!ENTITY Thai "th">
<!ENTITY Tigrinya "ti">
<!ENTITY Turkmen "tk">
<!ENTITY Tagalog "tl">
<!ENTITY Setswana "tn">
<!ENTITY Tonga "to">
<!ENTITY Turkish "tr">
<!ENTITY Tsonga "ts">
<!ENTITY Tatar "tt">
<!ENTITY Twi "tw">
<!ENTITY Ukrainian "uk">
<!ENTITY Urdu "ur">
<!ENTITY Uzbek "uz">
<!ENTITY Vietnamese "vi">
<!ENTITY Volapuk "vo">
<!ENTITY Wolof "wo">
<!ENTITY Xhosa "xh">
<!ENTITY Yoruba "yo">
<!ENTITY Chinese "zh">
<!ENTITY Zulu "zu">
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
<!-- COMMON DOC OBJECTS --><!ENTITY copyright SYSTEM "../common/C/copyright.xml">
<!ENTITY conventions SYSTEM "../common/C/conventions.xml">
<!ENTITY feedback SYSTEM "../common/C/feedback.xml">
<!ENTITY publisher SYSTEM "../common/C/publisher.xml">
<!ENTITY legalnotice SYSTEM "../common/C/legalnotice.xml">
<!ENTITY disclaimer SYSTEM "../common/C/disclaimer.xml">
<!ENTITY inline-ubuntu-icon SYSTEM "../common/C/inlinemediaobject-ubuntu-icon.xml">
<!ENTITY inline-ubuntu-icon-header SYSTEM "../common/C/inlinemediaobject-ubuntu-icon-header.xml">
<!ENTITY relative-ubuntu-icon SYSTEM "../common/C/mediaobject-relative-ubuntu-icon.xml">
<!ENTITY ubuntu-icon SYSTEM "../common/C/mediaobject-ubuntu-icon.xml">
<!ENTITY gpl SYSTEM "../common/C/gpl.xml">
<!ENTITY fdl SYSTEM "../common/C/fdl.xml">
<!ENTITY cc-by-sa SYSTEM "../common/C/ccbysa.xml">
<!ENTITY % gnome-menus-C SYSTEM "../../../ubuntu/libs/gnome-menus-C.ent">
<!-- MENUS --><!-- Please keep entries alphabetical, it makes them much easier to find & use --><!ENTITY about-me SYSTEM "../menus/C/about-me.xml">
<!ENTITY accessories SYSTEM "../menus/C/accessories.xml">
<!ENTITY acro-read SYSTEM "../menus/C/acro-read.xml">
<!ENTITY administration SYSTEM "../menus/C/administration.xml">
<!ENTITY amule SYSTEM "../menus/C/amule.xml">
<!ENTITY archive-man SYSTEM "../menus/C/archive-man.xml">
<!ENTITY assistive-technology-preferences SYSTEM "../menus/C/assistive-technology-preferences.xml">
<!ENTITY azureus SYSTEM "../menus/C/azureus.xml">
<!ENTITY blender3d SYSTEM "../menus/C/blender3d.xml">
<!ENTITY boot SYSTEM "../menus/C/boot.xml">
<!ENTITY calculator SYSTEM "../menus/C/calculator.xml">
<!ENTITY character-map SYSTEM "../menus/C/character-map.xml">
<!ENTITY desktop-background SYSTEM "../menus/C/desktop-background.xml">
<!ENTITY desktop-preferences SYSTEM "../menus/C/desktop-preferences.xml">
<!ENTITY device-manager SYSTEM "../menus/C/device-manager.xml">
<!ENTITY dictionary SYSTEM "../menus/C/dictionary.xml">
<!ENTITY disks SYSTEM "../menus/C/disks.xml">
<!ENTITY downloader-x SYSTEM "../menus/C/downloader-x.xml">
<!ENTITY file-management SYSTEM "../menus/C/file-management.xml">
<!ENTITY firefox SYSTEM "../menus/C/firefox.xml">
<!ENTITY firestarter-firewall-tool SYSTEM "../menus/C/firestarter-firewall-tool.xml">
<!ENTITY font SYSTEM "../menus/C/font.xml">
<!ENTITY gaim SYSTEM "../menus/C/gaim.xml">
<!ENTITY games SYSTEM "../menus/C/games.xml">
<!ENTITY gftp SYSTEM "../menus/C/gftp.xml">
<!ENTITY gimp SYSTEM "../menus/C/gimp.xml">
<!ENTITY gnome-app-install SYSTEM "../menus/C/gnomeappinstall.xml">
<!ENTITY gnome-config-editor SYSTEM "../menus/C/gnome-config-editor.xml">
<!ENTITY gparted SYSTEM "../menus/C/gparted.xml">
<!ENTITY graphics SYSTEM "../menus/C/graphics.xml">
<!ENTITY gthumb SYSTEM "../menus/C/gthumb.xml">
<!ENTITY home-folder SYSTEM "../menus/C/home-folder.xml">
<!ENTITY inkscape SYSTEM "../menus/C/inkscape.xml">
<!ENTITY internet SYSTEM "../menus/C/internet.xml">
<!ENTITY keyboard SYSTEM "../menus/C/keyboard.xml">
<!ENTITY keyboard-shortcuts SYSTEM "../menus/C/keyboard-shortcuts.xml">
<!ENTITY limewire SYSTEM "../menus/C/limewire.xml">
<!ENTITY login-screen-setup SYSTEM "../menus/C/login-screen-setup.xml">
<!ENTITY logout SYSTEM "../menus/C/logout.xml">
<!ENTITY menu-editor SYSTEM "../menus/C/menu-editor.xml">
<!ENTITY menus-and-toolbars SYSTEM "../menus/C/menus-and-toolbars.xml">
<!ENTITY mouse SYSTEM "../menus/C/mouse.xml">
<!ENTITY multimedia-systems-selector SYSTEM "../menus/C/multimedia-systems-selector.xml">
<!ENTITY network-proxy SYSTEM "../menus/C/network-proxy.xml">
<!ENTITY networking SYSTEM "../menus/C/networking.xml">
<!ENTITY nvu SYSTEM "../menus/C/nvu.xml">
<!ENTITY open-office SYSTEM "../menus/C/open-office.xml">
<!ENTITY palmos-devices SYSTEM "../menus/C/palmos-devices.xml">
<!ENTITY preferred-applications SYSTEM "../menus/C/preferred-applications.xml">
<!ENTITY printing SYSTEM "../menus/C/printing.xml">
<!ENTITY qtparted SYSTEM "../menus/C/qtparted.xml">
<!ENTITY remote-desktop SYSTEM "../menus/C/remote-desktop.xml">
<!ENTITY removable-drives-and-media SYSTEM "../menus/C/removable-drives-and-media.xml">
<!ENTITY realplayer SYSTEM "../menus/C/realplayer.xml">
<!ENTITY rhythmbox SYSTEM "../menus/C/rhythmbox.xml">
<!ENTITY route-planner SYSTEM "../menus/C/route-planner.xml">
<!ENTITY screen-resolution SYSTEM "../menus/C/screen-resolution.xml">
<!ENTITY screensaver SYSTEM "../menus/C/screensaver.xml">
<!ENTITY scribus SYSTEM "../menus/C/scribus.xml">
<!ENTITY services SYSTEM "../menus/C/services.xml">
<!ENTITY sessions SYSTEM "../menus/C/sessions.xml">
<!ENTITY shared-folders SYSTEM "../menus/C/shared-folders.xml">
<!ENTITY skype SYSTEM "../menus/C/skype.xml">
<!ENTITY software-properties SYSTEM "../menus/C/software-properties.xml">
<!ENTITY sound SYSTEM "../menus/C/sound.xml">
<!ENTITY soundandvideo SYSTEM "../menus/C/soundandvideo.xml">
<!ENTITY synaptic SYSTEM "../menus/C/synaptic.xml">
<!ENTITY systemtools SYSTEM "../menus/C/systemtools.xml">
<!ENTITY terminal SYSTEM "../menus/C/terminal.xml">
<!ENTITY text-editor SYSTEM "../menus/C/text-editor.xml">
<!ENTITY theme SYSTEM "../menus/C/theme.xml">
<!ENTITY time-date SYSTEM "../menus/C/time-date.xml">
<!ENTITY totem SYSTEM "../menus/C/totem.xml">
<!ENTITY ubuntu-update-manager SYSTEM "../menus/C/ubuntu-update-manager.xml">
<!ENTITY users SYSTEM "../menus/C/users.xml">
<!ENTITY users-groups SYSTEM "../menus/C/users-groups.xml">
<!ENTITY windows SYSTEM "../menus/C/windows.xml">
<!ENTITY xchat-gnome SYSTEM "../menus/C/xchat-gnome.xml">
<!ENTITY xine SYSTEM "../menus/C/xine.xml">
<!ENTITY xmms SYSTEM "../menus/C/xmms.xml">
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
<!ELEMENT xi:include (xi:fallback)?>
<!ATTLIST xi:include xmlns:xi CDATA #FIXED "http://www.w3.org/2001/XInclude">
<!ATTLIST xi:include href CDATA #REQUIRED>
<!ATTLIST xi:include parse (xml | text) "xml">
<!ATTLIST xi:include xpointer CDATA #IMPLIED>
<!ATTLIST xi:include encoding CDATA #IMPLIED>
<!ATTLIST xi:include accept CDATA #IMPLIED>
<!ATTLIST xi:include accept-charset CDATA #IMPLIED>
<!ATTLIST xi:include accept-language CDATA #IMPLIED>
<!ELEMENT xi:fallback ANY>
<!ATTLIST xi:fallback xmlns:xi CDATA #FIXED "http://www.w3.org/2001/XInclude">
<!ENTITY % local.preface.class "| xi:include">
<!ENTITY % local.part.class "| xi:include">
<!ENTITY % local.chapter.class "| xi:include">
<!ENTITY % local.divcomponent.mix "| xi:include">
<!ENTITY % local.para.char.mix "| xi:include">
<!ENTITY % local.info.class "| xi:include">
<!ENTITY % local.common.attrib "xmlns:xi            CDATA       #FIXED       'http://www.w3.org/2001/XInclude'">
<!ENTITY language "en">
]>
<chapter id="basic-chap" status="complete">
	<title>패키징 기초</title>

	<para>많은 초보 패키지 관리자가 직면하는 두 가지 문제는 패키징을 하는 여러가지 방법이 있다는 것과 그 일을 하기 위한 하나의 도구보다 많은 것은 있다는 것 입니다. 우리는 일반 빌드 시스템을 가지고 세 가지 예제를 읽어보게 됩니다. 첫 번째, 우리는 아무 빌드 도움 프로그램도 사용하지 않습니다. 이 접근 방법은 보통 가장 어렵고 실제에 자주 사용하지 않지만 패키징 과정을 들여보는데 가장 단순한 것을 줍니다. 두 번째, 우리는 데비안에서 가장 일반적인 빌드 시스템인 <application>debhelper</application> 를 사용할 것 입니다. 이것은 반복적인 작업을 자동화 함으로서 패키지 관리자를 돕습니다. 세 번째, 우리는 간략하게, <application>debhelper</application> 를 사용하는 것보다 좀 더 간소화 된 <emphasis role="bold">C</emphasis>ommon <emphasis role="bold">D</emphasis>ebian <emphasis role="bold">B</emphasis>uild <emphasis role="bold">S</emphasis>ystem (<application>CDBS</application>) 에 대해 알아볼 것 입니다.</para>

	<tip><para>패키지 개발은 종종 보통의 데스크탑 <phrase>우분투</phrase> 설치의 부분이 아닌 많은 패키지 (특히 헤더와 여타 일반 개발 파일을 가지는 <application>-dev</application> 패키지) 들을 설치하는 것을 요구 합니다. 만약 여러분이 추가 패키지를 설치하는 것을 피하길 원하거나 현재 여러분이 가진 것과 다른 <phrase>우분투</phrase> 릴리스를 (예를 들어, 개발 버전) 위해 개발하고 싶다면, chroot 환경의 사용을 강력히 권장 합니다. <xref linkend="appendix-chroot"/> 을 설정하는 안내는 부록편에서 찾을 수 있습니다.</para></tip>

	
	<sect1 id="basic-scratch" status="complete">
		<title>도구없이 패키징 하기</title>
		
		<important><para><emphasis role="bold">요구사항:</emphasis> build-essential, automake, gnupg, lintian, fakeroot 그리고 <xref linkend="gs-pbuilder"/>.</para>
		</important>
					
		<para>이 예제에서 우리는 GNU <application><ulink url="http://www.gnu.org/software/hello/hello.html">hello</ulink></application> 프로그램을 예로 사용할 것 입니다. 여러분은 소스 tarball을 <ulink url="http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz">ftp.gnu.org</ulink> 에서 내려 받을 수 있습니다. 이 예제의 용도를 위해, 우리는 <filename>~/hello/</filename> 디렉토리를 사용할 것 입니다.</para>
		<screen>
mkdir ~/hello
cd ~/hello
wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz</screen>

		<para>우리는 또한 이미 <phrase>우분투</phrase> 저장소에 패키지된 것과 우리의 패키지를 비교할 것 입니다. 지금은, 그것을 <filename>ubuntu</filename> 디렉토리에 위치 시키고 나중에 볼 수 있도록 합니다. 그 소스 패키지를 가지려면, <filename>/etc/apt/sources.list</filename> 파일 내에 Main 저장소를 위한 "deb-src" 줄을 가지고 있는지를 확인 합니다. 그런 후에, 간단히 다음을 수행 합니다:</para>

		<screen>
mkdir ubuntu
cd ubuntu
apt-get source hello
cd ..</screen>
		
		<note><para>대부분의 <application>apt-get</application> 명령과는 다르게, 소스 패키지는 현재 디렉토리로 내려 받아지기 때문에, 여러분은 소스 패키지를 가지기 위해 루트 권한을 가질 필요가 없습니다. 실제로, 여러분은 <emphasis>오직</emphasis> 일반 사용자로써 <application>apt-get source</application> 를 사용하는 것이 권장 됩니다, 왜냐면 루트의 권한이 필요한 것 없이 소스 패키지 내의 파일을 편집할 수 있어야 하기 때문 입니다.</para></note>
		
		<para><application>apt-get source</application> 명령이 하는 것은 다음 입니다:</para>
		
		<orderedlist>

			<listitem><para>소스 패키지를 내려 받습니다. 소스 패키지는 보통 그 패키지를 기술하고 소스 패키지의 md5sum을 주는 .dsc 파일과, 저작자의 소스 코드를 가지는 .orig.tar.gz 파일, 그리고 패키징 정보와 함께 소스 코드에 적용된 패치를 가지는 .diff.gz 파일을 포함하고 있습니다.</para></listitem>

			<listitem><para>현재 디렉토리로 .orig.tar.gz 파일을 untar 합니다.</para></listitem>

			<listitem><para>gnuzipped .diff.gz 파일은 압축 풀려진 소스 디렉토리에 적용 합니다.</para></listitem>

			</orderedlist>

		<para>만약 여러분이 소스 패키지를 (.dsc, .orig.tar.gz, and .diff.gz files) 수동으로 내려 받았다면, 다음과 같이 <application>dpkg-source</application> 를 사용하여 <application>apt-get source</application> 가 하는 같은 방법으로 패키지를 압축 풀 수 있습니다:</para>
		<para><screen>dpkg-source -x *.dsc</screen></para>

		<para>여러분이 해야할 첫 번째 일은 다음의 형식으로 원래 (때로는 "업스트림"으로 불리는) tarball의 복사본을 만드는 것 입니다: <filename>&lt;packagename&gt;_&lt;version&gt;.orig.tar.gz</filename> 이 단계는 두 가지 일을 합니다. 첫 번째, 이것은 소스 코드 두 본을 만듭니다. 만약 작업하는 복사본을 실수로 변경하거나 삭제하였다면, 여러분은 내려받은 것을 사용할 수 있습니다. 두 번째, 이것은 절대적으로 필요하지 않는 한 원래의 소스 tarball을 변경하는 것은 좋지 않은 패키징 작업으로 여겨 집니다. 사유는 <xref linkend="basic-mistakes"/> 를 보십시오.</para>

		<screen>
cp hello-2.1.1.tar.gz hello_2.1.1.orig.tar.gz
tar -xzvf hello_2.1.1.orig.tar.gz</screen>

		<warning><para>패키지 이름(hello)와 버전(2.1.1) 사이에 있는 언더스크어 "_" 는 하이픈 "-"과 대조되고, 매우 중요 합니다. 하이픈 일때는 여러분의 소스 패키지는 데비안 패키지에 맞지 않게 잘못 만들어 됩니다.</para></warning>

		<para>우리는 이제 소스 파일을 포함하는 <filename>hello-2.1.1</filename> 디렉토리를 가졌습니다. 이제 우리는 패키지 정보를 저장하고, 프로그램 소스 파일에서 분리하여 패키징 파일을 허용하는 우리가 정의한 <application>debian</application> 디렉토리를 만들 필요가 있습니다.</para>

		<screen>
mkdir hello-2.1.1/debian
cd hello-2.1.1/debian/</screen>

		<para>우리는 이제 <phrase>우분투</phrase> 소스 패키지를 위한 필수적인 파일들을 만들 필요가 있습니다: <filename>changelog</filename>, <filename>control</filename>, <filename>copyright</filename>, 그리고 <filename>rules</filename> . 이 파일들은 원래의 (업스트림) 소스 코드에서 바이너리 패키지 (.deb 파일) 을 만들기 위해 필요 합니다. 각각 하나씩 들여다 봅시다.</para>
		
		<sect2>
			<title>changelog</title>
			
			<para><filename>changelog</filename> 파일은, 그것의 이름이 뜻하는 대로, 각 버전에서 만들어진 변경들의 목록 입니다. 이것은 패키지 이름, 버전, 배포, 변경과 주어진 시간에 누가 변경을 하였는지의 특정 형식을 가지고 있습니다. 만약 여러분이 GPG 키를 가지고 있다면, <filename>changelog</filename> 에 사용하는 이름과 이메일 주소는 여러분의 키에 있는 것과 같은 것을 사용하는 것을 확신 하십시오. 다음은 <filename>changelog</filename> 의 양식 입니다:</para>
			<screen>
package (version) distribution; urgency=urgency

  * change details
    more change details
  * even more change details

-- maintainer name &lt;email address&gt;[two spaces] date</screen>

			<para>이 형식은 (특히 날짜 형식) 중요 합니다. 날짜는 반드시 RFC822 형식이어야 하고, 그것은 <application>822-date</application> 에서 얻을 수 있습니다.</para>

			<para>여기에 <application>hello</application> 프로그램을 위한 예제 <filename>changelog</filename> 파일이 있습니다:</para>

			<screen>
hello (2.1.1-1) dapper; urgency=low

   * New upstream release with lots of bug fixes.

-- Captain Packager &lt;packager@coolness.com&gt; Wed, 5 Apr 2006 22:38:49 -0700</screen>

			<para>버전에 -1 이 덧붙여졌음을, 그리고 이것은 데비안 개정 번호라 불리고, 같은 소스 릴리스 버전 내에서 (예를 들어 버그를 고치기 위해) 새 업로드로 패키지가 업데이트 될 때 사용을 하는 것을 주의 하십시오.</para>

			<note><para><phrase>우분투</phrase> 와 데비안은 같은 소스 버전의 패키지 충돌을 피하기 위하여 약간 다른 패키지 버전을 매기는 체계를 가지고 있습니다. 만약 데비안 패키지가 <phrase>우분투</phrase> 에서 변경 되었다면, 그것은 데비안 버전의 끝에 <emphasis>ubuntuX</emphasis> 를 덧붙여 가집니다. (<emphasis>X</emphasis>  는 <phrase>우분투</phrase> 개정 번호 입니다.) 그러므로 만약 데비안 <application>hello</application> 패키지가 <phrase>우분투</phrase> 에 의해 변경 되었다면, 버전 스트링은 <filename>2.1.1-1ubuntu1</filename> 입니다. 만약 프로그램을 위한 패키지가 데비안에 존재하지 않는다면, <phrase>우분투</phrase> 버전은 <emphasis>0</emphasis> 입니다. (<emphasis>예</emphasis>, <filename>2.1.1-0ubuntu1</filename>)</para></note>
		
			<para>이제 우리가 얼마전에 내려받은 <phrase>우분투</phrase> 소스 패키지의 <filename>changelog</filename> 파일을 들여다 봅시다:</para>

			<screen>
less ../../ubuntu/hello-2.1.1/debian/changelog</screen>

			<para>이 경우에 <emphasis>배포</emphasis> 가 <emphasis>unstable</emphasis> (하나의 데비안 브랜치) 임을 주의 하십시오, 그 데비안 패키지가 <phrase>우분투</phrase> 에 의해 변경이 되지 않았기 때문에 그러 합니다. <emphasis>배포</emphasis> 를 여러분의 타겟 배포 릴리스로 지정하는 것을 기억 하십시오.</para>

			<para>이제 <filename>changelog</filename> 파일을 여러분이 아직 있어야 할 <filename>debian</filename> 디렉토리에 만듭니다.</para>
			
		</sect2>

		<sect2>
			<title>control</title>
			<para>control 파일은 패키지 관리 프로그램이 (<application>apt-get</application>, <application>synaptic</application>, 그리고 <application>aptitude</application> 와 같은) 사용할 정보, 빌드-타임 의존, 패키지 관리자 정보 그리고 훨씬 많은 것들을 가지고 있습니다.</para>
			<para><phrase>우분투</phrase> <application>hello</application> 패키지를 위한, control 파일은 다음과 비슷합니다:</para>
			<para><screen>Source: hello
Section: devel
Priority: optional
Maintainer: Captain Packager &lt;packager@coolness.com&gt; 
Standards-Version: 3.6.1

Package: hello
Architecture: any
Depends: ${shlibs:Depends}
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting. It
 allows non-programmers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian
 package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).</screen></para>

			<para>위의 정보를 사용하여 <filename>control</filename> 파일을 만듭니다. (<emphasis>Maintainer</emphasis> 필드에 여러분의 정보를 제공하는 것은 확신 하십시오.)</para>
			
			<para>첫번째 문단은 소스 패키지에 대한 정보를 줍니다. 각각의 줄을 읽어보도록 하죠:</para>
			<itemizedlist>
				
				<listitem><para><emphasis role="bold">Source:</emphasis> 이것은 소스 패키지의 이름이고, 이 경우에는,  <emphasis>hello</emphasis> 입니다.</para></listitem>

				<listitem><para><emphasis role="bold">Section:</emphasis> apt 저장소는 열람하기 쉽고 소프트웨어의 분류를 위하여 영역으로 나누어 집니다. 이 경우에는, <application>hello</application> 는 <emphasis>devel</emphasis> 영역에 속합니다.</para></listitem>

				<listitem><para><emphasis role="bold">Priority:</emphasis> 이것은 사용자에게 패키지의 중요도를 지정 합니다. 이것은 반드시 다음 중의 하나이어야만 합니다:</para>

					<itemizedlist>
					
						<listitem><para><emphasis role="bold">Required</emphasis> - 패키지가 시스템이 적절히 동작하기 위해 필수적일 때 입니다. 만약 이 패키지가 삭제되면, 여러분의 시스템은 회복할 수 없게 고장이 나는 것이기가 아주 쉽습니다.</para></listitem>
						
						<listitem><para><emphasis role="bold">Important</emphasis> - 시스템 사용을 위한 최소한의 패키지의 집합에 속할 때 입니다. 이 패키지를 삭제하는 것은 여러분의 시스템이 회복 불능한 고장을 만들지는 않지만, 일반적으로 어떤 리눅스 설치도 이것이 없으면 불완전하다고 여겨지는 중요한 도구 입니다. 주의: 이것은 Emacs 또는 심지어 X 윈도우 시스템 같은 것을 포함하지 않습니다.</para></listitem>
						
						<listitem><para><emphasis role="bold">Standard</emphasis> - 약간은 스스로 설명하고 있죠.</para></listitem>
						
						<listitem><para><emphasis role="bold">Optional</emphasis> - 실제로 이 분류는 요구되지 않는 패키지를 위하거나 대부분의 패키지들을 위해서 입니다. 그러나, 이 패키지들은 각기 다른 패키지들과 충돌이 없어야만 합니다.</para></listitem>
						
						<listitem><para><emphasis role="bold">Extra</emphasis> - 이 곳의 패키지는 위의 분류 중 하나에 있는 패키지와 충돌이 있을 수도 있습니다. 또한 이미 패키지의 목적을 알고 있는 사람들에게만 유용한 특정한 패키지를 위하여 사용 됩니다.</para></listitem>
					
					</itemizedlist>
				</listitem>

				<listitem><para><emphasis role="bold">Extra</emphasis> 이메일 주소와 함께 패키지 관리자 이름을 적습니다.</para></listitem>

				<listitem><para><emphasis role="bold">Standards-Version:</emphasis> 패키지에 부착하는 <ulink url="http://www.debian.org/doc/debian-policy/">Debian Policy</ulink> 의 버전 입니다. (이 경우는, 3.6.1 버전 입니다.)  현재 버전을 찾는 쉬운 방법은 <emphasis>apt-cache show debian-policy | grep Version</emphasis> 입니다.</para></listitem>

				<listitem><para><emphasis role="bold">Build-Depends:</emphasis> 가장 중요한 필드의 하나이고 종종 버그의 원천이 됩니다. 이 줄은 소스 패키지로 부터 바이너리 패키지를 만들기 위해 설치가 필요한 바이너리 패키지의 (필요하다면 버전과 함께) 목록 입니다. <emphasis>build-essential</emphasis> 에 의해 요구되는 필수적인 패키지는 Build-Depends 줄에 포함될 필요가 없습니다. <application>hello</application> 프로그램의 경우는, 모든 필요한 패키지가 build-essential 의 부분 이므로 Build-Depends 줄은 필요가 없습니다. build-essential 패키지의 목록은 <filename>/usr/share/doc/build-essential/list</filename> 에서 찾을 수 있습니다.</para></listitem>
			
			</itemizedlist>

		
			<para>두번째 문단은 소스로 부터 만들어질 바이너리 패키지를 위해서 입니다. 만약 소스 패키지로 부터 다수의 바이너리 패키지가 만들어지면, <emphasis>각각의</emphasis> 것을 위한 영역이 반드시 있어야 합니다. 다시, 각각의 줄을 읽어 보겠습니다:</para>
			
			<itemizedlist>
			
				<listitem><para><emphasis role="bold">Package:</emphasis> 바이너리 패키지의 이름 입니다. 많은 경우의 단순한 프로그램은 (<application>hello</application> 과 같은), 소스와 바이너리 패키지의 이름이 동일 합니다.</para></listitem>
				
				<listitem><para><emphasis role="bold">Architecture:</emphasis> 바이너리 패키지가 만들어질 아키덱쳐 입니다. 예들 들어:</para>
					
					<itemizedlist>
						
						<listitem><para><emphasis role="bold">all</emphasis> - 소스가 아키텍쳐-의존이 <emphasis>아닌</emphasis> 경우 입니다. 파이썬과 다른 인터프리터 언어를 사용하는 프로그램들이 이 아키텍쳐 값을 사용 합니다. 결과의 바이너리 패키지는 <filename>_all.deb</filename> 로 끝나게 됩니다.</para></listitem>

						<listitem><para><emphasis role="bold">any</emphasis> - 소스가 아키텍쳐-의존 <emphasis>이고</emphasis>, 모든 지원되는 아키텍쳐에서 컴파일이 되어야 합니다. 각각의 아키텍쳐를 위한 .deb 파일이 있게 됩니다. (예를 들어 <filename>_i386.deb</filename>)</para></listitem>

						<listitem><para>아키텍쳐의 부분은 (i386, amd64, ppc, 기타) 소스가 아키텍쳐-의존 이고 <phrase>우분투</phrase> 에 의해 지원되는 모든 아키텍쳐를 위하여 동작하지 않음을 알려주기 위해 나열 됩니다.</para></listitem>

					</itemizedlist></listitem>

				<listitem><para><emphasis role="bold">Depends:</emphasis> 기능성을 위하여 바이너리 패키지가 의존하는 패키지의 목록 입니다. <application>hello</application> 을 위해, 우리는 <filename>${shlibs:Depends}</filename> 를 보게 되고, 이것은 필요한 공유 라이브러리로 대체하게 되는 변수 입니다. 더 많은 정보는 <filename>dpkg-source</filename> man 페이지를 보십시오.</para></listitem>

				<listitem><para><emphasis role="bold">Recommends:</emphasis> 강력히 권장하는 패키지에 사용되고 보통은 그 패키지와 함께 설치가 됩니다. 몇 몇의 패키지 관리자 프로그램은, 잘 알려진 것으로  <application>aptitude</application> 는, 권장 패키지를 자동으로 설치 합니다.</para></listitem>

				<listitem><para><emphasis role="bold">Suggests:</emphasis> 이 패키지가 설치될 때 비슷한 또는 유용한 패키지를 위하여 사용 됩니다.</para></listitem>
				
				<listitem><para><emphasis role="bold">Conflicts:</emphasis> 이 패키지와 충돌이 일어나는 패키지를 위하여 사용 됩니다. 동시에 양쪽 모두를 설치할 수 없습니다. 하나가 설치되면, 다른 하나는 삭제 됩니다.</para></listitem>

				<listitem><para><emphasis role="bold">Description:</emphasis> 패키지 관리자에 의해 짧은 그리고 긴 설명 모두를 적는 항목으로 사용 됩니다. 형식은 다음과 같습니다:</para>
					
<screen>Description: &lt;한 줄의 개요&gt;
 &lt;몇 줄에 걸친 확장된 설명&gt;</screen>

						<para>긴 설명 란의 각각의 줄의 시작에 하나의 공백이 있음을 주의 하십시오. 어떻게 좋은 설명을 만드는지에 대한 더 많은 설명은 <ulink url="http://people.debian.org/~walters/descriptions.html">http://people.debian.org/~walters/descriptions.html</ulink> 에서 찾을 수 있습니다.</para></listitem>
				
			</itemizedlist>
					
		</sect2>

		<sect2>
			<title>copyright</title>

			<para>이 파일은 저작권 정보를 줍니다. 일반적으로, 저작권 정보는 프로그램의 소스 디렉토리에 있는 <filename>COPYING</filename> 파일에서 찾아 봅니다. 이 파일은 저작자와 패키지 관리자의 이름과 같은 정보, 어디서 소스가 왔는지를 알리는 URL, 연도와 저작권 소유자를 알리는 저작권 줄, 그리고 저작권 자체의 텍스트를 포함하여야만 합니다. 예제 양식은 다음과 같습니다:</para>

			<screen>This package was debianized by {Your Name} &lt;your email address&gt;
{Date}

It was downloaded from: {URL of webpage} 

Upstream Author(s): {Name(s) and email address(es) of author(s)}

Copyright:
	Copyright (C) {Year(s)} by {Author(s)} {Email address(es)}

License:

</screen>

			<para>여러분이 상상할 수 있는 것처럼, <application>hello</application> 프로그램은 GPL 라이센스 하에 발표 되었습니다. 이 경우에는 <phrase>우분투</phrase> 패키지에서 <filename>copyright</filename> 파일을 단지 복사하는 것이 가장 쉽습니다:</para>

			<screen>
cp ../../ubuntu/hello-2.1.1/debian/copyright .</screen>

			<para>여러분은 저작권이 GPL, LGPL, BSD, 또는 Artistic License 아니면 완전한 저작권을 반드시 포함시켜야 합니다. 앞에 언급된 저작권의 경우는 <filename>/usr/share/common-licenses/</filename> 디렉토리에 있는 대응하는 파일을 참조할 수 있습니다.</para>

			<para><phrase>우분투</phrase> 패키지의 <filename>copyright</filename> 파일은 매뉴얼을 위한 라이센스 진술문도 포함하고 있음을 주의 하십시오. 이것은 하나의 진술문에 의해 소스 내의 <emphasis>모든</emphasis> 파일들을 보호하기 위하여 중요 합니다.</para>
			
		</sect2>	

		<sect2 id="basic-scratch-rules">
			<title>rules</title>
			
			<para><filename>rules</filename> 파일은 실행 가능한 Makefile 파일이고 소스 패키지에서 바이너리 패키지를 만들기 위한 규칙들을 가지고 있습니다. <application>hello</application> 를 위하여, <phrase>우분투</phrase> 패키지에 있는 <filename>rules</filename> 파일을 사용하는 것이 좀 더 쉽습니다:</para>

			<screen>#!/usr/bin/make -f
# Sample debian/rules file - for GNU Hello.
# Copyright 1994,1995 by Ian Jackson.
# I hereby give you perpetual unlimited permission to copy,
# modify and relicense this file, provided that you do not remove
# my name from the file itself. (I assert my moral right of
# paternity under the Copyright, Designs and Patents Act 1988.)
# This file may have to be extensively modified

package = hello
docdir = debian/tmp/usr/share/doc/$(package)

CC = gcc
CFLAGS = -g -Wall
INSTALL_PROGRAM = install

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
  INSTALL_PROGRAM += -s
endif

build:
        $(checkdir)
        ./configure --prefix=/usr
        $(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
        touch build

clean:
        $(checkdir)
        rm -f build
        -$(MAKE) -i distclean
        rm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars

binary-indep: checkroot build
        $(checkdir)
# There are no architecture-independent files to be uploaded
# generated by this package. If there were any they would be
# made here.

binary-arch: checkroot build
        $(checkdir)
        rm -rf debian/tmp
        install -d debian/tmp/DEBIAN $(docdir)
        install -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN
        $(MAKE) INSTALL_PROGRAM="$(INSTALL_PROGRAM)" \
        prefix=$$(pwd)/debian/tmp/usr install
        cd debian/tmp &amp;&amp; mv usr/info usr/man usr/share
        cp -a NEWS debian/copyright $(docdir)
        cp -a debian/changelog $(docdir)/changelog.Debian
        cp -a ChangeLog $(docdir)/changelog
        cd $(docdir) &amp;&amp; gzip -9 changelog changelog.Debian
        gzip -r9 debian/tmp/usr/share/man
        gzip -9 debian/tmp/usr/share/info/*
        dpkg-shlibdeps debian/tmp/usr/bin/hello
        dpkg-gencontrol -isp
        chown -R root:root debian/tmp
        chmod -R u+w,go=rX debian/tmp
        dpkg --build debian/tmp ..

define checkdir
        test -f src/$(package).c -a -f debian/rules
endef

binary: binary-indep binary-arch

checkroot:
        $(checkdir)
        test $$(id -u) = 0

.PHONY: binary binary-arch binary-indep clean checkroot
</screen>

			<para>이 파일을 더 자세하게 읽어 보도록 합시다. 첫 번째 부분에 여러분이 보는 것은 몇 가지 변수에 대한 정의 입니다:</para>
			<screen>package = hello
docdir = debian/tmp/usr/share/doc/$(package)

CC = gcc
CFLAGS = -g -Wall
INSTALL_PROGRAM = install

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif
ifeq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
  INSTALL_PROGRAM += -s
endif
</screen>
			<para>이 영역은 컴파일러를 위한 CFLAGS 를 지정하고 또한 디버깅을 위한 <filename>noopt</filename> 와 <filename>nostrip</filename> DEB_BUILD_OPTIONS 을 관리 합니다.</para>
			
			<para>다음은 <filename>build</filename> 규칙 입니다:</para>
			<screen>build:
	$(checkdir)
	./configure --prefix=/usr
	$(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
	touch build</screen>
			<para>이 규칙은 적절한 접두 명칭과 함께 <emphasis>./configure</emphasis> 을 실행하고, <emphasis>make</emphasis> 를 실행하며, 그리고 오류가 있을 수 있는 여러 번의 컴파일을 막기 위해 빌드의 시각을 가지는 <filename>build</filename> 파일을 만듭니다.</para>
			<para>다음 규칙은 <filename>clean</filename> 입니다, 이것은 <emphasis>make -i distclean</emphasis> 을 실행하고 패키지가 빌드되는 동안에 만들어진 파일들을 삭제 합니다.</para>

			<screen>clean:
	$(checkdir)
	rm -f build
	-$(MAKE) -i distclean
	rm -rf *~ debian/tmp debian/*~ debian/files* debian/substvars</screen>

			<para>다음으로 우리는 빈 <filename>binary-indep</filename> 규칙을 봅니다, 왜냐면 이 패키지에는 생성된 아키텍쳐-독립 파일이 없기 때문 입니다.</para>

			<para>그러나, 많은 아키텍쳐-의존 파일이 있고, 그래서 <filename>binary-arch</filename> 이 사용 됩니다:</para>

			<screen>binary-arch: checkroot build
		$(checkdir)
		rm -rf debian/tmp
		install -d debian/tmp/DEBIAN $(docdir)
		install -m 755 debian/postinst debian/prerm debian/tmp/DEBIAN
		$(MAKE) INSTALL_PROGRAM="$(INSTALL_PROGRAM)" \
		prefix=$$(pwd)/debian/tmp/usr install
		cd debian/tmp  mv usr/info usr/man usr/share
		cp -a NEWS debian/copyright $(docdir)
		cp -a debian/changelog $(docdir)/changelog.Debian
		cp -a ChangeLog $(docdir)/changelog
		cd $(docdir)  gzip -9 changelog changelog.Debian
		gzip -r9 debian/tmp/usr/share/man
		gzip -9 debian/tmp/usr/share/info/*
		dpkg-shlibdeps debian/tmp/usr/bin/hello
		dpkg-gencontrol -isp
		chown -R root:root debian/tmp
		chmod -R u+w,go=rX debian/tmp
		dpkg --build debian/tmp ..</screen>
			
			<para>첫 번째, 이 규칙은 패키지가 root로써 만들어졌는지 확신하기 위하여 <filename>checkroot</filename> 를 호출하고 소스를 컴파일 하기 위하여 <filename>build</filename> 규칙을 호출 하는 것을 주목 하십시오. 그 다음에, <filename>debian/tmp/DEBIAN</filename> 과<filename>debian/tmp/usr/share/doc/hello</filename> 파일이 만들어지고, <filename>postinst</filename> 와 <filename>prerm&gt;</filename> 스크립트가 <filename>debian/tmp/DEBIAN</filename> 에 설치 됩니다. 그런 후 <emphasis>make install</emphasis> 이 prefix와 함께 실행되어 <filename>debian/tmp/usr</filename> 로 설치 됩니다. 이어서 문서 파일들이 (NEWS, ChangeLog, 와 그 debian changelog) 압축되고 설치 됩니다. <emphasis>dpkg-shlibdeps</emphasis> 는 <application>hello</application> 실행 파일의 공유 라이브러리 의존성을 찾기 위하여 수행되고, 그것은 <filename>control</filename> 내의 ${shlibs:Depends} 변수를 위한 <filename>debian/substvars</filename> 파일 내의 목록을 저장 합니다. 그 다음에, <emphasis>dpkg-gencontrol</emphasis> 이 바이너리 패키지를 위한 control 파일을 만들기 위하여 실행이 되고, <emphasis>dpkg-shlibdeps</emphasis> 에 의해 생성된 대체를 만듭니다. 마지막으로, <filename>debian/tmp</filename> 의 접근 권한이 지정된 후, <emphasis>dpkg --build</emphasis> 가 바이너리 .deb 패키지를 만들고 상위 디렉토리에 그것을 옮겨놓기 위하여 실행이 됩니다.</para>

		</sect2>

		<sect2> 
			<title>postinst and prerm</title> 
			
			<para><filename>postinst</filename> 와 <filename>prerm</filename> 파일은 패키지 관리자의 스크립트의 예제 입니다. 그것들은 쉘 스크립트이고 패키지의 설치 후에 그리고 삭제 전에 실행 됩니다. <phrase>우분투</phrase> <application>hello</application> 패키지의 경우에는, info 파일을 설치 (그리고 삭제) 하기 위하여 사용 됩니다. 그것들을 현재의 <filename>debian</filename> 디렉토리에 복사 하십시오.</para>

			<screen>
cp ../../ubuntu/hello-2.1.1/debian/postinst .
cp ../../ubuntu/hello-2.1.1/debian/prerm .</screen>
		
		</sect2>

		<sect2>
			<title>소스 패키지 만들기</title>
			
			<para>이제 우리는 자세하게 <application>hello</application> 를 위한 <filename>debian</filename> 디렉토리 내의 파일들을 읽어 보았고, 소스(그리고 바이너리) 패키지를 만들 수 있습니다. 우선 압축이 풀려진 소스의 루트로 이동해 보도록 하겠습니다:</para>
			
			<para><screen>cd ..</screen></para>
			
			<para>이제 우리는 <application>dpkg-buildpackage</application> 를 사용하여 소스 패키지를 만듭니다:</para>
			
			<para><screen>dpkg-buildpackage -S -rfakeroot</screen></para>
			
			<para>그 -S 플랙은 <application>dpkg-buildpackage</application> 에게 소스 패키지를 만들라는 것을 이야기 하고, -r 플랙은 패키지를 만들 때 우리가 가짜 root 권한을 가지는 것을 허용하기 위하여   <application>fakeroot</application> 를 사용한다는 것을 알립니다. <application>dpkg-buildpackage</application> 는 <filename>.orig.tar.gz</filename> 파일을 가지고 <filename>.diff.gz</filename> (저작자에게서 온 원래의 tarball 과 우리가 만든 <filename>debian/</filename> 디렉토리와 그 안의 내용물 간의 차이) 와 소스 패키지를 위한 설명과 md5sums를 가지는 <filename>.dsc</filename> 파일을 생성 합니다. <filename>.dsc</filename> 와 <filename>*_source.changes</filename> (소스 패키지의 업로드를 위해 사용되는) 파일은 여러분의 GPG key를 사용하여 서명 됩니다. 만약 여러분이 GPG key를 가지고 있지 않다면, <application>dpkg-buildpackage</application> 의 수행을 위하여 <emphasis>-us -uc</emphasis> 플랙을 더 하십시오. 여러분의 패키지는 만들어지지만 서명을 하기 전까지는 업로드 될 수 없습니다.</para>
			
			<para>소스 패키지에 더하여, 우리는 또한 <application>pbuilder</application> 를 가지고 바이너리 패키지를 만들 수 있습니다:</para>
			
			<para><screen>sudo pbuilder build ../*.dsc</screen></para>

			<para>바이너리 패키지를 만들기 위해 <application>pbuilder</application> 를 사용하는 것은 매우 중요 합니다. 이것은 <application>pbuilder</application> 는 오직 최소한의 환경을 제공하므로, 모든 빌드-타임 의존성은 <filename>control</filename> 파일에 의해서 결정되기 때문에 빌드 의존성을 정확히 하는 것을 확신하게 합니다.</para>
			
			<para>우리는 <application>lintian</application> 을 가지고 소스 패키지의 일반적인 실수를 점검할 수 있습니다:</para>
			
			<screen>cd ..
lintian -i *.dsc</screen>
			
		</sect2>

	</sect1>

	<sect1 id="basic-debhelper" status="complete">
		<title>Debhelper 로 패키징</title>
		
		<important><para><emphasis role="bold">Requirements:</emphasis> <xref linkend="basic-scratch"/> 영역에 있는 요구 사항과 debhelper 그리고 dh-make 를 더합니다.</para>
		</important>

		<para>패키지 관리자로써, 여러분은 이전 부분에서 마쳤던 것처럼 아무 도구없이 패키지를 만드는 것은 극히 적습니다. 여러분이 상상할 수 있는 것처럼, 예를 들어, <filename>rules</filename> 파일에 있는 많은 작업과 정보는 패키지의 공통적인 사항 입니다. 패키징을 좀 더 쉽고 효과적으로 하려면, 이러한 작업을 돕기 위하여 <application>debhelper</application> 를 사용할 수 있습니다. Debhelper 는 패키지-빌딩의 과정을 자동화 하는 (<emphasis>dh_</emphasis> 로 시작하는) 펄 스크립트의 집합 입니다. 이 스크립트들로, 데비안 패키지를 만드는 것은 아주 단순해 졌습니다.</para>

		<para>이 예제에서는, 우리는 다시 한번 GNU Hello 패키지를 만들지만, 이번에는 우리의 작업을 <phrase>우분투</phrase><application>hello-debhelper</application> 패키지와 비교할 것 입니다. 다시 한번, 여러분이 작업할 디렉토리를 만듭니다:</para>

		<screen>mkdir ~/hello-debhelper
cd ~/hello-debhelper
wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz
mkdir ubuntu
cd ubuntu</screen>
		

		<para>그 다음에, <phrase>우분투</phrase> 소스 패키지를 가집니다:</para>

		<screen>apt-get source hello-debhelper
cd ..</screen>

		<para>이전의 예제와 마찬가지로, 우리가 할 필요가 있는 첫 번째 일은 원래의 (업스트림) tarball을 압축 푸는 것 입니다.</para>

		<screen>tar -xzvf hello-2.1.1.tar.gz</screen>

		<para>이전 예제에서 우리가 했던 것처럼 업스트림의 tarball을 <filename>hello_2.1.1.orig.tar.gz</filename> 로 복사하는 대신에, 우리는 <application>dh_make</application> 가 우리를 위하여 그 작업을 하도록 시킬 겁니다. 오직 여러분이 해야하는 것은 소스 폴더의 이름을 변경하는 것 입니다. 그래서 그것은 <emphasis>&lt;packagename&gt;-&lt;version&gt;</emphasis> 형식이 되고 패키지 이름은 소문자 입니다. 이 경우에, 단지 tarball의 압축을 푸는 것으로 정확한 이름의 소스 디렉토리를 생성하고 그래야 우리는 그 곳으로 이동할 수 있습니다:</para>

		<screen>cd hello-2.1.1</screen>

		<para>소스의 초기 "데비안화"를 만들기 위해, 우리는 <application>dh_make</application> 를 사용 합니다.</para>

		<screen>
dh_make -e your.maintainer@address -f ../hello-2.1.1.tar.gz
		</screen>

		<para>dh_make는 여러분에게 연속되는 질문들을 물어 봅니다:</para>

		<screen>
Type of package: single binary, multiple binary, library, kernel module or cdbs?
[s/m/l/k/b] <emphasis role="bold">s</emphasis></screen>

		<screen>
Maintainer name : Captain Packager
Email-Address : packager@coolness.com
Date : Thu, 6 Apr 2006 10:07:19 -0700
Package Name : hello
Version : 2.1.1
License : blank
Type of Package : Single
Hit &lt;enter&gt; to confirm: <emphasis role="bold">Enter</emphasis></screen>

		<caution><para>오직 한 번만 <application>dh_make -e</application> 를 실행 합니다. 그것은 첫 번째 실행한 후에 다시 실행 한다면, 그것은 적절하게 동작하지 않습니다. 그것을 변경하기를 원하거나 실수를 하였다면, 소스 디렉토리를 삭제하고 새로운 업스트림 tarball을 압축 풉니다. 그런 후에 그 소스 디렉토리로 이전할 수 있고 다시 시도 합니다.</para></caution>
		
		<para><application>dh_make -e</application> 실행하는 것은 두 가지 일을 합니다:</para>

		<orderedlist> 
			
			<listitem><para>상위 디렉토리에 <filename>hello_2.1.1.orig.tar.gz</filename> 파일을 만듭니다.</para></listitem>

			<listitem><para><filename>debian/</filename> 에 필요한 기본 파일들과 필요할 수 있는 많은 양식 파일(.ex)들을 만듭니다.</para></listitem>
			
		</orderedlist>

		<para>우리가 <xref linkend="basic-scratch"/> 에서 본 것 처럼, <application>Hello</application> 프로그램은 매우 복잡하지 않고, 패키징은 기본 파일보다 훨씬 많은 것을 요구하지 않습니다. 그래서, <filename>.ex</filename> 파일들을 다음과 같이 삭제 합니다:</para>

		<screen>cd debian
rm *.ex *.EX</screen>

		<para>For <application>hello</application>, you will also not need
			<filename>README.Debian</filename> (README file for specific
			Debian issues, not the program's README), <filename>dirs</filename>
			(used by <application>dh_installdirs</application> to create
			needed directories), <filename>docs</filename> (used by
			<application>dh_installdocs</application> to install program
			documentation), or <filename>info</filename> (used by
			<application>dh_installinfo</application> to install the info
			file) files into the <filename>debian</filename> directory. For more
			information on these files, see <xref linkend="appendix-examples"/>.</para>

		<para>이 시점에서, 여러분은 오직 <filename>changelog</filename>, <filename>compat</filename>, <filename>control</filename>, <filename>copyright</filename>, 그리고 <filename>rules</filename> 파일을 <filename>debian</filename> 디렉토리 내에 가져야만 합니다. <xref linkend="basic-scratch"/> 에서, 새로운 파일은 오직 <filename>compat</filename> 입니다, 이것은 사용된 <application>debhelper</application> 버전을 가지고 있습니다. (이 경우에는 4 입니다.)</para>

		<para>여러분은 이 경우에, 단지 <application>hello</application> 대신에 <application>hello-debhelper</application> 으로 이름한 이 패키지를 반영하기 위하여 <filename>changelog</filename> 파일을 약간 조정할 필요가 있습니다:</para>

		<screen>
hello-debhelper (2.1.1-1) dapper; urgency=low

  * Initial release

  -- Captain Packager &lt;packager@coolness.com&gt; Thu, 6 Apr 2006 10:07:19 -0700</screen>
		
		<para><application>debhelper</application> 를 사용하는 것에 의해, 우리가 <filename>control</filename> 파일 내에 변경하는 것은 단지 이름 (<application>hello-debhelper</application> 을 위하여 <application>hello</application> 대체) 과 소스 패키지를 위하여 <application>debhelper (&gt;= 4.0.0)</application> 를 <emphasis>Build-Depends</emphasis> 필드에 더하는 것 입니다. <application>hello-debhelper</application> 를 위한 <phrase>우분투</phrase> 패키지는 다음과 같습니다:</para>

		<screen>
Source: hello-debhelper
Section: devel
Priority: extra
Maintainer: Capitan Packager &lt;packager@coolness.com&gt;
Standards-Version: 3.6.1
Build-Depends: debhelper (&gt;= 4)

Package: hello-debhelper
Architecture: any
Depends: ${shlibs:Depends}
Conflicts: hello
Provides: hello
Replaces: hello
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting. It
 allows non-programmers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).
 .
 This is the same as the hello package, except it uses debhelper to
 make the deb. Please see debhelper as to what it is.
		</screen>

		<para>우리는, 다음의 파일들이 <xref linkend="basic-scratch"/> 이후로 변경이 된 것이 없으므로, <filename>copyright</filename> 와 <filename>postinst</filename> 그리고 <filename>prerm</filename> 스크립트를 <phrase>우분투</phrase> <application>hello-debhelper</application> 패키지에서 복사할 수 있습니다. 또한 우리는 <filename>rules</filename> 파일을 복사하여 그것을 검사할 수 있습니다.</para>

		<screen>
cp ../../ubuntu/hello-debhelper-2.1.1/debian/copyright .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/postinst .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/prerm .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/rules.</screen>

		<para>The last file we need to look at is <filename>rules</filename>,
			where the power of
			<application>debhelper</application> scripts can be seen. The
			<application>debhelper</application> version of
			<filename>rules</filename> is somewhat smaller (54 lines as
			opposed to 72 lines in the version from <xref linkend="basic-scratch-rules"/>).</para>

		<para><application>debhelper</application> 버전은 다음과 비슷합니다:</para>

		<screen> #!/usr/bin/make -f

package = hello-debhelper

CC = gcc
CFLAGS = -g -Wall

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif

#export DH_VERBOSE=1

clean:
        dh_testdir
        dh_clean
        rm -f build
        -$(MAKE) -i distclean

install: build
        dh_clean
        dh_installdirs
        $(MAKE) prefix=$(CURDIR)/debian/$(package)/usr \
                mandir=$(CURDIR)/debian/$(package)/usr/share/man \
                infodir=$(CURDIR)/debian/$(package)/usr/share/info \
                install

build:
        ./configure --prefix=/usr
        $(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
        touch build

binary-indep: install
# There are no architecture-independent files to be uploaded
# generated by this package.  If there were any they would be
# made here.

binary-arch: install
        dh_testdir -a
        dh_testroot -a
        dh_installdocs -a NEWS
        dh_installchangelogs -a ChangeLog
        dh_strip -a
        dh_compress -a
        dh_fixperms -a
        dh_installdeb -a
        dh_shlibdeps -a
        dh_gencontrol -a
        dh_md5sums -a
        dh_builddeb -a

binary: binary-indep binary-arch

.PHONY: binary binary-arch binary-indep clean checkroot
			</screen>

		<para>Notice that tasks like testing if you are in the right directory
			(<application>dh_testdir</application>), making sure you are
			building the package with root privileges
			(<application>dh_testroot</application>), installing documentation
			(<application>dh_installdocs</application> and
			<application>dh_installchangelogs</application>), and cleaning up
			after the build (<application>dh_clean</application>) are handled
			automatically. Many packages much more complicated than
			<application>hello</application> have <filename>rules</filename>
			files no bigger because the <application>debhelper</application>
			scripts handle most of the tasks. For a complete list of
			<application>debhelper</application> scripts, please see <xref linkend="appendix-debhelper"/>. They are also well documented
			in their respective <application>man</application> pages. It is a
			useful exercise to read the man page (they are well written and
			not lengthy) for each helper script used in the above
			<filename>rules</filename> file.</para>

			<sect2>
			<title>소스 패키지 만들기</title>
			
			<para>Now that we have gone through the files in the
				<filename>debian</filename> directory for
				<application>hello-debhelper</application>, we can build the
				source (and binary) packages. First, let us move back into the
				source directory:</para>
			
			<para><screen>cd ..</screen></para>
			
			<para>이제 우리는 <application>dpkg-buildpackage</application> 를 위한 랩퍼 스크립트인, <application>debuild</application> 를 사용하여 소스 패키지를 만듭니다:</para>
			
			<para><screen>debuild -S</screen></para>
			
			<para>바이너리 패키지, <application>pbuilder</application> 사용:</para>
			
			<para><screen>sudo pbuilder build ../*.dsc</screen></para>

			<para>그리고 마지막으로 <application>lintian</application> 을 사용하여 소스 패키지의 일반적인 실수를 점검 합니다:</para>
			
			<screen>cd ..
lintian -i *.dsc</screen>
			
		</sect2>
	
	</sect1>

	<sect1 id="basic-cdbs" status="complete">
		<title>CDBS로 패키징</title>

		<para>CDBS는 데비안 패키지를 만들고 유지관리 하는 것을 보다 쉽게 만들기 위해 debhelper를 사용하는 도구 입니다. 이것은 많은 장점을 가지고 있습니다:</para>

			<itemizedlist>
				<listitem><para>이것은 간결한, 읽기쉬운, 그리고 효과적인 <filename>debian/rules</filename> 을 생산 합니다.</para></listitem>
				
				<listitem><para>이것은 여러분을 위하여 debhelper와 autotools를 자동화 하고, 그래서 여러분은 반복적인 작업에 대해 걱정하지 않아도 됩니다.</para></listitem>
				
				<listitem><para>It helps you focus on more important packaging problems,
						because it helps without limiting customization</para></listitem>
				
				<listitem><para>Its classes have been well tested, so you can
				avoid dirty hacks to solve common problems</para></listitem>
				
				<listitem><para>CDBS로 전환하는 것은 쉽습니다</para></listitem>
				
				<listitem><para>이것은 확장가능 합니다</para></listitem>
			</itemizedlist>
		
		<sect2>
			<title>패키지에 CDBS 사용 하기</title>
		
			<para>Using CDBS for <phrase>Ubuntu</phrase> packages is very easy. After adding 
				<application>cdbs</application> to the Build-Depends in 
				<filename>debian/control</filename>, a basic
				<filename>debian/rules</filename> file using CDBS can fit in 2 lines. 
				For a simple C/C++ application with no extra rules, such as
				<application>hello</application>, <filename>debian/rules</filename> can
				look like this :</para>

			<screen>#!/usr/bin/make -f
				
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/class/autotools.mk</screen>

			<para>이것은 프로그램을 빌드하기 위해 여러분이 필요한 전부 입니다! CDBS 가 설치와 지우는 것을 관리 합니다. 여러분은 그런 후에 <filename>debian/rules</filename> 를 위한 다양한 영역에 있는 보통의 debhelper 기능과 함께 여러분의 패키지를 조정하기 위해 <filename>.install</filename> 과  <filename>.info</filename> 파일을 사용할 수 있습니다.</para>

			<warning><para> Do not use DEB_AUTO_UPDATE_DEBIAN_CONTROL:=yes to
					automatically change <filename>debian/control</filename>. It can
					cause bad things, and Debian considers it a reason to reject a package
					from entering the archives. See <ulink url="http://ftp-master.debian.org/REJECT-FAQ.html">
						http://ftp-master.debian.org/REJECT-FAQ.html</ulink> for more
					information.</para></warning>
			
			<para>As you can see, CDBS mostly works by including <filename>.mk</filename>
				Makefiles in <filename>debian/rules</filename>. The
				<application>cdbs</application> package provides such files in
				<filename>/usr/share/cdbs/1/</filename> that allow you to do quite a lot
				of packaging tasks. Other packages, such as <application>quilt</application>, add
				modules to CDBS and can be used as Build-Depends. Note that you can
				also use your own CDBS rules and include them in the package. The most
				useful modules included with the <application>cdbs</application> package
				are:</para>

			<itemizedlist>
				
				<listitem><para><filename>rules/debhelper.mk</filename>: 모든 필요한 영역에 debhelper를 호출 합니다.</para></listitem>
			
				<listitem><para><filename>rules/dpatch.mk</filename>: 여러분이 소스를 쉽게 패칭하기 위해 dpatch를 사용하는 것을 허용 합니다.</para></listitem>
				
				<listitem><para><filename>rules/simple-patchsys.mk</filename>: 소스를 패치하는 아주 쉬운 방법을 제공 합니다.</para></listitem>
				
				<listitem><para><filename>rules/tarball.mk</filename>: 여러분이 패키지에서 압축된 tarball을 사용하여 패키지를 만드는 것을 허용 합니다.</para></listitem>
				
				<listitem><para><filename>class/autotools.mk</filename>: 모든 필요한 영역에 autotools를 호출 합니다.</para></listitem>
				
				<listitem><para><filename>class/gnome.mk</filename>: GNOME 프로그램을 만듭니다. (<filename>debian/control</filename> 내에 적절한 Build-Depends 을 요구 합니다.)</para></listitem>
				
				<listitem><para><filename>class/kde.mk</filename>: KDE 프로그램을 만듭니다. (<filename>debian/control</filename> 내에 적절한 Build-Depends 을 요구 합니다.)</para></listitem>
				
				<listitem><para><filename>class/python-distutils.mk</filename>: 파이썬 프로그램의 패키징을 용이하게 합니다.</para></listitem>
			
			</itemizedlist>
		</sect2>
		
		<sect2>
			<title>CDBS에 대한 더 많은 정보</title>
		
			<para>CDBS에 대한 더 많은 정보는, <ulink url="https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml">https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml</ulink> 에 있는 Marc Dequènes 의 안내서를 보십시오.</para>
		
		</sect2>
	</sect1>
		
	<sect1 id="basic-updating" status="complete">
		<title>패키지 업데이트 하기</title>

			<para>If you have been around Linux distributions for any amount
				of time, you have realized that there are sometimes bugs in
				programs. In the Debian and <phrase>Ubuntu</phrase> distributions, bugs are
				often fixed through the packaging by patching the source code.
				Sometimes there are bugs in the packaging itself that can
				cause difficulties.</para>

			<para>To patch the program's source code, you could simply download
				the current <phrase>Ubuntu</phrase> source package (with
				<application>apt-get source</application>) and make the needed
				changes. You can then add a new entry to the
				<filename>debian/changelog</filename> using
				<application>dch -i</application> or
				<application>dch -v
					&lt;version&gt;-&lt;revision&gt;</application> to specify
				the new revision. When you run <application>debuild
					-S</application> from the source directory you will have a
				new source package with a new <filename>.diff.gz</filename> in the
				parent directory that
				contains your changes. A problem with this approach is that
				the distinction between source and patches is unclear.</para>

			<para>A solution to this problem is to separate the changes to the
				source code into individual patches stored in the
				<filename>debian</filename> directory. One such patch system
				is called <application>dpatch</application>. The patches are
				stored in the <filename>debian/patches/</filename> directory
				and have a special format.</para>

			<para><application>dpatch</application> 를 만들기 위해, 다음의 단계를 순서적으로 수행 합니다.</para>

			<para>임시 작업 장소를 만들고 현재 소스 디렉토리의 두 복사본을 만듭니다:</para>
			
			<screen>
mkdir tmp
cd tmp
cp -a ../&lt;package&gt;-&lt;version&gt; . 
cp -a &lt;package&gt;-&lt;version&gt; &lt;package&gt;-&lt;version&gt;.orig 
</screen>

			<para><filename>&lt;package&gt;-&lt;version&gt;</filename> 디렉토리에서 변경을 합니다.</para>

			<para><application>diff</application> 를 사용하여 패치를 만들고 <filename>debian/patches</filename> 디렉토리에 그것을 가져다 놓습니다:</para>

			<screen>
diff -Nru &lt;package&gt;-&lt;version&gt;.orig &lt;package&gt;-&lt;version&gt; &gt; patch-file
</screen>

			<para><application>dpatch patch-template</application> 을 사용하여 <application>dpatch</application> 와 dpatch 들을 나열하는 <filename>00list</filename> 로 이름한 파일을 만듭니다.</para>
			<screen>
ddpatch patch-template -p "01_patchname" "patch-file description" \
	&lt; patch-file &gt; 01_patchname.dpatch
echo 01_patchname.dpatch &gt;00list</screen>

			<para>여러분은 이제 소스 패키지의 <filename>debian/patches</filename> 디렉토리에 <filename>01_patchname.dpatch</filename> 와 <filename>00list</filename> 를 위치 시킬 수 있습니다:</para>

			<screen>
mkdir ../&lt;package&gt;-&lt;version&gt;/debian/patches
cp 01_patchname.dpatch 00list ../&lt;package&gt;-&lt;version&gt;/debian/patches
cd ..
rm -rf tmp
			</screen>

			<note><para>여러분은 또한 <application>dpatch-edit-patch</application> 를 사용하여 이미 존재하는 패치를 편집할 수 있습니다.</para></note>
			
		<para>Once all the changes have been made, a changelog entry added,
			and <application>dpatch</application> added to the
			<filename>debian/control</filename> file (if needed), then you can
			rebuild the source package with <application>debuild
				-S</application>.</para>

		<para>To get your fixed source package uploaded to the <phrase>Ubuntu</phrase>
			repositories, you will need to get your source package sponsored by
			a person who has upload rights. See <xref linkend="ubuntu-upload"/> for more details. Sometimes, rather
			than giving the entire source package (.diff.gz, .dsc, and
			.orig.tar.gz), it is easier and more efficient to just give the
			difference between the source package that is currently in the
			repositories and your fixed source package. A tool has been
			created to do just that called
			<application>debdiff</application>. Using
			<application>debdiff</application> is similar to using
			<application>diff</application> but is made specifically for
			packaging. You can <application>debdiff</application> the
			source package by:</para>

		<screen>
debdiff &lt;oldpackage&gt;.dsc &lt;newpackage&gt;.dsc &gt; package.debdiff
		</screen>

		<para>또는 다음에 의해 바이너리 패키지:</para>

		<screen>
debdiff &lt;oldpackage&gt;.deb &lt;newpackage&gt;.deb &gt; package.debdiff
		</screen>
	
		<para>Debdiff 들을 버그 리포트에 첨부하는 것은 아주 좋고 스폰서가 업로드를 하도록 준비 합니다.</para>
		
	</sect1>

	<sect1 id="basic-mistakes" status="complete">
		<title>일반적인 실수</title>
			
		<sect2 id="basic-ex_files">
			<title>dh_make 예제 파일</title>
			
			<para>When you use dh_make to create the initial "debianization", example files
				for various tasks are created in the <filename>debian/</filename>
				directory. The templates have a .ex extension. If you want to use one,
				rename it to remove the extension. If you do not need it, remove it to
				keep the <filename>debian/</filename> directory clean.</para>

		</sect2>

		<sect2 id="basic-orig-tarball">
			<title>원래의 Tarball 변경 하기</title>

			<para>There are two types of source packages, native and non-native.
				A native package is one that is specific to <phrase>Ubuntu</phrase>/Debian. It has the
				<application>debian/</application> directory containing the packaging
				information and any changes to the source included in the tarball (usually
				&lt;packagename&gt;_&lt;version&gt;.tar.gz). Non-native packages are more
				common. A non-native package splits
				the source package into a &lt;packagename&gt;_&lt;version&gt;.orig.tar.gz
				tarball that is identical (hopefully including md5sum) to the source
				tarball downloaded from the project's homepage and a .diff.gz file that
				contains all the differences (<filename>debian/</filename> directory and
				patches) from the original source tarball.</para>

			<para>만약 여러분이 원래의 tarball을 변경 한다면 일어날 수 있는 가능한 위험에 대한 목록이 여기에 있습니다:</para>
		
			<orderedlist>

				<listitem><para>재생 가능성</para>

					<para>만약 여러분이 단지 .diff.gz 와 .dsc 만을 취한다면, 여러분 또는 다른 사람이 원래의 tarball에 있는 변경을 재생산할 수단이 없습니다.</para></listitem>

				<listitem><para>업그레이드 가능성</para>
		
					<para>만약 .orig.tar.gz 이 저장되어 있고 업스트림 소스와 <phrase>우분투</phrase> 소스 패키지를 생성하기 위해 만들어진 변경 간에 분명한 구분이 있다면 (저작자에게서 온) 새로운 업스트림 버전으로 업그레이드를 하는 것이 훨씬 쉽습니다.</para> </listitem>

				<listitem><para>데비안에서 <phrase>우분투</phrase> 로 동기화</para>

					<para>Changing original tarballs makes it hard to automatically sync
						from Debian to <phrase>Ubuntu</phrase>. Normally, only the .diff.gz and .dsc files
						change within the same upstream version, since the .orig.tar.gz
						file is shared by all the Debian or <phrase>Ubuntu</phrase> revisions. It is much
						more difficult to sync if the md5sums of the .orig.tar.gz files
						are not the same.</para> </listitem>

				<listitem><para>데비안 패키지를 위한 개정 관리의 사용</para>
					
					<para>If you use svn (<application>svn-buildpackage</application>) to
						handle your Debian package, you usually don't store the original
						tarball inside. If someone else does a checkout, he'll need to
						get the original tarball separately. Other revision control
						systems can be used to track only the packaging files
						(<filename>debian/</filename>, etc.) and not the whole
						source. However, if the .orig.tar.gz is not the same, then
						obviously problems can occur.</para></listitem>

				<listitem><para>보안 추적</para>

					<para>Consider a situation where someone <emphasis>wants</emphasis> to
							introduce a backdoor/rootkit or other evil stuff. If the original
							tarball is intact, it can be scanned easily through the .diff.gz to
							see if the person who modified the package tried to do something evil.
							If the tarball has changed, however, you also need to check the
							differences between the tarball and the original source.</para>
		
						<note><para>You still have to trust the authors of the software 
								not to do anything evil, but that is the case regardless of
								whether the original is changed.</para></note></listitem>

				<listitem><para>.diff.gz 파일</para>
						
					<para>The option to use the .diff.gz to reflect changes to the
						original tarball already exists, so it is easy to make changes
						without touching the original tarball.</para></listitem>
				
			</orderedlist>


			<para><emphasis role="bold">만약 다음 중 하나 또는 그 이상이 진실일 경우 원래의 tarball을 변경하는 것은 받아질 수 있습니다:</emphasis></para>

			<itemizedlist>
	
				<listitem><para>그것이 재배포할 수 없는 비자유 부분을 가지고 있고, 패키징 내에 그것을 기록 합니다. 자주 이러한 패키지는 이름 내에 "dfsg" (Debian Free Software Guidelines 의 약어) 를 사용하고(또는), 비자유 부분이 삭제 되었음을 표시하는 버전 매김을 합니다.</para></listitem>
					
				<listitem><para>저작자는 bzip2으로 압축된 소스만을 제공 합니다.</para>
					<itemizedlist>
						
						<listitem><para>Just <application>bunzip2</application> the
								.tar.bz2 and <application>gzip -9 </application> the
								resulting tar.</para></listitem>
							
						<listitem><para>여러분이 제공하는 .tar 파일과 원래의 .tar 파일의 md5sums 은 반드시 일치하여야 합니다!</para></listitem>
	
						<listitem><para>실제로 debian/rules 에 get-orig-source 규칙을 제공 하는 것은 이 변환을 자동으로 합니다.</para></listitem>
					
					</itemizedlist>
				</listitem>
					
				<listitem><para>SVN에서 직접 가져오기</para>
					<itemizedlist>
						<listitem><para>debian/rules 에 get-orig-source 를 제공 합니다.</para></listitem>
					</itemizedlist>
				</listitem>
	
			</itemizedlist>

			<para><emphasis role="bold">다음은 원래의 tarball을 변경하는 사유가 <emphasis>아닙니다</emphasis>:</emphasis></para>
			
			<itemizedlist>
				
				<listitem><para>잘못된 디렉토리 레이아웃</para>
					
					<note><para><application>dpkg-source</application> is quite flexible
							and manages to produce the correct directory layout even
							if:</para></note>
						
					<itemizedlist>
						
						<listitem><para>The directory inside the tarball is not named
								&lt;upstream&gt;-&lt;version&gt;.</para></listitem>
				
						<listitem><para>tarball 내에 서브디렉토리가 없습니다.</para></listitem>
					</itemizedlist>
			
				</listitem>
			
				<listitem><para>Files need to be removed to keep the .diff.gz small
						(e.g., files created by autotools). Everything that needs to
						be deleted should be removed in the <application>clean</application> 
						rule. Since the .diff.gz is created with diff -u, you will not see 
						removed files in the .diff.gz.</para></listitem>
										
				<listitem><para>Files need to be modified. Files that need to be modified
						should to go into .diff.gz. That is its purpose!</para></listitem>
				
				<listitem><para>파일의 잘못된 접근 권한. 이것을 하기 위해 <filename>debian/rules</filename> 를 사용할 수 있습니다.</para></listitem>
	
			</itemizedlist>
			
			
			<tip><para>What do I do with an .orig.tar.gz that already includes a
					<filename>debian/</filename> dir?</para>
					
				<para>Do not repackage it. You can ask the author(s) to delete the debian/
					dir and provide a diff.gz instead. This makes it easier to review their
					work, and it separates packaging from program source.  </para>
			</tip>
				
			<note><para>It is always a good idea to contact the program's author(s) and ask
					if you may correct autoconf issues, directory layout, an outdated Free
					Software Foundation address in COPYRIGHT files, or other things that
					are not specific to the packaging but would be convenient for you so
					you do not need to "patch" the source in .diff.gz.</para></note>
		
		</sect2>

		<sect2>
			<title>저작권 정보</title>

			<para><filename>debian/copyright</filename> 파일은 반드시 다음을 포함해야 합니다:</para>
			
			<itemizedlist>
				
				<listitem><para>The licensing information for <emphasis>all</emphasis>
						files in the source. Sometimes author(s) put a license in
						<filename>COPYING</filename> but have different licensing
						information for some files in the source.</para></listitem>

				<listitem><para>저작권 보유자와 연도</para></listitem>

				<listitem><para>The <emphasis>entire</emphasis> license unless it is one
						of the licenses found in
						<filename>/usr/share/common-licenses</filename>, in which case you
						should just include the preamble.</para></listitem>

			</itemizedlist>
				
		</sect2>

	</sect1>

</chapter>
