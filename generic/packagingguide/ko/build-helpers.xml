<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % pg-common SYSTEM "../pg-common.ent">
%pg-common;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
<!ENTITY ubuntu '<phrase>Ubuntu</phrase>'>
]>
<chapter id="bh-chap" status="writing">
	<title>Build Helpers</title>
	<para>Good stuff about debhelper and CDBS goes here</para>

	<sect1 id="basic-debhelper" status="complete">
		<title>Debhelper 로 패키징</title>
		
		<important><para><emphasis role="bold">요구 사항:</emphasis> <xref linkend="basic-scratch"/> 영역에 있는 요구 사항들에 debhelper와 dh-make를 더합니다.</para> </important>

		<para>패키지 관리자로써, 여러분은 이전 부분에서 마쳤던 것처럼 아무 도구없이 패키지를 만드는 것은 극히 적습니다. 여러분이 상상할 수 있는 것처럼, 예를 들어, <filename>rules</filename> 파일에 있는 많은 작업과 정보는 패키지의 공통적인 사항 입니다. 패키징을 좀 더 쉽고 효과적으로 하려면, 이러한 작업을 돕기 위하여 <application>debhelper</application> 를 사용할 수 있습니다. Debhelper 는 패키지-빌딩의 과정을 자동화 하는 (<emphasis>dh_</emphasis> 로 시작하는) 펄 스크립트의 집합 입니다. 이 스크립트들로, 데비안 패키지를 만드는 것은 아주 단순해 졌습니다.</para>

		<para>In this example, we will again build the GNU Hello package, but this
			time we will be comparing our work to the Ubuntu
			<application>hello-debhelper</application> package. Again,
			create a directory where you will be working: </para>

		<screen>mkdir ~/hello-debhelper
cd ~/hello-debhelper
wget http://ftp.gnu.org/gnu/hello/hello-2.1.1.tar.gz
mkdir ubuntu
cd ubuntu</screen>
		

		<para>Then, get the Ubuntu source package:</para>

		<screen>apt-get source hello-debhelper
cd ..</screen>

		<para>이전의 예제와 마찬가지로, 우리가 할 필요가 있는 첫 번째 일은 원래의 (업스트림) tarball을 압축 푸는 것 입니다.</para>

		<screen>tar -xzvf hello-2.1.1.tar.gz</screen>

		<para>이전 예제에서 우리가 했던 것처럼 업스트림의 tarball을 <filename>hello_2.1.1.orig.tar.gz</filename> 로 복사하는 대신에, 우리는 <application>dh_make</application> 가 우리를 위하여 그 작업을 하도록 시킬 겁니다. 오직 여러분이 해야하는 것은 소스 폴더의 이름을 변경하는 것 입니다. 그래서 그것은 <emphasis>&lt;packagename&gt;-&lt;version&gt;</emphasis> 형식이 되고 패키지 이름은 소문자 입니다. 이 경우에, 단지 tarball의 압축을 푸는 것으로 정확한 이름의 소스 디렉토리를 생성하고 그래야 우리는 그 곳으로 이동할 수 있습니다:</para>

		<screen>cd hello-2.1.1</screen>

		<para>소스의 초기 "데비안화"를 만들기 위해, 우리는 <application>dh_make</application> 를 사용 합니다.</para>

		<screen>
dh_make -e your.maintainer@address -f ../hello-2.1.1.tar.gz
		</screen>

		<para>dh_make는 여러분에게 연속되는 질문들을 물어 봅니다:</para>

		<screen>
Type of package: single binary, multiple binary, library, kernel module or cdbs?
[s/m/l/k/b] <emphasis role="bold">s</emphasis></screen>

		<screen>
Maintainer name : Captain Packager
Email-Address : packager@coolness.com
Date : Thu, 6 Apr 2006 10:07:19 -0700
Package Name : hello
Version : 2.1.1
License : blank
Type of Package : Single
Hit &lt;enter&gt; to confirm: <emphasis role="bold">Enter</emphasis></screen>

		<caution><para>오직 한 번만 <application>dh_make -e</application> 를 실행 합니다. 그것은 첫 번째 실행한 후에 다시 실행 한다면, 그것은 적절하게 동작하지 않습니다. 그것을 변경하기를 원하거나 실수를 하였다면, 소스 디렉토리를 삭제하고 새로운 업스트림 tarball을 압축 풉니다. 그런 후에 그 소스 디렉토리로 이전할 수 있고 다시 시도 합니다.</para></caution>
		
		<para><application>dh_make -e</application> 실행하는 것은 두 가지 일을 합니다:</para>

		<orderedlist> 
			
			<listitem><para>상위 디렉토리에 <filename>hello_2.1.1.orig.tar.gz</filename> 파일을 만듭니다.</para></listitem>

			<listitem><para><filename>debian/</filename> 에 필요한 기본 파일들과 필요할 수 있는 많은 양식 파일(.ex)들을 만듭니다.</para></listitem>
			
		</orderedlist>

		<para>우리가 <xref linkend="basic-scratch"/> 에서 본 것 처럼, <application>Hello</application> 프로그램은 매우 복잡하지 않고, 패키징은 기본 파일보다 훨씬 많은 것을 요구하지 않습니다. 그래서, <filename>.ex</filename> 파일들을 다음과 같이 삭제 합니다:</para>

		<screen>cd debian
rm *.ex *.EX</screen>

		<para><filename>README.Debian</filename>(프로그램 일반적인 사항을 담은 README가 아니라 데비안에만 해당하는 사항을 담은 README)이나 <filename>dirs</filename>(필요한 디렉토리를 <application>dh_installdirs</application> 프로그램을 통해 만들 때 사용), <filename>docs</filename>(문서를 <application>dh_installdocs</application> 프로그램을 통해 설치하고자 할 때 사용), <filename>info</filename>(info 파일을 <application>dh_installinfo</application> 프로그램을 통해 설치하고자 할 때 사용) 역시 꼭 필요한 것은 아닙니다. 자세한 정보는 <xref linkend="appendix-examples"/>를 참조해 주십시오.</para>

		<para>이 시점에서, 여러분은 오직 <filename>changelog</filename>, <filename>compat</filename>, <filename>control</filename>, <filename>copyright</filename>, 그리고 <filename>rules</filename> 파일을 <filename>debian</filename> 디렉토리 내에 가져야만 합니다. <xref linkend="basic-scratch"/> 에서, 새로운 파일은 오직 <filename>compat</filename> 입니다, 이것은 사용된 <application>debhelper</application> 버전을 가지고 있습니다. (이 경우에는 4 입니다.)</para>

		<para>You will need to adjust the
			<filename>changelog</filename> slightly in this case to reflect
			that this package is named
			<application>hello-debhelper</application> rather than just
			<application>hello</application>:</para>

		<screen>
hello-debhelper (2.1.1-1) dapper; urgency=low

  * Initial release

  -- Captain Packager &lt;packager@coolness.com&gt; Thu, 6 Apr 2006 10:07:19 -0700</screen>
		
		<para>By using <application>debhelper</application>, the only
			things we need to change in <filename>control</filename> are the
			name (substituting <application>hello</application> for
			<application>hello-debhelper</application>) and adding
			<application>debhelper (&gt;= 4.0.0)</application> to the
			<emphasis>Build-Depends</emphasis> field for the source
			package. The Ubuntu package for
			<application>hello-debhelper</application> looks like:</para>

		<screen>
Source: hello-debhelper
Section: devel
Priority: extra
Maintainer: Capitan Packager &lt;packager@coolness.com&gt;
Standards-Version: 3.6.1
Build-Depends: debhelper (&gt;= 4)

Package: hello-debhelper
Architecture: any
Depends: ${shlibs:Depends}
Conflicts: hello
Provides: hello
Replaces: hello
Description: The classic greeting, and a good example
 The GNU hello program produces a familiar, friendly greeting. It
 allows non-programmers to use a classic computer science tool which
 would otherwise be unavailable to them.
 .
 Seriously, though: this is an example of how to do a Debian package.
 It is the Debian version of the GNU Project's `hello world' program
 (which is itself an example for the GNU Project).
 .
 This is the same as the hello package, except it uses debhelper to
 make the deb. Please see debhelper as to what it is.
		</screen>

		<para>We can copy the <filename>copyright</filename> file and the
			<filename>postinst</filename> and <filename>prerm</filename>
			scripts from the Ubuntu
			<application>hello-debhelper</application> package, as they have
			not changed since <xref linkend="basic-scratch"/>. We will also
			copy the <filename>rules</filename> file so we can inspect
			it.</para>

		<screen>
cp ../../ubuntu/hello-debhelper-2.1.1/debian/copyright .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/postinst .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/prerm .
cp ../../ubuntu/hello-debhelper-2.1.1/debian/rules .</screen>

		<para>마지막으로 봐야할 파을은 <filename>rules</filename>입니다. 이 파일에서 <application>debhelper</application> 스크립트의 기능을 확인해보실 수 있습니다. <filename>rules</filename>의 54줄 짜리 <application>debhelper</application>용 버전은 72줄 짜리 <xref linkend="basic-scratch-rules"/>용 버전보다 좀 짧습니다.</para>

		<para><application>debhelper</application> 버전은 다음과 비슷합니다:</para>

		<screen> #!/usr/bin/make -f

package = hello-debhelper

CC = gcc
CFLAGS = -g -Wall

ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
  CFLAGS += -O2
endif

#export DH_VERBOSE=1

clean:
        dh_testdir
        dh_clean
        rm -f build
        -$(MAKE) -i distclean

install: build
        dh_clean
        dh_installdirs
        $(MAKE) prefix=$(CURDIR)/debian/$(package)/usr \
                mandir=$(CURDIR)/debian/$(package)/usr/share/man \
                infodir=$(CURDIR)/debian/$(package)/usr/share/info \
                install

build:
        ./configure --prefix=/usr
        $(MAKE) CC="$(CC)" CFLAGS="$(CFLAGS)"
        touch build

binary-indep: install
# There are no architecture-independent files to be uploaded
# generated by this package. If there were any they would be
# made here.

binary-arch: install
        dh_testdir -a
        dh_testroot -a
        dh_installdocs -a NEWS
        dh_installchangelogs -a ChangeLog
        dh_strip -a
        dh_compress -a
        dh_fixperms -a
        dh_installdeb -a
        dh_shlibdeps -a
        dh_gencontrol -a
        dh_md5sums -a
        dh_builddeb -a

binary: binary-indep binary-arch

.PHONY: binary binary-arch binary-indep clean checkroot
			</screen>

		<para>참고로, 현재 올바른 디렉트리에 있는지(<application>dh_testdir</application>), 루트 권한으로 패키지를 빌드하고 있는지(<application>dh_testroot</application>) 확인하는 작업, 문서를 설치하고((<application>dh_installdocs</application>와 <application>dh_installchangelogs</application>), 빌드가 끝난 후 정리하는 작업(<application>dh_clean</application>)은 모두 자동으로 처리됩니다. <application>hello</application> 패키지보다 훨씬 복잡한 패키지들도 filename&gt;rules</para>

			<sect2>
			<title>소스 패키지 만들기</title>
			
			<para>이제 우리는 <application>hello-debhelper</application> 를 위한 <filename>debian</filename> 디렉토리 내의 파일들을 모두 살펴 보았고, 소스(그리고 바이너리) 패키지를 만들 수 있습니다. 우선은, 소스 디렉토리로 다시 이동합니다:</para>
			
			<para><screen>cd ..</screen></para>
			
			<para>이제 우리는 <application>dpkg-buildpackage</application> 를 위한 랩퍼 스크립트인, <application>debuild</application> 를 사용하여 소스 패키지를 만듭니다:</para>
			
			<para><screen>debuild -S</screen></para>
			
			<para>바이너리 패키지, <application>pbuilder</application> 사용:</para>
			
			<para><screen>sudo pbuilder build ../*.dsc</screen></para>

			<para>그리고 마지막으로 <application>lintian</application> 을 사용하여 소스 패키지의 일반적인 실수를 점검 합니다:</para>
			
			<screen>cd ..
lintian -i *.dsc</screen>
			
		</sect2>
	
	</sect1>

	<sect1 id="basic-cdbs" status="complete">
		<title>CDBS로 패키징</title>

		<para>CDBS는 데비안 패키지를 만들고 유지관리 하는 것을 보다 쉽게 만들기 위해 debhelper를 사용하는 도구 입니다. 이것은 많은 장점을 가지고 있습니다:</para>

			<itemizedlist>
				<listitem><para>이것은 간결한, 읽기쉬운, 그리고 효과적인 <filename>debian/rules</filename> 을 생산 합니다.</para></listitem>
				
				<listitem><para>이것은 여러분을 위하여 debhelper와 autotools를 자동화 하고, 그래서 여러분은 반복적인 작업에 대해 걱정하지 않아도 됩니다.</para></listitem>
				
				<listitem><para>그것은 커스터마이징에 제한하는 것 없이 도울 수 있으므로 보다 중요한 패키징 문제에 여러분이 집중할 수 있도록 돕습니다</para></listitem>
				
				<listitem><para>그것의 클래스는 매우 잘 테스트 되었으므로 공통적인 문제를 해결하기 위해 지저분하게 여기저기를 고치는 것을 피할 수 있습니다</para></listitem>
				
				<listitem><para>CDBS로 전환하는 것은 쉽습니다</para></listitem>
				
				<listitem><para>이것은 확장가능 합니다</para></listitem>
			</itemizedlist>
		
		<sect2>
			<title>패키지에 CDBS 사용 하기</title>
		
			<para>Using CDBS for Ubuntu packages is very easy. After adding 
				<application>cdbs</application> to the Build-Depends in 
				<filename>debian/control</filename>, a basic
				<filename>debian/rules</filename> file using CDBS can fit in 2 lines. 
				For a simple C/C++ application with no extra rules, such as
				<application>hello</application>, <filename>debian/rules</filename> can
				look like this :</para>

			<screen>#!/usr/bin/make -f
				
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/class/autotools.mk</screen>

			<para>이것은 프로그램을 빌드하기 위해 여러분이 필요한 전부 입니다! CDBS 가 설치와 지우는 것을 관리 합니다. 여러분은 그런 후에 <filename>debian/rules</filename> 를 위한 다양한 영역에 있는 보통의 debhelper 기능과 함께 여러분의 패키지를 조정하기 위해 <filename>.install</filename> 과  <filename>.info</filename> 파일을 사용할 수 있습니다.</para>

			<warning><para><filename>debian/control</filename> 파일을 자동적으로 변경하기 위하여 DEB_AUTO_UPDATE_DEBIAN_CONTROL:=yes 를 사용하지 마십시오, 그것은 안 좋은 일을 일으키고, 데비안에서는 그러한 패키지가 저장소에 들어올 때 거절을 하는 이유로 고려를 하고 있습니다. 더 많은 정보는, <ulink url="http://ftp-master.debian.org/REJECT-FAQ.html"> http://ftp-master.debian.org/REJECT-FAQ.html</ulink> 을 보십시오.</para></warning>
			
			<para>여러분이 보는 것처럼, CDBS는 <filename>debian/rules</filename> 내의 <filename>.mk</filename> Makefiles 를 포함하는 것에 의해 대부분 동작 합니다. <application>cdbs</application> 패키지는 여러분이 아주 많은 패키징 작업을 할 수 있도록 허용하는 <filename>/usr/share/cdbs/1/</filename> 내에 그러한 파일들을 제공 합니다. <application>quilt</application> 와 같은 다른 패키지들은, 모듈을 CDBS에 추가하고 Build-Depends 로 사용되어 질 수 있습니다. 여러분은 또한 여러분 소유의 CDBS 규칙들을 사용할 수 있고 그것들을 패키지에 포함할 수 있음을 주의 하십시오. <application>cdbs</application> 패키지에 포함되는 가장 유용한 모듈들은 다음과 같습니다:</para>

			<itemizedlist>
				
				<listitem><para><filename>rules/debhelper.mk</filename>: 모든 필요한 영역에 debhelper를 호출 합니다.</para></listitem>
			
				<listitem><para><filename>rules/dpatch.mk</filename>: 여러분이 소스를 쉽게 패칭하기 위해 dpatch를 사용하는 것을 허용 합니다.</para></listitem>
				
				<listitem><para><filename>rules/simple-patchsys.mk</filename>: 소스를 패치하는 아주 쉬운 방법을 제공 합니다.</para></listitem>
				
				<listitem><para><filename>rules/tarball.mk</filename>: 여러분이 패키지에서 압축된 tarball을 사용하여 패키지를 만드는 것을 허용 합니다.</para></listitem>
				
				<listitem><para><filename>class/autotools.mk</filename>: 모든 필요한 영역에 autotools를 호출 합니다.</para></listitem>
				
				<listitem><para><filename>class/gnome.mk</filename>: GNOME 프로그램을 만듭니다. (<filename>debian/control</filename> 내에 적절한 Build-Depends 을 요구 합니다.)</para></listitem>
				
				<listitem><para><filename>class/kde.mk</filename>: KDE 프로그램을 만듭니다. (<filename>debian/control</filename> 내에 적절한 Build-Depends 을 요구 합니다.)</para></listitem>
				
				<listitem><para><filename>class/python-distutils.mk</filename>: 파이썬 프로그램의 패키징을 용이하게 합니다.</para></listitem>
			
			</itemizedlist>
		</sect2>
		
		<sect2>
			<title>CDBS에 대한 더 많은 정보</title>
		
			<para>CDBS에 대한 더 많은 정보는, <ulink url="https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml">https://perso.duckcorp.org/duck/cdbs-doc/cdbs-doc.xhtml</ulink> 에 있는 Marc Dequènes 의 안내서를 보십시오.</para>
		
		</sect2>
	</sect1>


</chapter>

