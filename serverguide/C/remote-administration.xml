<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../libs/global.ent">
%globalent;
<!ENTITY % gnome-menus-C SYSTEM "../../libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "&EnglishAmerican;">
]>
<chapter id="remote-administration" status="review">
	<title>Remote Administration</title>
	<para>
	There are many ways to remotely administer a Linux server.  This chapter will cover
	one of the most popular <application>OpenSSH</application>.
  	</para>
	<sect1 id="openssh-server" status="review">
		<title>OpenSSH Server</title>
      <sect2 id="openssh-introduction">
        <title>Introduction</title> 
           <para>
            This section of the Ubuntu &sg-title; introduces a powerful collection of tools
            for the remote control of networked computers and transfer of data between 
	    networked computers, called <emphasis>OpenSSH</emphasis>. You will also learn
            about some of the configuration settings possible with the OpenSSH server 
	    application and how to change them on your Ubuntu system. 
          </para>
          <para>
            OpenSSH is a freely available version of the Secure Shell (SSH) protocol family of 
            tools for remotely controlling a computer or transferring files between computers.
            Traditional tools used to accomplish these functions, such as 
	    <application>telnet</application> or <application>rcp</application>, are insecure 
	    and transmit the user's password in cleartext when used. OpenSSH provides a server 
	    daemon and client tools to facilitate secure, encrypted remote control and file 
	    transfer operations, effectively replacing the legacy tools.
          </para>
          <para>
            The OpenSSH server component, <application>sshd</application>, listens 
	    continuously for client connections from any of the client tools. When a connection 
	    request occurs, <application>sshd</application> sets up the correct connection 
	    depending on the type of client tool connecting. For example, if the remote 
	    computer is connecting with the <application>ssh</application> client application, 
	    the OpenSSH server sets up a remote control session after authentication. If a 
	    remote user connects to an OpenSSH server with <application>scp</application>, the 
	    OpenSSH server daemon initiates a secure copy of files between the server and 
	    client after authentication. OpenSSH can use many authentication methods, including             plain password, public key, and <application>Kerberos</application> tickets.
            </para>
          </sect2>
        <sect2 id="openssh-installation">
        <title>Installation</title>
        <para>
        Installation of the OpenSSH client and server applications is simple. To install the 
	OpenSSH client applications on your Ubuntu system, use this command at a terminal 
	prompt:
        </para>
<screen>
<command>sudo apt-get install openssh-client</command>
</screen>
        <para>
        To install the OpenSSH server application, and related support files, use this command 
	at a terminal prompt:
        </para>
<screen>
<command>sudo apt-get install openssh-server</command>
</screen>
        <para>
	The <application>openssh-server</application> package can also be selected to 
	install during the Server Edition installation process.
	</para>
        </sect2>
        <sect2 id="openssh-configuration">
          <title>Configuration</title>
          <para>
          You may configure the default behavior of the OpenSSH server application, 
	  <application>sshd</application>, by editing the file 
	  <filename>/etc/ssh/sshd_config</filename>. For information about the configuration 
	  directives used in this file, you may view the appropriate manual page with the 
	  following command, issued at a terminal prompt:
          </para>
<screen>
<command>man sshd_config</command>
</screen>
            <para>
            There are many directives in the <application>sshd</application> configuration 
	    file controlling such things as communication settings and authentication modes. 
	    The following are examples of configuration directives that can be changed by 
	    editing the <filename>/etc/ssh/sshd_config</filename> file.
            </para>
            <tip>
                <para>Prior to editing the configuration file, you should make a copy of the 
		original file and protect it from writing so you will have the original 
		settings as a reference and to reuse as necessary.
                </para>
                <para>Copy the <filename>/etc/ssh/sshd_config</filename> file and protect it 
		from writing with the following commands, issued at a terminal prompt:
                </para>
	    </tip>
<screen>
<command>sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.original</command>
<command>sudo chmod a-w /etc/ssh/sshd_config.original</command>
</screen>
            <para>
            The following are examples of configuration directives you may change:
            </para>
           <itemizedlist>
               <listitem>
               <para>
               To set your OpenSSH to listen on TCP port 2222 instead of the default TCP port 
	       22, change the Port directive as such:
               </para>
               <para>
               Port 2222
               </para>
               </listitem>
	<listitem>
            <para>
            To have <application>sshd</application> allow public key-based login credentials, 
	    simply add or modify the line:
            </para>
               <para>
               PubkeyAuthentication yes
               </para>
            <para>
            In the <filename>/etc/ssh/sshd_config</filename> file, or if already present, 
	    ensure the line is not commented out.
            </para>
            </listitem>
            <listitem>
             <para>
             To make your OpenSSH server display the contents of the 
	     <filename>/etc/issue.net</filename> file as a pre-login
             banner, simply add or modify the line:
             </para>
               <para>
               Banner  /etc/issue.net
               </para>
               <para>
               In the <filename>/etc/ssh/sshd_config</filename> file.
               </para>
             </listitem>
             </itemizedlist>
	    <para>
            After making changes to the <filename>/etc/ssh/sshd_config</filename> file, save 
	    the file, and restart the <application>sshd</application> server application to 
	    effect the changes using the following command at a terminal prompt:
            </para>
<screen>
<command>sudo /etc/init.d/ssh restart</command>
</screen>
		<warning>
                  <para>
                  Many other configuration directives for <application>sshd</application> are 
	          available for changing the server application's behavior to fit your needs. 
		  Be advised, however, if your only method of access to a server is 
		  <application>ssh</application>, and you make a mistake in configuring 
		  <application>sshd</application> via the 
		  <filename>/etc/ssh/sshd_config</filename> file, you may find you
                  are locked out of the server upon restarting it, or that the 
		  <application>sshd</application> server refuses to start due to an incorrect 
		  configuration directive, so be extra careful when editing this file on a 
		  remote server.
                  </para>
                </warning>
        </sect2>
   <sect2 id="openssh-keys" status="review">
     <title>SSH Keys</title>
     <para>
     SSH <emphasis>keys</emphasis> allow authentication between two hosts without the need of a password.  SSH key authentication 
     uses two keys a <emphasis>private</emphasis> key and a <emphasis>public</emphasis> key.
     </para>
     <para>
     To generate the keys, from a terminal prompt enter:
     </para>
<screen>
<command>ssh-keygen -t dsa</command>
</screen>
     <para>
     This will generate the keys using a <emphasis>DSA</emphasis> authentication identity of the user.  During the process you
     will be prompted for a password.  Simply hit <emphasis>Enter</emphasis> when prompted to create the key.  
     </para>
     <para>
     By default the <emphasis>public</emphasis> key is saved in the file <filename>~/.ssh/id_dsa.pub</filename>, while 
     <filename>~/.ssh/id_dsa</filename> is the <emphasis>private</emphasis> key.  Now copy the <filename>id_dsa.pub</filename> file
     to the remote host and append it to <filename>~/.ssh/authorized_keys</filename> by entering:
     </para>
<screen>
<command>ssh-copy-id username@remotehost</command>
</screen>
     <para>
     Finally, double check the permissions on the <filename>authorized_keys</filename> file, only the authenticated user should have read and write permissions.
     If the permissions are not correct change them by:
     </para>
<screen>
<command>chmod 600 .ssh/authorized_keys</command>
</screen>
     <para>
     You should now be able to SSH to the host without being prompted for a password.
     </para>
   </sect2>
   <sect2 id="openssh-references" status="review">
      <title>References</title>

      <itemizedlist>
        <listitem>
          <para>
          <ulink url="https://help.ubuntu.com/community/SSH">Ubuntu Wiki SSH</ulink> page.
          </para>
        </listitem>
        <listitem>
          <para>
          <ulink url="http://www.openssh.org/">OpenSSH Website</ulink>
          </para>
        </listitem>
        <listitem>
          <para>
          <ulink url="https://wiki.ubuntu.com/AdvancedOpenSSH">Advanced OpenSSH Wiki Page</ulink>
          </para>
        </listitem>
      </itemizedlist>

   </sect2>
  </sect1>
  <sect1 id="puppet" status="review">
    <title>Puppet</title>

      <para>
      <application>Puppet</application> is a cross platform framework enabling system administrators to perform common tasks using code.  
      The code can do a variety of tasks from installing new software, to checking file permissions, or updating user accounts.  Puppet is 
      great not only during the initial installation of a system, but also throughout the system's entire life cycle.  In most circumstances
      <application>puppet</application> will be used in a client/server configuration.  
      </para>

      <para>
      This section will cover installing and configuring <application>puppet</application> in a client/server configuration.  This simple example
      will demonstrate how to install <application>Apache</application> using <application>Puppet</application>.
      </para>

    <sect2 id="puppet-installation" status="review">
      <title>Installation</title>

      <para>
      To install <application>puppet</application>, in a terminal on the <emphasis>server</emphasis> enter:
      </para>

<screen>
<command>sudo apt-get install puppetmaster</command>
</screen>

      <para>
      On the <emphasis>client</emphasis> machine, or machines, enter:
      </para>

<screen>
<command>sudo apt-get install puppet</command>
</screen>

    </sect2>
    <sect2 id="puppet-configuration" status="review">
      <title>Configuration</title>

      <para>
      Prior to configuring <application>puppet</application> you may want to add a DNS <emphasis>CNAME</emphasis> record for 
      <emphasis>puppet.example.com</emphasis>, where <emphasis>example.com</emphasis> is your domain.  By default 
      <application>puppet</application> clients check DNS for puppet.example.com as the puppet server name, or 
      <emphasis>Puppet Master</emphasis>.  See <xref linkend="dns"/> for more DNS details.
      </para>

      <para>
      If you do not wish to use DNS, you can add entries to the server and client <filename>/etc/hosts</filename> file.  For example, in the 
      <application>puppet</application> server's <filename>/etc/hosts</filename> file add:
      </para>

<programlisting>
127.0.0.1 localhost.localdomain localhost puppet
192.168.1.17 meercat02.example.com meercat02
</programlisting>

      <para>
      On each <application>puppet</application> client, add an entry for the server:
      </para>

<programlisting>
192.168.1.16 meercat.example.com meercat puppet
</programlisting>

      <note>
        <para>
        Replace the example IP addresses and domain names above with your actual server and client addresses and domain names.
        </para>
      </note>

      <para>
      Now setup some resources for <application>apache2</application>.  Create a file <filename>/etc/puppet/manifests/site.pp</filename>
      containing the following:
      </para>

<programlisting>
package {
    'apache2':
        ensure => installed
}

service {
    'apache2':
        ensure => true,
        enable => true,
        require => Package['apache2']
}
</programlisting>


      <para>
      Next, create a node file <filename>/etc/puppet/manifests/nodes.pp</filename> with:
      </para>

<programlisting>
node 'meercat02.example.com' {
   include apache2
}
</programlisting>

      <note>
        <para>
        Replace <emphasis>meercat02.example.com</emphasis> with your actual puppet client's host name.
        </para>
      </note>

      <para>
      The final step for this simple <application>puppet</application> server is to restart the daemon:
      </para>

<screen>
<command>sudo /etc/init.d/puppetmaster restart</command>
</screen>

      <para>
      Now everything is configured on the <application>puppet</application> server, it is time to configure the client.  
      </para>

      <para>
      First, configure the <application>puppet agent</application> daemon to start.  Edit <filename>/etc/default/puppet</filename>, changing 
      <emphasis>START</emphasis> to yes:
      </para>

<programlisting>
START=yes
</programlisting>

      <para>
      Then start the service:
      </para>

<screen>
<command>sudo /etc/init.d/puppet start</command>
</screen>

      <para>
      Back on the <application>puppet</application> server sign the client certificate by entering:
      </para>

<screen>
<command>sudo puppetca --sign meercat02.example.com</command>
</screen>

      <para>
      Check <filename>/var/log/syslog</filename> for any errors with the configuration.  If all goes well the <application>apache2</application>
      package and it's dependencies will be installed on the <application>puppet</application> client.
      </para>

      <note>
        <para>
        This example is <emphasis>very</emphasis> simple, and does not highlight many of <application>Puppet's</application> features and 
        benefits.  For more information see <xref linkend="puppet-resources"/>.
        </para>
      </note>

    </sect2>
    <sect2 id="puppet-resources" status="review">
      <title>Resources</title>

      <itemizedlist>
        <listitem>
          <para>
          See the <ulink url="http://docs.puppetlabs.com/">Official Puppet Documentation</ulink> web site.
          </para>
        </listitem>
        <listitem>
          <para>
          Also see <ulink url="http://apress.com/book/view/1590599780">Pulling Strings with Puppet</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
          Another source of additional information is the <ulink url="https://help.ubuntu.com/community/Puppet">Ubuntu Wiki Puppet Page</ulink>.
          </para>
        </listitem>
      </itemizedlist>

    </sect2>
  </sect1>
</chapter>
