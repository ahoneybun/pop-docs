<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" 
	"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
<!ENTITY % globalent SYSTEM "../../libs/global.ent">
%globalent;
<!ENTITY % gnome-menus-C SYSTEM "../../libs/gnome-menus-C.ent">
%gnome-menus-C;
<!ENTITY % xinclude SYSTEM "../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "&EnglishAmerican;">
]>
<chapter id="networking" status="review">
	<title>Networking</title>
	<para>
	Networks consist of two or more devices, such as computer systems, printers, 
	and related equipment which are connected by either physical cabling or 
	wireless links for the purpose of sharing and distributing information among 
	the connected devices. 
  	</para>
  	<para>
	This section provides general and specific information pertaining
        to networking, including an overview of network concepts and detailed 
	discussion of popular network protocols.
	</para>

	<sect1 id="network-configuration" status="review">
	<title>Network Configuration</title>
	<para>
	Ubuntu ships with a number of graphical utilities to configure your 
	network devices.  This document is geared toward server administrators 
	and will focus on managing your	network on the command line.
    </para>

		<sect2 id="ethernet-interfaces" status="review">
		<title>Ethernet Interfaces</title>
		<para>
		Ethernet interfaces are identified by the system using the naming convention of 
		<emphasis role="italix">ethX</emphasis>, where <emphasis role="italic">X</emphasis> 
		represents a numeric value.  The first Ethernet interface is typically identified 
		as <emphasis role="italic">eth0</emphasis>, the second as 
		<emphasis role="italic">eth1</emphasis>, and all others should move up in 
		numerical order.
		</para>

			<sect3 id="identify-ethernet-interfaces" status="review">
			<title>Identify Ethernet Interfaces</title>
			<para>
			To quickly identify all available Ethernet interfaces, you can use the 
			<application>ifconfig</application> command as shown below.
			</para>
<screen>
<userinput>ifconfig -a | grep eth</userinput>
eth0      Link encap:Ethernet  HWaddr 00:15:c5:4a:16:5a
</screen>
			<para>
			Another application that can help identify all network interfaces available to your system 
			is the <application>lshw</application> command.  In the example below, <application>lshw</application> 
			shows a single Ethernet interface with the logical name of <emphasis role="italic">eth0</emphasis>
			along with bus information, driver details and all supported capabilities.
			</para>
<screen>
<userinput>sudo lshw -class network</userinput>
  *-network
       description: Ethernet interface
       product: BCM4401-B0 100Base-TX
       vendor: Broadcom Corporation
       physical id: 0
       bus info: pci@0000:03:00.0
       logical name: eth0
       version: 02
       serial: 00:15:c5:4a:16:5a
       size: 10MB/s
       capacity: 100MB/s
       width: 32 bits
       clock: 33MHz
       capabilities: (snipped for brevity)
       configuration: (snipped for brevity)
       resources: irq:17 memory:ef9fe000-ef9fffff
</screen>
			</sect3>

			<sect3 id="ethernet-interface-names" status="review">
			<title>Ethernet Interface Logical Names</title>
			<para>
			Interface logical names are configured in the file 
			<filename>/etc/udev/rules.d/70-persistent-net.rules.</filename>  If you would 
			like control which interface receives a particular logical name, find the line 
			matching the interfaces physical MAC address and modify the value of 
			<emphasis role="italic">NAME=ethX</emphasis> to the desired logical name. 
			Reboot the system to commit your changes.
			</para>
<programlisting>
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:15:c5:4a:16:5a", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="00:15:c5:4a:16:5b", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="eth*", NAME="eth1"
</programlisting>
			</sect3>

			<sect3 id="ethernet-interface-settings" status="review">
			<title>Ethernet Interface Settings</title>
			<para>
			<application>ethtool</application> is a program that displays and changes Ethernet 
			card settings such as auto-negotiation, port speed, duplex mode, and Wake-on-LAN. It
			is not installed by default, but is available for installation in the repositories.
			</para>
<screen>
<userinput>sudo apt-get install ethtool</userinput>
</screen>
			<para>
			The following is an example of how to view supported features and configured 
			settings of an Ethernet interface.
			</para>
<screen>
<userinput>sudo ethtool eth0</userinput>
Settings for eth0:
        Supported ports: [ TP ]
        Supported link modes:   10baseT/Half 10baseT/Full 
                                100baseT/Half 100baseT/Full 
                                1000baseT/Half 1000baseT/Full 
        Supports auto-negotiation: Yes
        Advertised link modes:  10baseT/Half 10baseT/Full 
                                100baseT/Half 100baseT/Full 
                                1000baseT/Half 1000baseT/Full 
        Advertised auto-negotiation: Yes
        Speed: 1000Mb/s
        Duplex: Full
        Port: Twisted Pair
        PHYAD: 1
        Transceiver: internal
        Auto-negotiation: on
        Supports Wake-on: g
        Wake-on: d
        Current message level: 0x000000ff (255)
        Link detected: yes
</screen>
			<para>
			Changes made with the <application>ethtool</application> command are temporary 
			and will be lost after a reboot. If you would like to retain settings, simply add 
			the desired <application>ethtool</application> command to a <emphasis role="italic">pre-up</emphasis> 
			statement in the interface configuration file <filename>/etc/network/interfaces</filename>. 
			</para>
			<para>
			The following is an example of how the interface identified as <emphasis role="italic">eth0</emphasis>
			could be permanently configured with a port speed of 1000Mb/s running in full duplex mode.
			</para>
<programlisting>
auto eth0
iface eth0 inet static
pre-up /usr/sbin/ethtool -s eth0 speed 1000 duplex full
</programlisting>
			<note>
			<para>
			Although the example above shows the interface configured to use the 
			<emphasis role="italic">static</emphasis> method, it actually works with other 
			methods as well, such as DHCP.  The example is meant to demonstrate only proper 
			placement of the <emphasis role="italic">pre-up</emphasis> statement in relation 
			to the rest of the interface configuration.
			</para>
			</note>
			</sect3>
		</sect2>

		<sect2 id="ip-addressing" status="review">
		<title>IP Addressing</title>
		<para>
		The following section describes the process of configuring your systems IP address
		and default gateway needed for communicating on a local area network and the
		Internet.
		</para>

			<sect3 id="temp-ip-assignment" status="review">
			<title>Temporary IP Address Assignment</title>
			<para>
			For temporary network configurations, you can use standard commands 
			such as <application>ip</application>, <application>ifconfig</application> 
			and <application>route</application>, which are also found on most other 
			GNU/Linux operating systems.  These commands allow you to configure settings
			which take effect immediately, however they are not persistent and will
			be lost after a reboot.
			</para>
			<para>
			To temporarily configure an IP address, you can use the <application>ifconfig</application> 
			command in the following manner. Just modify the IP address and subnet mask to match your 
			network requirements.
			</para>
<screen>
<userinput>sudo ifconfig eth0 10.0.0.100 netmask 255.255.255.0</userinput>
</screen>
			<para>
			To verify the IP address configuration of <application>eth0</application>, 
			you can use the <application>ifconfig</application> command in the following manner.
			</para>
<screen>
<userinput>ifconfig eth0</userinput>
eth0      Link encap:Ethernet  HWaddr 00:15:c5:4a:16:5a  
          inet addr:10.0.0.100  Bcast:10.0.0.255  Mask:255.255.255.0
          inet6 addr: fe80::215:c5ff:fe4a:165a/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:466475604 errors:0 dropped:0 overruns:0 frame:0
          TX packets:403172654 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:2574778386 (2.5 GB)  TX bytes:1618367329 (1.6 GB)
          Interrupt:16 
</screen>
			<para>
			To configure a default gateway, you can use the <application>route</application> 
			command in the following manner.  Modify the default gateway address to match 
			your network requirements.
			</para>
<screen>
<userinput>sudo route add default gw 10.0.0.1 eth0</userinput>
</screen>
			<para>
			To verify your default gateway configuration, you can use the <application>route</application> 
			command in the following manner.
			</para>
<screen>
<userinput>route -n</userinput>
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.0.0.0        0.0.0.0         255.255.255.0   U     1      0        0 eth0
0.0.0.0         10.0.0.1        0.0.0.0         UG    0      0        0 eth0
</screen>
			<para>
			If you require DNS for your temporary network configuration, you can add DNS server
			IP addresses in the file <filename>/etc/resolv.conf</filename>. The example below 
			shows how to enter two DNS servers to <filename>/etc/resolv.conf</filename>, which 
			should be changed to servers appropriate for your network. A more lengthy description 
			of DNS client configuration is in a following section.
			</para>
<programlisting>
nameserver 8.8.8.8
nameserver 8.8.4.4
</programlisting>
			<para>
			If you no longer need this configuration and wish to purge all IP configuration from
			an interface, you can use the <application>ip</application> command with the flush option
			as shown below.  
			</para>
<screen>
<userinput>ip addr flush eth0</userinput>
</screen>
			<note>
			<para>
			Flushing the IP configuration using the <application>ip</application> command does not clear the 
			contents of <filename>/etc/resolv.conf</filename>.  You must remove or modify those entries manually.
			</para>
			</note>
			</sect3>

			<sect3 id="dynamic-ip-addressing" status="review">
			<title>Dynamic IP Address Assignment (DHCP Client)</title>
			<para>
			To configure your server to use DHCP for dynamic address assignment, add the
			<emphasis role="italic">dhcp</emphasis> method to the inet address family statement 
			for the appropriate interface in the file <filename>/etc/network/interfaces</filename>.
			The example below assumes you are configuring your first Ethernet interface identified as 
			<emphasis role="italic">eth0</emphasis>.
			</para>
<programlisting>
auto eth0
iface eth0 inet dhcp
</programlisting>
			<para>
			By adding an interface configuration as shown above, you can manually enable the 
			interface through the <application>ifup</application> command which initiates the 
			DHCP process via <application>dhclient</application>.
			</para>
<screen>
<userinput>sudo ifup eth0</userinput>
</screen>
			<para>
			To manually disable the	interface, you can use the <application>ifdown</application> 
			command, which in turn will initiate the DHCP release process and shut down the 
			interface.
			</para>
<screen>
<userinput>sudo ifdown eth0</userinput>
</screen>
			</sect3>

			<sect3 id="static-ip-addressing" status="review">
			<title>Static IP Address Assignment</title>
			<para>
			To configure your system to use a static IP address assignment, add the 
			<emphasis role="italic">static</emphasis> method to the inet address family statement 
			for the appropriate interface in the file <filename>/etc/network/interfaces</filename>. 
			The example below assumes you are configuring your first Ethernet interface identified as 
			<emphasis role="italic">eth0</emphasis>.  Change the <emphasis role="italic">address</emphasis>, 
			<emphasis role="italic">netmask</emphasis>, and <emphasis role="italic">gateway</emphasis> 
			values to meet the requirements of your network.
			</para>
<programlisting>
auto eth0
iface eth0 inet static
address 10.0.0.100
netmask 255.255.255.0
gateway 10.0.0.1
</programlisting>
			<para>
			By adding an interface configuration as shown above, you can manually enable the 
			interface through the <application>ifup</application> command.
			</para>
<screen>
<userinput>sudo ifup eth0</userinput>
</screen>
			<para>
			To manually disable the	interface, you can use the <application>ifdown</application> 
			command.
			</para>
<screen>
<userinput>sudo ifdown eth0</userinput>
</screen>
			</sect3>

			<sect3 id="loopback-interface" status="review">
			<title>Loopback Interface</title>
			<para>
			The loopback interface is identified by the system as <emphasis role="italic">lo</emphasis>
			and has a default IP address of 127.0.0.1.  It can be viewed using the ifconfig command. 
			</para>
<screen>
<userinput>ifconfig lo</userinput>
lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:2718 errors:0 dropped:0 overruns:0 frame:0
          TX packets:2718 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:183308 (183.3 KB)  TX bytes:183308 (183.3 KB)
</screen>
			<para>
			By default, there should be two lines in <filename>/etc/network/interfaces</filename> 
			responsible for automatically configuring your loopback interface. It is recommended that you 
			keep the default settings unless you have a specific purpose for changing them.  An example of 
			the two default lines are shown below.
			</para>
<programlisting>
auto lo
iface lo inet loopback
</programlisting>
			</sect3>
		</sect2>


		<sect2 id="name-resolution" status="review">
		<title>Name Resolution</title>
		<para>
		Name resolution as it relates to IP networking is the process of mapping IP addresses 
		to hostnames, making it easier to identify resources on a network.  The following section
		will explain how to properly configure your system for name resolution using DNS and static
		hostname records.
		</para>

			<sect3 id="dns-client-configuration" status="review">
			<title>DNS Client Configuration</title>
			<para>
			To configure your system to use DNS for name resolution, add the IP addresses of the DNS 
			servers that are appropriate for your network in the file <filename>/etc/resolv.conf</filename>. 
			You can also add an optional DNS suffix search-lists to match your network domain names.
			</para>
			<para>
			Below is an example of a typical configuration of <filename>/etc/resolv.conf</filename>
			for a server on the domain "<emphasis role="italic">example.com</emphasis>" and using 
			two public DNS servers.
			</para>
<programlisting>
search example.com
nameserver 8.8.8.8
nameserver 8.8.4.4
</programlisting>
			<para>
			The <emphasis role="italic">search</emphasis> option can also be used with multiple domain names 
			so that DNS queries will be appended in the order in which they are entered.  For example,
			your network may have multiple sub-domains to search; a parent domain of 
			<emphasis role="italic">example.com</emphasis>, and two sub-domains, 
			<emphasis role="italic">sales.example.com</emphasis> and 
			<emphasis role="italic">dev.example.com</emphasis>.  
			</para>
			<para>
			If you have multiple domains you wish to search, your configuration might look like the following.
			</para>
<programlisting>
search example.com sales.example.com dev.example.com
nameserver 8.8.8.8
nameserver 8.8.4.4
</programlisting>
			<para>
			If you try to ping a host with the name of <emphasis role="italic">server1</emphasis>, your system 
			will automatically query DNS for its Fully Qualified Domain Name (FQDN) in the following order:
			</para>
			<orderedlist>
			<listitem>
			<para>
			server1<emphasis role="bold">.example.com</emphasis>
			</para>
			</listitem>
			<listitem>
			<para>
			server1<emphasis role="bold">.sales.example.com</emphasis>
			</para>
			</listitem>
			<listitem>
			<para>
			server1<emphasis role="bold">.dev.example.com</emphasis>
			</para>
			</listitem>
			</orderedlist>
			<para>
			If no matches are found, the DNS server will provide a result of 
			<emphasis role="italic">notfound</emphasis> and the DNS query will fail.
			</para>
			</sect3>

			<sect3 id="static-hostnames" status="review">
			<title>Static Hostnames</title>
			<para>
			Static hostnames are locally defined hostname-to-IP mappings located in the file <filename>/etc/hosts</filename>.
			Entries in the <filename>hosts</filename> file will have precedence over DNS by default. This means that if your
			system tries to resolve a hostname and it matches an entry in /etc/hosts, it will not attempt to look up the
			record in DNS.  In some configurations, especially when Internet access is not required, servers that 
			communicate with a limited number of resources can be conveniently set to use static hostnames instead of DNS.
			</para>
			<para>
			The following is an example of a <filename>hosts</filename> file where a number of local servers 
			have been identified by simple hostnames, aliases and their equivalent Fully Qualified Domain Names (FQDN's).
			</para>
<programlisting>
127.0.0.1	localhost
127.0.1.1	ubuntu-server
10.0.0.11	server1 vpn server1.example.com
10.0.0.12	server2 mail server2.example.com
10.0.0.13	server3 www server3.example.com
10.0.0.14	server4 file server4.example.com
</programlisting>
			<note>
			<para>
			In the above example, notice that each of the servers have been given aliases in addition to their 
			proper names and FQDN's. <emphasis role="italic">Server1</emphasis> has been mapped to the name 
			<emphasis role="italic">vpn</emphasis>, <emphasis role="italic">server2</emphasis> is referred 
			to as <emphasis role="italic">mail</emphasis>, <emphasis role="italic">server3</emphasis> as 
			<emphasis role="italic">www</emphasis>, and <emphasis role="italic">server4</emphasis> as 
			<emphasis role="italic">file</emphasis>.
			</para>
			</note>
			</sect3>

			<sect3 id="name-service-switch-config" status="review">
			<title>Name Service Switch Configuration</title>
			<para>
			The order in which your system selects a method of resolving hostnames to IP addresses is
			controlled by the Name Service Switch (NSS) configuration file <filename>/etc/nsswitch.conf</filename>.
			As mentioned in the previous section, typically static hostnames defined in the systems 
			<filename>/etc/hosts</filename> file have precedence over names resolved from DNS. The following 
			is an example of the line responsible for this order of hostname lookups in the file 
			<filename>/etc/nsswitch.conf</filename>.
			</para>
<programlisting>
hosts:          files mdns4_minimal [NOTFOUND=return] dns mdns4
</programlisting>

			<itemizedlist>
			<listitem>
			<para>
			<emphasis role="bold">files</emphasis> first tries to resolve static hostnames located in 
			<filename>/etc/hosts</filename>.
			</para>
			</listitem>
			<listitem>
			<para>
			<emphasis role="bold">mdns4_minimal</emphasis> attempts to resolve the name using Multicast DNS.
			</para>
			</listitem>
			<listitem>
			<para>
			<emphasis role="bold">[NOTFOUND=return]</emphasis> means that any response of 
			<emphasis role="italic">notfound</emphasis> by the preceding 
			<emphasis role="italic">mdns4_minimal</emphasis> process should be treated as 
			authoritative and that the system should not try to continue hunting for an answer.
			</para>
			</listitem>
			<listitem>
			<para>
			<emphasis role="bold">dns</emphasis> represents a legacy unicast DNS query.
			</para>
			</listitem>
			<listitem>
			<para>
			<emphasis role="bold">mdns4</emphasis> represents a Multicast DNS query.
			</para>
			</listitem>
			</itemizedlist>

			<para>
			To modify the order of the above mentioned name resolution methods, you can
			simply change the <emphasis role="italic">hosts:</emphasis> string to the value 
			of your choosing. For example, if you prefer to use legacy Unicast DNS versus 
			Multicast DNS, you can change the string in <filename>/etc/nsswitch.conf</filename> 
			as shown below.
			</para>
<programlisting>
hosts:          files dns [NOTFOUND=return] mdns4_minimal mdns4
</programlisting>
			</sect3>
		</sect2>

    <sect2 id="bridging" status="review">
      <title>Bridging</title>

      <para>
      Bridging multiple interfaces is a more advanced configuration, but is very useful in multiple scenarios.  
      One scenario is setting up a bridge with multiple network interfaces, then using a firewall to filter traffic
      between two network segments.  Another scenario is using bridge on a system with one interface to allow virtual
      machines direct access to the outside network.  The following example covers the latter scenario.
      </para>

      <para>
      Before configuring a bridge you will need to install the <application>bridge-utils</application> package.  To install the 
      package, in a terminal enter:
      </para>

<screen>
<command>sudo apt-get install bridge-utils</command>
</screen>

      <para>
      Next, configure the bridge by editing <filename>/etc/network/interfaces</filename>:
      </para>

<programlisting>
auto lo
iface lo inet loopback

auto br0
iface br0 inet static
        address 192.168.0.10
        network 192.168.0.0
        netmask 255.255.255.0
        broadcast 192.168.0.255
        gateway 192.168.0.1
        bridge_ports eth0
        bridge_fd 9
        bridge_hello 2
        bridge_maxage 12
        bridge_stp off
</programlisting>

      <note>
        <para>
        Enter the appropriate values for your physical interface and network.
        </para>
      </note>

      <para>
      Now restart networking to enable the bridge interface:
      </para>

<screen>
<command>sudo /etc/init.d/networking restart</command>
</screen>
        <para>
        The new bridge interface should now be up and running.  The <application>brctl</application> provides useful information
        about the state of the bridge, controls which interfaces are part of the bridge, etc.  See <command>man brctl</command> 
        for more information.        
        </para>

      </sect2>
      <sect2 id="network-config-resources" status="review">
        <title>Resources</title>
    
        <para>
        
        </para>

        <itemizedlist>
          <listitem>
            <para>
            The <ulink url="https://help.ubuntu.com/community/Network">Ubuntu Wiki Network page</ulink> has 
            links to articles covering more advanced network configuration.
            </para>
          </listitem>
          <listitem>
            <para>
            The <ulink url="http://manpages.ubuntu.com/manpages/&distro-short-codename;/en/man5/interfaces.5.html">interfaces man page</ulink> has 
            details on more options for <filename>/etc/network/interfaces</filename>.
            </para>
          </listitem>
          <listitem>
            <para>
            The <ulink url="http://manpages.ubuntu.com/manpages/&distro-short-codename;/en/man8/dhclient.8.html">dhclient man page</ulink> has 
            details on more options for configuring DHCP client settings.
            </para>
          </listitem>
          <listitem>
            <para>
            For more information on DNS client configuration see the 
            <ulink url="http://manpages.ubuntu.com/manpages/&distro-short-codename;/en/man5/resolver.5.html">resolver man page</ulink>.  Also, Chapter 
            6 of O'Reilly's <ulink url="http://oreilly.com/catalog/linag2/book/ch06.html">Linux Network Administrator's Guide</ulink> is 
            a good source of resolver and name service configuration information.
            </para>
          </listitem>
          <listitem>
            <para>
            For more information on <emphasis>bridging</emphasis> see the 
            <ulink url="http://manpages.ubuntu.com/manpages/&distro-short-codename;/en/man8/brctl.8.html">brctl man page</ulink> and the Linux Foundation's
            <ulink url="http://www.linuxfoundation.org/en/Net:Bridge">Net:Bridge</ulink> page.
            </para>
          </listitem>
        </itemizedlist>

      </sect2>
    </sect1>
	<sect1 id="tcpip" status="review">
		<title>TCP/IP</title>
          <para>
            The Transmission Control Protocol and Internet Protocol (TCP/IP) is a standard 
			set of protocols developed in the late 1970s by the Defense Advanced Research 
			Projects Agency (DARPA) as a means of communication between different types of 
			computers and computer networks. TCP/IP is the driving force of the Internet, 
			and thus it is the most popular set of network protocols on Earth. 
          </para>
      <sect2 id="tcpip-introduction" status="review">
        <title>TCP/IP Introduction</title> 
          <para>
            The two protocol components of TCP/IP deal with different aspects of computer networking.
            <emphasis>Internet Protocol</emphasis>, the "IP" of TCP/IP is a 
			connectionless protocol which deals only with network packet routing using the <emphasis 
			role="italics">IP Datagram</emphasis> as the basic unit of networking information.  The 
			IP Datagram consists of a header followed by a message.  The <emphasis>
			Transmission Control Protocol</emphasis> is the "TCP" of TCP/IP and enables network hosts 
			to establish connections which may be used to exchange data streams.  TCP also guarantees 
			that the data between connections is delivered and that it arrives at one network host in 
			the same order as sent from another network host.
          </para>
          </sect2>
        <sect2 id="tcpip-configuration" status="review">
          <title>TCP/IP Configuration</title>
            <para>
            The TCP/IP protocol configuration consists of several elements which must be set by 
			editing the appropriate configuration files, or deploying solutions such as the Dynamic 
			Host Configuration Protocol (DHCP) server which in turn, can be configured to provide the 
			proper TCP/IP configuration settings to network clients automatically. These 
			configuration values must be set correctly in order to facilitate the proper network 
			operation of your Ubuntu system.
            </para>
            <para>
            The common configuration elements of TCP/IP and their purposes are as follows:
            <itemizedlist>
               <listitem>
                  <para>
                  <emphasis role="bold">IP address</emphasis> The IP address is a unique
                  identifying string expressed as four decimal numbers ranging from zero (0)
                  to two-hundred and fifty-five (255), separated by periods,
                  with each of the four numbers representing eight (8) bits of the address for a
                  total length of thirty-two (32) bits for the whole address. This format is called
                  <emphasis>dotted quad
                  notation</emphasis>.</para>
               </listitem>
               <listitem>
                  <para>
                  <emphasis role="bold">Netmask</emphasis> The Subnet Mask (or simply,
                  <emphasis>netmask</emphasis>) is a local bit mask, or set of flags
                  which separate the portions of an IP address significant to the network from the
                  bits significant to the <emphasis>subnetwork</emphasis>.  For example,
                  in a Class C network, the standard netmask is 255.255.255.0 which masks the first
                  three bytes of the IP address and allows the last byte of the IP address to
                  remain available for specifying hosts on the subnetwork.
                  </para>
               </listitem>
               <listitem>
                  <para>
                  <emphasis role="bold">Network Address</emphasis> The Network Address represents the
                  bytes comprising the network portion of an IP address.  For example, the host 12.128.1.2
                  in a Class A network would use 12.0.0.0 as the network address, where twelve (12)
                  represents the first byte of the IP address, (the network part) and zeroes (0) 
                  in all of the remaining three bytes to represent the potential host values.  A network
                  host using the private IP address 192.168.1.100
                  would in turn use a Network Address of 192.168.1.0, which specifies the first three
                  bytes of the Class C 192.168.1 network and a zero (0) for all the possible hosts on the
                  network.
                  </para>
               </listitem>
               <listitem>
                  <para>
                  <emphasis role="bold">Broadcast Address</emphasis> The Broadcast Address is an IP address
                  which allows network data to be sent simultaneously to all hosts on a given subnetwork rather
                  than specifying a particular host.  The standard general broadcast address for IP networks is
                  255.255.255.255, but this broadcast address cannot be used to send a broadcast message to
                  every host on the Internet because routers block it.  A more appropriate broadcast address
                  is set to match a specific subnetwork.  For example, on the private Class C IP network,
                  192.168.1.0, the broadcast address is 192.168.1.255. Broadcast messages are
                  typically produced by network protocols such as the Address Resolution Protocol (ARP) and the 
                  Routing Information Protocol (RIP).             
                  </para>
               </listitem>
               <listitem>
                  <para>
                  <emphasis role="bold">Gateway Address</emphasis> A Gateway Address is the IP address through which
                  a particular network, or host on a network, may be reached.  If one network host wishes to communicate
                  with another network host, and that host is not located on the same network, then a 
                  <emphasis>gateway</emphasis> must be used. In many cases, the Gateway Address will be that
                  of a router on the same network, which will in turn pass traffic on to other networks or hosts, such as
                  Internet hosts.  The value of the Gateway Address setting must be correct, or your system will not be able
                  to reach any hosts beyond those on the same network.                  
                  </para>
               </listitem>
               <listitem>
                  <para>
                  <emphasis role="bold">Nameserver Address</emphasis> Nameserver Addresses represent the IP addresses of
                  Domain Name Service (DNS) systems, which resolve network hostnames into IP addresses.  There are three levels of
                  Nameserver Addresses, which may be specified in order of precedence: The 
                  <emphasis>Primary</emphasis>
                  Nameserver, the <emphasis>Secondary</emphasis> Nameserver, and the 
                  <emphasis>Tertiary</emphasis>
                  Nameserver. In order for your system to be able to resolve network hostnames into their
                  corresponding IP addresses, you must specify valid Nameserver Addresses which you are authorized to use
                  in your system's TCP/IP configuration.  In many cases these addresses can and will be provided by your
                  network service provider, but many free and publicly accessible nameservers are available for use, such as
                  the Level3 (Verizon) servers with IP addresses from
                  4.2.2.1 to 4.2.2.6. </para>
                     <tip>
                        <para>
                        The IP address, Netmask, Network Address, Broadcast Address, and Gateway Address
                        are typically specified via the appropriate directives in the file  <filename>/etc/network/interfaces</filename>. The Nameserver Addresses are typically specified via  <emphasis>nameserver</emphasis> 
                        directives in the file <filename>/etc/resolv.conf</filename>. For more information, 
                        view the system manual page for <filename>interfaces</filename> or <filename>resolv.conf</filename> respectively, with the following commands typed at a terminal prompt:
                        </para>
                     </tip>
                    <para>
                    Access the system manual page for <filename>interfaces</filename> with the following command:
                    </para>
                    <para>
<screen>
<command>man interfaces</command>
</screen>
                    </para>
                    <para>
                    Access the system manual page for <filename>resolv.conf</filename> with the following command:
                    </para>
                    <para>
<screen><command>man resolv.conf</command></screen>
                    </para>
               </listitem>
            </itemizedlist>
            </para>
        </sect2>
        <sect2 id="ip-routing" status="review">
          <title>IP Routing</title>
            <para>
              IP routing is a means of specifying and discovering paths in a TCP/IP network along which
              network data may be sent.  Routing uses a set of <emphasis>routing tables</emphasis>
              to direct the forwarding of network data packets from their source to the destination, often
              via many intermediary network nodes known as <emphasis>routers</emphasis>.
              There are two primary forms of
              IP routing: <emphasis>Static Routing</emphasis> and 
              <emphasis>Dynamic Routing.</emphasis>
            </para>
            <para>
            Static routing involves manually adding IP routes to the system's routing table, and this is usually
            done by manipulating the routing table with the <application>route</application> command. Static routing enjoys
            many advantages over dynamic routing, such as simplicity of implementation on smaller networks, 
            predictability (the routing table is always computed in advance, and thus the route is precisely the 
            same each time it is used), and low overhead on other routers and network links due to the lack of a
            dynamic routing protocol.  However, static routing does present some disadvantages as well.  For example,
            static routing is limited to small networks and does not scale well.  Static routing also fails completely
            to adapt to network outages and failures along the route due to the fixed nature of the route. 
            </para>
            <para>
            Dynamic routing depends on large networks with multiple possible IP routes from a source to a destination
            and makes use of special routing protocols, such as the Router Information Protocol (RIP), which handle
            the automatic adjustments in routing tables that make dynamic routing possible.  Dynamic routing
            has several advantages over static routing, such as superior scalability and the ability to adapt
            to failures and outages along network routes. Additionally, there is less manual configuration of the
            routing tables, since routers learn from one another about their existence and available routes. This trait
            also eliminates the possibility of introducing mistakes in the routing tables via human error.
            Dynamic routing is not perfect, however, and presents disadvantages such as heightened complexity and
            additional network overhead from router communications, which does not immediately benefit the end users,
            but still consumes network bandwidth.
            </para>
        </sect2>
        <sect2 id="tcp-and-udp" status="review">
          <title>TCP and UDP</title>
            <para>
              TCP is a connection-based protocol, offering error correction and guaranteed delivery of
              data via what is known as <emphasis>flow control</emphasis>. Flow control
              determines when the flow of a data stream needs to be stopped, and previously sent data
              packets should to be re-sent due to problems such as <emphasis>collisions</emphasis>,
              for example, thus ensuring complete and accurate delivery of the data.  TCP is typically
              used in the exchange of important information such as database transactions. 
            </para>
            <para>
              The User Datagram Protocol (UDP), on the other hand, is a <emphasis>connectionless</emphasis>
              protocol which seldom deals with the transmission of important data because it lacks flow
              control or any other method to ensure reliable delivery of the data.  UDP is commonly used
              in such applications as audio and video streaming, where it is considerably faster than
              TCP due to the lack of error correction and flow control, and where the loss of a few packets
			  is not generally catastrophic.
            </para>
        </sect2>
        <sect2 id="icmp" status="review">
          <title>ICMP</title>
            <para>
              The Internet Control Messaging Protocol (ICMP) is an extension to the Internet Protocol (IP) as defined
              in the Request For Comments (RFC) #792 and supports network packets containing control, error, and
              informational messages.  ICMP is used by such network applications as the <application>ping</application>
              utility, which can determine the availability of a network host or device.  Examples of some error messages
              returned by ICMP which are useful to both network hosts and devices such as routers, include 
              <emphasis>Destination Unreachable</emphasis> and <emphasis>Time Exceeded</emphasis>.
            </para>
        </sect2>
        <sect2 id="daemons" status="review">
          <title>Daemons</title>
            <para>
              Daemons are special system applications which typically execute continuously in the background and
              await requests for the functions they provide from other applications.  Many daemons are network-centric; that is,
              a large number of daemons executing in the background on an Ubuntu system may provide network-related functionality.
              Some examples of such network daemons include the <emphasis>Hyper Text Transport Protocol Daemon</emphasis> 
              (httpd), which provides web server functionality; the <emphasis>Secure SHell Daemon</emphasis> (sshd), which
              provides secure remote login shell and file transfer capabilities; and the <emphasis>Internet Message Access 
              Protocol Daemon</emphasis> (imapd), which provides E-Mail services.
            </para>
        </sect2>
        <sect2 id="tcpip-resources" status="review">
          <title>Resources</title>

          <itemizedlist>
            <listitem>
              <para>
              There are man pages for <ulink url="http://manpages.ubuntu.com/manpages/&distro-short-codename;/en/man7/tcp.7.html">TCP</ulink> and
              <ulink url="http://manpages.ubuntu.com/manpages/&distro-short-codename;/man7/ip.7.html">IP</ulink> that contain more useful information.
              </para>
            </listitem>
            <listitem>
              <para>
              Also, see the <ulink url="http://www.redbooks.ibm.com/abstracts/gg243376.html">TCP/IP Tutorial and Technical Overview</ulink>
              IBM Redbook.
              </para>
            </listitem>
            <listitem>
              <para>
              Another resource is O'Reilly's <ulink url="http://oreilly.com/catalog/9780596002978/">TCP/IP Network Administration</ulink>.
              </para>
            </listitem>
          </itemizedlist>
        </sect2>
    </sect1>

	<sect1 id="dhcp" status="review">
		<title>Dynamic Host Configuration Protocol (DHCP)</title>
            <para>
	    The Dynamic Host Configuration Protocol (DHCP) is a network service that enables 
	    host computers to be automatically assigned settings from a server as opposed to
            manually configuring each network host. Computers configured to be DHCP clients have
            no control over the settings they receive from the DHCP server, and the 
	    configuration is transparent to the computer's user.
	    </para>
            <para>
	    The most common settings provided by a DHCP server to DHCP clients include:
	    </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>IP-Address and Netmask</para>
                </listitem>
                <listitem>
                    <para>DNS</para>
                </listitem>
                <listitem>
                    <para>WINS</para>
                </listitem>
            </itemizedlist>
            <para>
	    However, a DHCP server can also supply configuration properties such as:
	    </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Host Name</para>
                </listitem>
                <listitem>
                    <para>Domain Name</para>
                </listitem>
                <listitem>
                    <para>Default Gateway</para>
                </listitem>
                <listitem>
                    <para>Time Server</para>
                </listitem>
                <listitem>
                    <para>Print Server</para>
                </listitem>
            </itemizedlist>
            <para>
	    The advantage of using DHCP is that changes to the network, for example a change
            in the address of the DNS server, need only be changed at the DHCP server, and all
            network hosts will be reconfigured the next time their DHCP clients poll the
            DHCP server. As an added advantage, it is also easier to integrate new computers 
	    into the network, as there is no need to check for the availability of an IP 
	    address.  Conflicts in IP address allocation are also reduced.
	    </para>
            <para>
	    A DHCP server can provide configuration settings using two methods:
	    </para>
            <variablelist>
                <varlistentry>
                    <term>MAC Address</term>
                    <listitem>
                        <para>
			This method entails using DHCP to identify the unique hardware address
                        of each network card connected to the network and then continually
                        supplying a constant configuration each time the DHCP client makes a
                        request to the DHCP server using that network device.
			</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Address Pool</term>
                    <listitem>
                        <para>
			This method entails defining a pool (sometimes also called a range or
                        scope) of IP addresses from which DHCP clients are supplied their
                        configuration properties dynamically and on a "first come, first served"
                        basis. When a DHCP client is no longer on the network for a specified
                        period, the configuration is expired and released back to the address
                        pool for use by other DHCP Clients.
			</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>
	    Ubuntu is shipped with both DHCP server and client. The server is
            <application>dhcpd</application> (dynamic host configuration protocol daemon).
            The client provided with Ubuntu is <application>dhclient</application> and should 
	    be installed on all computers required to be automatically configured. Both 
	    programs are easy to install and configure and will be automatically started at
	    system boot.
	    </para>
      <sect2 id="dhcp-installation" status="review">
        <title>Installation</title>
          <para>
	  At a terminal prompt, enter the following command to install
          <application>dhcpd</application>:
	  </para>
<screen>
<command>sudo apt-get install dhcp3-server</command>
</screen>
          <para>
	  You will probably need to change the default configuration
	  by editing /etc/dhcp3/dhcpd.conf to suit your needs and particular configuration.
	  </para>
          <para>
	  You also need to edit /etc/default/dhcp3-server to specify the interfaces dhcpd
	  should listen to. By default it listens to eth0.
	  </para>
          <para>
	  NOTE: dhcpd's messages are being sent to syslog. Look there for
	  diagnostics messages.
	  </para>
      </sect2>
      <sect2 id="dhcp-configuration" status="review">
        <title>Configuration</title>
            <para>
	    The error message the installation ends with might be a little confusing, but the
            following steps will help you configure the service:
	    </para>
            <para>
	    Most commonly, what you want to do is assign an IP address randomly. This can be
            done with settings as follows:
	    </para>
<programlisting>
# Sample /etc/dhcpd.conf
# (add your comments here) 
default-lease-time 600;
max-lease-time 7200;
option subnet-mask 255.255.255.0;
option broadcast-address 192.168.1.255;
option routers 192.168.1.254;
option domain-name-servers 192.168.1.1, 192.168.1.2;
option domain-name "mydomain.example";

subnet 192.168.1.0 netmask 255.255.255.0 {
range 192.168.1.10 192.168.1.100;
range 192.168.1.150 192.168.1.200;
} 
</programlisting>
            <para>
	    This will result in the DHCP server giving a client an IP address from the range
            192.168.1.10-192.168.1.100 or 192.168.1.150-192.168.1.200. It will lease an IP
            address for 600 seconds if the client doesn't ask for a specific time frame. 
	    Otherwise the maximum (allowed) lease will be 7200 seconds. The server will also 
	    "advise" the client that it should use 255.255.255.0 as its subnet mask, 
	    192.168.1.255 as its broadcast address, 192.168.1.254 as the router/gateway and 
	    192.168.1.1 and 192.168.1.2 as its DNS servers. 
	    </para>
            <para>
	    If you need to specify a WINS server for your Windows clients, you will need to
            include the netbios-name-servers option, e.g.
	    </para>
<programlisting>
option netbios-name-servers 192.168.1.1; 
</programlisting>
            <para>
	    Dhcpd configuration settings are taken from the DHCP mini-HOWTO, which can be found
            <ulink url="http://www.tldp.org/HOWTO/DHCP/index.html">here</ulink>.
	    </para>
      </sect2>
      <sect2 id="dhcp-references" status="review">
        <title>References</title>

          <itemizedlist>
            <listitem>
              <para>
              The <ulink url="https://help.ubuntu.com/community/dhcp3-server">dhcp3-server Ubuntu Wiki</ulink> page has more information.
              </para>
            </listitem>
            <listitem>
              <para>
              For more <filename>/etc/dhcp3/dhcpd.conf</filename> options see the 
              <ulink url="http://manpages.ubuntu.com/manpages/&distro-short-codename;/en/man5/dhcpd.conf.5.html">dhcpd.conf man page</ulink>.
              </para>
            </listitem>
            <listitem>
              <para>
              Also see the <ulink url="http://www.dhcp-handbook.com/dhcp_faq.html">DHCP FAQ</ulink>
              </para>
            </listitem>
          </itemizedlist>

      </sect2>
    </sect1>

	<sect1 id="NTP" status="review">
		<title>Time Synchronisation with NTP</title>
	<para>
This page describes methods for keeping your computer's time accurate. This is useful for servers, but is not necessary (or desirable) for desktop machines. 
</para>
	<para>
NTP is a TCP/IP protocol for synchronising time over a network. Basically a client requests the current time from a server, and uses it to set its own clock.  
</para>
	<para>
Behind this simple description, there is a lot of complexity - there are tiers of NTP servers, with the tier one NTP servers connected to atomic clocks (often via GPS), and tier two and three servers spreading the load of actually handling requests across the Internet. Also the client software is a lot more complex than you might think - it has to factor out communication delays, and adjust the time in a way that does not upset all the other processes that run on the server. But luckily all that complexity is hidden from you! 
</para>
	<para>
Ubuntu has two ways of automatically setting your time: ntpdate and ntpd. 
</para>

<sect2 id="ntpdate" status="review">
<title>ntpdate</title>
	<para>
Ubuntu comes with ntpdate as standard, and will run it once at boot time to set up your time according to Ubuntu's NTP server. However, a server's clock is likely to drift considerably between reboots, so it makes sense to correct the time occasionally. The easiest way to do this is to get cron to run ntpdate every day. With your favorite editor, as root, create a file 
<code>/etc/cron.daily/ntpdate</code>
 containing: 
</para>
<screen>ntpdate ntp.ubuntu.com
</screen>
<para>
The file <code>/etc/cron.daily/ntpdate</code> must also be executable.
</para>
<screen>sudo chmod 755 /etc/cron.daily/ntpdate
</screen>
</sect2>
      <sect2 id="ntpd" status="review">
<title>ntpd</title>
	<para>
ntpdate is a bit of a blunt instrument - it can only adjust the time once a day, in one big correction. The ntp daemon ntpd is far more subtle. It calculates the drift of your system clock and continuously adjusts it, so there are no large corrections that could lead to inconsistent logs for instance. The cost is a little processing power and memory, but for a modern server this is negligible. 
</para>
<para>To set up ntpd: </para>
<screen>sudo apt-get install ntp
</screen>
<para/>
</sect2>
<sect2 id="timeservers" status="review">
<title>Changing Time Servers</title>
	<para>
In both cases above, your system will use Ubuntu's NTP server at 
<code>ntp.ubuntu.com</code>
 by default. This is OK, but you might want to use several servers to increase accuracy and resilience, and you may want to use time servers that are geographically closer to you. to do this for ntpdate, change the contents of 
<code>/etc/cron.daily/ntpdate</code>
 to: 
</para>
<screen>ntpdate ntp.ubuntu.com pool.ntp.org 
</screen>
	<para>
And for ntpd edit 
<code>/etc/ntp.conf</code>
 to include additional server lines: 
</para>
<screen>server ntp.ubuntu.com
server pool.ntp.org
</screen>
	<para>
You may notice 
<code>pool.ntp.org</code>
 in the examples above. This is a really good idea which uses round-robin DNS to return an NTP server from a pool, spreading the load between several different servers. Even better, they have pools for different regions - for instance, if you are in New Zealand, so you could use  
<code>nz.pool.ntp.org</code>
 instead of 
<code>pool.ntp.org</code>
. Look at 
<ulink url="http://www.pool.ntp.org/">http://www.pool.ntp.org/</ulink>
 for more details. 
</para>
	<para>
You can also Google for NTP servers in your region, and add these to your configuration. To test that a server works, just type 
<code>sudo ntpdate ntp.server.name</code>
 and see what happens. 
</para>
</sect2>
  <sect2 id="ntp-references" status="review">
    <title>References</title>

	<itemizedlist>
	  <listitem>
  	    <para>
          See the <ulink url="https://help.ubuntu.com/community/UbuntuTime">Ubuntu Time</ulink> wiki page for more information.
        </para>
      </listitem>
	  <listitem>
  	    <para>
          <ulink url="http://ntp.isc.org/bin/view/Support/WebHome">NTP Support</ulink>
        </para>
      </listitem>
	  <listitem>
	    <para>
          <ulink url="http://www.ntp.org/ntpfaq/NTP-a-faq.htm">The NTP FAQ and HOWTO</ulink>
        </para>
      </listitem>
    </itemizedlist>

  </sect2>
  </sect1>
</chapter>
