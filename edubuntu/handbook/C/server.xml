<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
    "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
<!ENTITY % globalent SYSTEM "../../../libs/global.ent">
%globalent;
<!ENTITY % cdo-C SYSTEM "../../../libs/cdo-C.ent">
%cdo-C;
<!ENTITY % gnome-menus-C SYSTEM "../../libs/edubuntu-menus-C.ent">
%gnome-menus-C;
<!ENTITY % edubuntuent SYSTEM "../../libs/edubuntu.ent">
%edubuntuent;
<!ENTITY % xinclude SYSTEM "../../../libs/xinclude.mod">
%xinclude;
<!ENTITY language "en">
<!ENTITY ubuntu '<phrase>Ubuntu</phrase>'>
<!ENTITY edubuntu '<phrase>Edubuntu</phrase>'>
]>

<chapter id="server" status="review">
    <title>Edubuntu Server and Thin Client Computing</title>

    <para>Edubuntu Server is almost the same thing as Edubuntu Workstation.  It
        contains all the same great educational programs, and the same ease of use.
        The only difference is that it also installs, by default, a thin
        client environment.
    </para>

    <para>The Edubuntu community has worked very closely with the Linux Terminal
        Server Project (LTSP), to come up with the next generation thin client solution
        for GNU/Linux.  It comes automatically installed on an Edubuntu server, so
        you can begin setting up a thin client school lab right out of the box.
    </para>

    <para>Thin client computing has been around for a long time in the
        UNIX world. Although the implementation has evolved quite a bit, the
        concept has remained the same:
    </para>

    <itemizedlist>
        <listitem>

            <para>The thin client only takes care of the basic functions like
                display, keyboard, mouse and sound.
            </para>

        </listitem>
        <listitem>

            <para>The server does the heavy weightlifting. All the applications
                run on the server, and they simply display on the thin
                client.
            </para>

        </listitem>
    </itemizedlist>

    <para>Because the thin clients have a limited number of tasks to
        manage, the hardware for the thin client can be small and cheap.
        The thin clients themselves are basically maintenance free. They
        last longer because they have no storage with moving parts like
        hard disks. If they break no data is lost since nothing is stored
        on the client itself. Simply swap the client with another one and
        go back to work. If your thin client is stolen or put in the
        trash, no data ends up in the hands of unauthorized people.
    </para>

    <para>The terminal server runs all applications and contains all
        the data. All the regular maintenance (software updates,
        administration) takes place on the terminal server. The number of
        thin clients that a terminal server can support is proportional to
        the power of the server. Because GNU/Linux in general, and Edubuntu
        in particular, make efficient use of resources, you can support a
        surprising number of thin clients from a machine which might only
        be considered a powerful single user system running other operating
        systems. Please see <xref linkend="server-sizing"/> for more
        details.
    </para>

    <para>In a thin client computing environment, the stability of the
        server is important. It's important to make sure that your server
        has good power management, like installing a UPS, and depending on
        how much availability is required, redundant power supplies may be
        called for. As well, users who have the resources may decide to
        invest in multiple disks for RAID support, and other options which
        may be needed in a High Availability environment. However, you
        certainly don't need them in all environments, and Edubuntu's high
        quality means that in all but the most demanding environments, this
        won't be needed.
    </para>

    <!-- HARDWARE -->
    <sect1 id="server-hw">
        <title>Hardware Requirements</title>
        <para>A person setting up a LTSP thin client environment for the
            first time, typically asks two questions:
        </para>
        <itemizedlist>
            <listitem>
                <para>Will my existing machines work as terminals, or, what should
                    I buy to use as a terminal?
                </para>
            </listitem>
            <listitem>
                <para>How big a server do I need?</para>
            </listitem>
        </itemizedlist>
        <para>Chances are, hardware that you already have is more than
            sufficient for terminals. One of the great advantages of an Edubuntu
            Server is that you can set up a high quality lab of terminals for your
            students to use, by leveraging the machines you already have.
            As for servers, usually, it's very easy
            to turn any high-end single user desktop machine into a terminal
            server capable of handling many thin clients. We'll present some
            guidelines that should help in making the most of your
            resources.
        </para>
        <sect2>
            <title>LTSP Thin Client hardware requirements</title>
            <para>A lot of Edubuntu deployments are in classroom environments,
                and usually, in these situations, the primary goal is to re-use
                existing hardware that the school already owns. However,
                specifically designed thin clients can be used also.
            </para>
            <sect3>
                <title>Clients</title>
                <sect4>
                    <title>Older hardware</title>
                    <para>There are three things to consider when trying to re-use
                        existing hardware:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>CPU</para>
                        </listitem>
                        <listitem>
                            <para>Network</para>
                        </listitem>
                        <listitem>
                            <para>Video Card</para>
                        </listitem>
                    </itemizedlist>
                </sect4>
                <sect4>
                    <title>CPU</title>
                    <para>For using the default, secure mode of LTSP, you'll need to
                        have a slightly faster CPU. Any 233 MHz or better CPU should
                        provide acceptable performance.
                    </para>
                    <para>If you have slower clients, in the range of 133 MHz to 233
                        MHz, you may be able to use them, if you're willing to reduce the
                        security of your thin client network. More information on this is available in
                        <xref linkend="customizing-thin-client"/>.
                    </para>
                    <para>For the best possible performance, a 533 MHz processor will
                        provide a first class thin client desktop experience.
                    </para>
                </sect4>
                <sect4>
                    <title>Network</title>
                    <para>A thin client boots over the network, using a small program
                        called a network boot loader. This network boot loader is sometimes
                        located on the card itself, or, for older cards without one, the
                        user can provide one on a floppy or CDRom which can be used to boot
                        the thin client.
                    </para>
                    <para>Three common network boot loaders which can be used
                        are:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <emphasis role="bold">PXE:</emphasis> This one is the most common,
                                and many network cards and motherboards with built-in network cards
                                support this. If you have one of these, you'll be able to boot
                                without any problems.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <emphasis role="bold">Etherboot:</emphasis> For older cards that
                                don't have PXE included on them, you can use the Free Software
                                equivalent, Etherboot. This excellent alternative to PXE can either
                                be booted from a floppy, memory stick, or CDRom, or, if you're
                                handy with electronics, be burned onto a EPROM if your card has a
                                socket for one. More information on the project can be found at
                                http://www.etherboot.org, and you can download ready-to-use
                                Etherboot images at http://www.rom-o-matic.org.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <emphasis role="bold">Yaboot:</emphasis> For Macintosh PowerPC
                                machines (iMac's and later), you can use the built in Yaboot
                                network boot.
                            </para>
                        </listitem>
                    </itemizedlist>
                </sect4>
                <sect4>
                    <title>Video Card</title>
                    <para>Typically, any video card that uses the PCI bus and has 2 MB
                        or more of memory, should make a reasonable client.
                    </para>
                </sect4>
            </sect3>
        </sect2>

        <sect2 id="server-sizing">
            <title>Edubuntu Server requirements</title>
            <para>An Edubuntu/LTSP thin client network is quite scalable; a moderately
                powerful machine can serve several thin clients, and if you need to
                add more thin clients, you can either expand the capabilities of
                the existing server, or, simply add more servers.
            </para>
            <sect3>
                <title>Recommended specs</title>
                <para>Server sizing in an LTSP network is more art than science.
                    Ask any LTSP administrator how big a server you need to use, and
                    you'll likely be told "It depends". How big a server you need does depend
                    largely on
                    what it is you're planning on doing with your thin client network.
                    The server requirements needed for a network where the only use
                    will be a little light web-browsing, with no Java or Flash, will be
                    greatly different from a network where you want to do heavy
                    graphics, interactive games, and Flash animation. Here are some
                    common guidelines that should fit most "average" cases.
                </para>

                <sect4>
                    <title>Memory</title>
                    <para>Edubuntu, being a GNU/Linux
                        based operating system, makes efficient use of memory. The usual
                        formula that's used for adding memory to a thin client server
                        is:
                    </para>
                    <para>256 + (60 * users) MB</para>
                    <para>So, if your target is to have a server with 20 terminals,
                        you'll need:
                    </para>
                    <para>256 + (60 * 20) = 256 + 1200 = 1456 MB</para>
                    <para>Rounding up, you'll need 3 512 MB simms. Making sure you've
                        got enough memory is the single most important thing you can do to
                        help the performance of an Edubuntu/LTSP thin client server. If you do not
                        have enough memory in your server, you'll find your server will
                        have to use the hard drive as an overflow "virtual" memory. Hard
                        drives are much slower than memory, so you'll find things getting
                        very slow if this happens.
                    </para>
                </sect4>

                <sect4>
                    <title>Processors</title>
                    <para> How fast a processor you
                        need is entirely dependant on what programs you plan to use.
                        Interactive games require a bit more than say, a word processor. If
                        you plan to use Java and Flash plugins in your web browser, these
                        can consume a lot of processing power. For a "mixed" model, i.e.
                        some people playing TuxMath, a few people browsing the web, and a
                        few people typing in OpenOffice.org, a 2GHz or better processor
                        should be able to adequately handle 20 people with some minor
                        delays. A 3GHz processor would be better.
                    </para>
                    <para>For larger networks, moving to an SMP (Symetric Multi
                        Processing), or multiple CPU server may be advantageous. If you
                        plan to handle 30 or more clients, a newer dual-core Xenon server
                        or dual-core Opteron will provide good results.
                    </para>
                    <para>Remember, if you need to serve a large number of clients, it
                        will be worth your while to configure multiple Edubuntu servers,
                        each handling some of the terminals.
                    </para>
                </sect4>

                <sect4>
                    <title>Disks</title>
                    <para>It's advisable to use some
                        form of RAID in the terminal servers. Besides saving your data when
                        a single disks fails, it improves the performance (especially read
                        performance, which is the most common type of file access). For
                        people on a budget, setting up software RAID 1, with 2 ATA or SATA
                        disks with NCQ (Native Command Queueing) will provide good results.
                        If you have a bit more money, you might consider using a good SCSI
                        hardware raid controller, with SCSI disks. This will provide you
                        with top notch performance and reliability.
                    </para>
                </sect4>
            </sect3>
        </sect2>
        <sect2>
            <title>Network</title>
            <para>If you have more then 20 users, it is recommended to use
                gigabit ethernet for your LTSP servers. Although normal usage
                ranges from 0.5 to 2mbit, clients can peak quite high (70mbit),
                especially when watching multimedia content.
            </para>
        </sect2>
    </sect1>

    <!-- THEORY -->
    <sect1 id="ltsp-theory">
        <title>Theory of operation</title>
        <para>Booting a thin client involves several steps.
            Understanding what is happening along the way will make it much
            easier to solve problems, should they arise.
        </para>
        <para>There are four basic services required to boot an LTSP
            thin client. They are:
        </para>
        <itemizedlist>
            <listitem>
                <para>DHCP</para>
            </listitem>
            <listitem>
                <para>TFTP</para>
            </listitem>
            <listitem>
                <para>NFS or NBD</para>
            </listitem>
            <listitem>
                <para>SSH</para>
            </listitem>
        </itemizedlist>
        <sect2>
            <title>The LTSP chroot environment</title>
            <para>In order to turn a computer into a thin client, we need to run a mini
                version of GNU/Linux on the workstation.  It needs to boot this mini version
                of GNU/Linux over the network, since it probably won't have a hard drive on
                it's own.  This mini GNU/Linux installation needs to live somewhere, and the
                best place for it is on the server.
            </para>

            <para>This scaled-down GNU/Linux installation, customized so that it's
                efficient to boot over the network, is called a
                <emphasis role="strong">chroot environment</emphasis>.  You can have several
                of them, based upon several different CPU architectures.  They'll normally
                live under <filename>/opt/ltsp</filename> on the server, with subdirectories
                for each of the architectures.  For instance, if you have a lab full of
                old Power PC Macs, and older PC's, you'll have an
                <filename>/opt/ltsp/ppc</filename> and an <filename>/opt/ltsp/i386</filename>
                directory on the server.
            </para>
            <para>The reason why it is called a chroot environment is that to install it, the
                GNU/Linux command <command>chroot</command> is called to actually set the
                installation root to <filename>/opt/ltsp/</filename><emphasis role="strong">arch</emphasis>.
                From there, a scaled-down version of the distribution is installed.  What this
                means is that for you to manage the chroot, performing such things as updates,
                all you need to do is use the <command>chroot</command> command to change
                the root of your installation.  Then you can use all your tools like you
                normally would.
            </para>

        </sect2>
        <sect2>
            <title>The boot process of a thin client</title>
            <orderedlist spacing="normal">
                <listitem>
                    <para>Load the Linux kernel into the memory of the thin client.
                        This can be done several different ways, including:
                    </para>
                    <orderedlist>
                        <listitem>
                            <para>Bootrom (Etherboot,PXE)</para>
                        </listitem>
                        <listitem>
                            <para>Floppy</para>
                        </listitem>
                        <listitem>
                            <para>Harddisk</para>
                        </listitem>
                        <listitem>
                            <para>CD-ROM</para>
                        </listitem>
                        <listitem>
                            <para>USB Memory Device</para>
                        </listitem>
                    </orderedlist>
                    <para>Each of the above booting methods will be explained later in
                        this chapter.
                    </para>
                </listitem>
                <listitem>
                    <para>Once the kernel has been loaded into memory, it will begin
                        executing.
                    </para>
                </listitem>
                <listitem>
                    <para>The kernel will initialize the entire system and all of the
                        peripherals that it recognizes.
                    </para>
                </listitem>
                <listitem>
                    <para>This is where the fun really begins. During the kernel
                        loading process, an initramfs image will also be loaded into
                        memory.
                    </para>
                </listitem>
                <listitem>
                    <para>Normally, when the kernel is finished booting, it will launch
                        the new task launcher
                        <command>upstart</command>, which will handle starting up a server
                        or workstation. But, in this case, we've instructed the kernel to
                        load a small shell script instead. This shell script is called
                        <command>/init</command>, and lives in the root of the
                        initramfs.
                    </para>
                </listitem>
                <listitem>
                    <para>The
                        <command>/init</command> script begins by mounting /proc and /sys,
                        starts
                        <command>udev</command> to discover and initialize hardware,
                        especially the network card, which is needed for every aspect of
                        the boot from here on. As well, it creates a small ram disk, where
                        any local storage that is needed (to configure the
                        <filename>xorg.conf</filename> file, for instance) can be written
                        to.
                    </para>
                </listitem>
                <listitem>
                    <para>The 
                        <emphasis role="strong">loopback</emphasis> network interface is
                        configured. This is the networking interface that has
                        <emphasis>127.0.0.1</emphasis> as its IP address.
                    </para>
                </listitem>
                <listitem>
                    <para>A small DHCP client called
                        <command>ipconfig</command> will then be run, to make another query
                        from the DHCP server. This separate user-space query gets
                        information supplied in the dhcpd.conf file, like the nfs root
                        server, default gateway, and other important parameters.
                    </para>
                </listitem>
                <listitem>
                    <para>When
                        <command>ipconfig</command> gets a reply from the server, the
                        information it receives is used to configure the ethernet
                        interface, and determine the server to mount the root
                        from.
                    </para>
                </listitem>
                <listitem>
                    <para>Up to this point, the root filesystem has been a ram disk.
                        Now, the
                        <command>/init</command> script will mount a new root filesystem via
                        either NBD or NFS.  In the case of NBD, the image that is normally
                        loaded is <filename>/opt/ltsp/images/i386.img</filename>.  If the root is mounted
                        via NFS, then the directory that is exported from the server is typically
                        <filename>/opt/ltsp/i386</filename>. It can't just mount the new
                        filesystem as /. It must first mount it to a separate directory. Then,
                        it will do a
                        <command>run-init</command>, which will swap the current root
                        filesystem for a new filesystem. When it completes, the
                        filesystem will be mounted on /. At this point, any directories
                        that need to be writable for regular startup to occur, like /tmp,
                        or /var, are mounted at this time.
                    </para>
                </listitem>
                <listitem>
                    <para>Once the mounting of the new root filesystem is complete, we
                        are done with the /init shell script and we need to invoke the real
                        <command>/sbin/init</command> program.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The <command>init</command> program will read the
                        <filename class="directory">/etc/event.d</filename> directory and
                        begin setting up the thin client environment. From there, upstart
                        will begin reading the startup commands in
                        <filename class="directory">/etc/rcS.d</filename>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        It will execute the <command>S32ltsp-client-setup</command> command
                        which will configure many aspects of the thin client environment, such as
                        checking if local devices need starting, loading any specified modules, etc.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Next, the <command>init</command> program will begin to execute commands
                        in the <filename class="directory">/etc/rc2.d</filename> directory
                    </para>
                </listitem>
                <listitem>
                    <para>One of the items in the
                        <filename class="directory">/etc/rc2.d</filename> directory is the
                        <command>S20ltsp-client-core</command>command that will be run while the
                        thin client is booting.
                    </para>
                </listitem>
                <listitem>
                    <para>The 
                        <filename>lts.conf</filename> file will be parsed, and all of the
                        parameters in that file that pertain to this thin client will be
                        set as environment variables for the
                        <command>S20ltsp-client-core</command> script to use.
                    </para>
                </listitem>
                <listitem>
                    <para>If Sound is configured at this point, the
                        <command>pulseaudio</command> daemon is started, to allow remote
                        audio connections from the server to connect and play on the
                        thin client.
                    </para>
                </listitem>
                <listitem>
                    <para>If the thin client has local device support enabled, the
                        <command>ltspfsd</command> program is started to allow the server to
                        read from devices such as memory sticks or CD-Roms attached to the
                        thin client.
                    </para>
                </listitem>
                <listitem>
                    <para>At this point, any of the screen sessions you've defined in your
                        <filename>lts.conf</filename> will be executed.
                    </para>
                    <para>Screen sessions are what you want to launch on all of the virtual
                        screens on your terminal. These are the standard virtual screens that
                        all GNU/Linux distros have, i.e. alt-F1, through alt-F10.
                    </para>
                    <para>By default, a standard character based getty will be run on
                        screen 1 (SCREEN_01 in the <filename>lts.conf</filename> file).
                    </para>
                    <para>
                        As well, if nothing else is specified in the <filename>lts.conf</filename>
                        file, an <command>ldm</command> screen script is run on SCREEN_07.  The
                        LTSP Display Manager (<command>ldm</command>) is the default login manager
                        for LTSP.
                    </para>
                </listitem>
                <listitem>
                    <para>If
                        <emphasis role="strong">SCREEN_07</emphasis> is set to a value of
                        <emphasis role="strong">ldm</emphasis>, or
                        <emphasis role="strong">startx</emphasis>, then the
                        X Windows System will be launched, giving you a graphical user
                        interface.
                    </para>
                    <para>By default, the Xorg server will auto-probe the card, create
                        a default <filename>/etc/X11/xorg.conf</filename> file on the ramdisk
                        in the terminal, and start up xorg with that custom config.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The X server will either start an encrypted <command>ssh</command>
                        tunnel to the server, in the case of <command>ldm</command>, or an an
                        XDMCP query to the LTSP server, in the case of startx.  Either way, a login
                        box will appear on the terminal.
                    </para>
                </listitem>
                <listitem>
                    <para>At this point, the user can log in. They'll get a session on
                        the server.
                    </para>
                    <para>This confuses a lot of people at first. They are sitting at a
                        thin client, but they are running a session on the server. All
                        commands they run will be run on the server, but the output will
                        be displayed on the thin client.
                    </para>
                </listitem>
            </orderedlist>
        </sect2>

        <sect2>
            <title>Network booting the thin client</title>

            <para>Getting the thin client to boot over the network can be
                accomplished in a variety of ways:
            </para>

            <itemizedlist>
                <listitem>
                    <para>Boot ROM</para>
                </listitem>
                <listitem>
                    <para>Local media</para>
                </listitem>
            </itemizedlist>

            <sect3>
                <title>Boot ROM</title>

                <para>Depending on your network card, it may already contain a boot ROM, or
                    you may be able to use an EPROM programmer to create your own.  Check the
                    hardware documentation for the network card in your thin client for details.
                </para>

                <sect4>
                    <title>Etherboot</title>

                    <para>Etherboot is a very popular open-source bootrom project. It
                        contains drivers for many common network cards, and works very well
                        with LTSP.
                    </para>

                    <para>ROM images suitable for booting from floppy, CD-ROM, etc., can be
                        obtained from http://www.rom-o-matic.org
                    </para>

                    <para>Linux kernels must be tagged with the
                        <command>mknbi-linux</command>, which will prepare the kernel for
                        network booting, by prefixing the kernel with some additional code,
                        and appending the initrd to the end of the kernel.
                    </para>
                    <para>The kernels that are supplied with Edubuntu/LTSP are already tagged,
                        and ready to boot with Etherboot.
                    </para>
                </sect4>

                <sect4>
                    <title>PXE</title>
                    <para>Part of the 'Wired for Management' specification from the
                        late 1990's included a specification for a bootrom technology known
                        as the
                        <emphasis>Pre-boot Execution Environment</emphasis> commonly
                        abbreviated as <emphasis role="strong">PXE</emphasis>.
                    </para>
                    <para>A PXE bootrom can load at most a 32 kilo-byte file. A Linux
                        kernel is quite a bit larger than that. Therefore, we setup PXE to
                        load a 2nd stage boot loader called
                        <emphasis role="strong">pxelinux</emphasis>, which is small
                        enough to be loaded. It knows how to load much larger files,
                        such as a Linux kernel.
                    </para>
                </sect4>
            </sect3>

            <sect3>
                <title>Local media</title>
                <para>If your network card in the thin client doesn't have a boot ROM built
                    in, and you don't have access to an EPROM burner, have no fear!  Chances
                    are, that old machine has a floppy drive, or CD-ROM in it.  If so, then you
                    can use local media to boot the thin client.
                </para>

                <sect4>
                    <title>Floppy disk</title>

                    <para>Booting Etheboot from a floppy is an excellent way of booting
                        an LTSP thin client that doesn't have a boot ROM.
                        Etherboot is loaded in the boot sector of the floppy.
                        Then, it will act just like a bootrom. The boot code will be
                        executed, the network card will be initialized, and the kernel will
                        be loaded from the network server.
                    </para>
                </sect4>

                <sect4>
                    <title>Hard disk</title>
                    <para>The hard disk can be used with LILO or GRUB, to load the
                        Linux kernel and initrd. You can also load the Etherboot bootrom
                        image from the hard disk, and it will act like a bootrom.
                    </para>
                </sect4>

                <sect4>
                    <title>CD-ROM</title>
                    <para>A bootable CD-ROM can be loaded either with a Linux kernel,
                        or an Etherboot image.
                    </para>
                </sect4>

                <sect4>
                    <title>USB Memory device</title>
                    <para>Just like a CD-ROM, Floppy disk and Hard disk, you can use a
                        USB Memory device to boot an Etherboot module.
                    </para>
                </sect4>
            </sect3>
        </sect2>
    </sect1>

    <!-- CLIENT -->
    <sect1 id="customizing-thin-client">
        <title>Customizing thin client behaviour</title>
        <para>By default, most thin clients will automatically configure themselves
            correctly, and just work when they're plugged in. However, sometimes you
            may wish to customize their behavior.  You would do this by editing the
            <filename>lts.conf</filename> file.
        </para>
        <sect2>
            <title>Format of the lts.conf file</title>
            <para>When LTSP was designed, one of the issues that needed to be
                dealt with was varying hardware configurations for the
                thin client. Certainly, whatever combination of processor, network
                card and video card available today would not be available in 3
                months, when you want to add more thin clients to the
                network.
            </para>
            <para>So, LTSP.org devised a way of specifying the configuration of
                each thin client. The configuration file is called
                <filename>lts.conf</filename> and it lives in the
                <filename class="directory">
                    /opt/ltsp/i386/etc
                </filename>
                directory.
            </para>
            <para>The format of the lts.conf allows for 'default' settings and
                individual thin client settings. If all of your thin clients are
                identical, you could specify all of the configuration settings in
                the '[Default]' section.
            </para>
            <sect3>
                <title>Section headings</title>
                <para>Section headings begin with an identifier in square brackets.
                    the identifier can be one of:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>a mac address for a workstation, in the form of XX:XX:XX:XX:XX:XX,
                            where X is the digits 0-9, or A-F.  You can usually read the mac
                            address for a network card from a sticker on the card itself, or
                            use some kind of network tool to discover it.  The <command>ifconfig</command>
                            can tell you the mac address of your network cards.
                        </para>
                    </listitem>
                    <listitem>
                        <para>an IP address.  You'll need to statically assign host IP addresses
                            for this to work, as by default, Edubuntu ships with a
                            <filename>dhcpd.conf</filename> that hands out dynamic addresses.
                            This means there's no guarantee which host will get what IP
                            address.
                        </para>
                    </listitem>
                    <listitem>
                        <para>a hostname.  Same issue as an IP address, but additionally, you
                            must have either defined the hostname in DNS, or in <filename>/etc/hosts</filename>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>The special section heading [Default].  This section can set defaults
                            that apply to all terminals.
                        </para>
                    </listitem>
                </itemizedlist>
            </sect3>
            <sect3>
                <title>Variable Assignments</title>
                <para>After the section heading, you can then define variables.  Variables are
                    ether boolean values, requiring a True/False or Y/N answer.  Note that you
                    can either use True or False, Yes or No, or Y or N.  Whichever you prefer.
                    Other variables may simply be strings, supplied after the = sign.  The general
                    format of an assignment looks like:
                </para>
                <screen>
BOOLEAN_VARIABLE = True
STRING_VARIABLE = Information
                </screen>
                <para>Comments can be inserted into the file for your documentation purposes.
                    Comments start with a # character, and everything after the # for the 
                    rest of the line is considered a comment.
                </para>
            </sect3>
            <sect3>
                <title>Location of the lts.conf filename</title>
                <para>In order to speed up LTSP, by default, we're using NBD (Network Block
                    Devices) rather than NFS.  The <filename class="directory">/opt/ltsp/i386</filename>
                    still exists, but now, it's compressed into a squashfs image, so it's much
                    smaller than simply exporting via NFS.  This means that the client uses less
                    network bandwidth than before.  However, it would mean that every time you 
                    change the <filename>lts.conf</filename> file, you'd have to re-create this
                    image using the command <command>ltsp-update-image</command>.  This takes a while
                    to do.  So, in order to avoid this, we've moved the <filename>lts.conf</filename> file
                    to the TFTP directory, in <filename class="directory">/var/lib/tftpboot/ltsp/i386</filename>.
                    This means you can make changes to the file immediately, and simply reboot the terminal, without
                    recompiling the image.
                 </para>
            </sect3>
            <sect3>
                <title>About using NBD instead of NFS</title>
                <para>Using NBD instead of NFS has several advantages:</para>
                <itemizedlist>
                    <listitem>
                        <para>Using a squashfs image we can now merge that together in a unionfs to get writeable
                            access which is a lot faster during bootup.
                        </para>
                    </listitem>
                    <listitem>
                        <para>A squashed root filesystem uses less network bandwidth.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Many users and administrators have asked us to eliminate NFS, for reasons of
                            site policy.  Since the squashed image is now served out by <command>nbd-server</command>,
                            which is an entirely userspace program, and is started as the user nobody, this
                            should help to eliminate concerns over NFS shares.
                        </para>
                    </listitem>
                </itemizedlist>
                <para>However, some people still want to use NFS.  Fortunately, it's easy to switch back to NFS, if it's
                    so desired:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>On the server, use the <command>chroot</command> command to maintain the LTSP chroot:
                            <screen>
sudo chroot /opt/ltsp/i386
                            </screen>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Now edit <filename>/etc/default/ltsp-client-setup</filename>
                            and change the value of the root_write_method variable to use bind mounts
                            instead of unionfs, it should look like this afterwards:
                            <screen>
root_write_method="bind_mounts"
                            </screen>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Next, create the file <filename>/etc/initramfs-tools/conf.d/ltsp</filename>
                            and add the following line (set the value of the BOOT variable to nfs):
                            <screen>
BOOT=nfs
                            </screen>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Regenerate the initramfs:
                            <screen>
update-initramfs -u
                            </screen>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Hit CTRL-D to exit the chroot now.  Make sure LTSP uses the new initramfs to boot:
                            <screen>
sudo ltsp-update-kernels
                            </screen>
                        </para>
                    </listitem>
                </itemizedlist>
            </sect3>
            <sect3>
                <title>Sample lts.conf file</title>
                <para>Here is an example of the lts.conf file:
                    <screen>
################
# Global defaults for all clients
# if you refer to the local server, just use the
# "server" keyword as value
# see lts_parameters.txt for valid values
################
[default]
    X_COLOR_DEPTH=16
    LOCALDEV=True
    SOUND=True
    NBD_SWAP=True
    SYSLOG_HOST=server
    XKBLAYOUT=de

################
#[MAC ADDRESS]: Per thin client settings
################
[00:11:25:84:CE:BA]
    XSERVER = vesa
    X_MOUSE_DEVICE=/dev/ttyS0
    X_MOUSE_PROTOCOL=intellimouse

###############
# A Thin Client Print server
# (switch off X by pointing tty7 to shell,
# to save ressources)
###############
[00:11:25:93:CF:00]
    PRINTER_0_DEVICE=/dev/usblp0
    SCREEN_07=shell

###############
# A workstation that executes a specific
# command after login
###############
[00:11:25:93:CF:02]
    LDM_REMOTECMD=/usr/bin/myloginscript
                    </screen>
                </para>
            </sect3>
        </sect2>
        <sect2 id="ldm">
            <title>The LDM display manager</title>
            <para>The LTSP Display Manager, or <command>ldm</command> is the display
                manager specifically written by the LTSP project to handle logins
                to a GNU/Linux server.  It is the default display manager for LTSP thin
                clients running under Edubuntu, and has a lot of useful features:
            </para>
            <itemizedlist>
                <listitem>
                    <para>It is written in C, for speed and efficiency on low end clients.
                    </para>
                </listitem>
                <listitem>
                    <para>It supports logging in via either a greeter (a graphical login
                        application) or autologin.
                    </para>
                </listitem>
                <listitem>
                    <para>It can be configured to encrypt X Windows traffic, for increased
                        security, or leave it unencrypted, for better performance on slower
                        clients.
                    </para>
                </listitem>
                <listitem>
                    <para>It contains a simple load-balancing system, to allow the system
                        administrator to allow load balancing across several servers.
                    </para>
                </listitem>
            </itemizedlist>
            <para>We'll go over the <filename>lts.conf</filename> entries you'll need to
                control these features below.
            </para>
            <sect3>
                <title>Theory of operation</title>
                <para>To help understand the following sections, a bit of an explanation
                    of how <command>ldm</command> does it's work is needed.  Most thin
                    client display managers tend to run up on the server.  The
                    <command>ldm</command> display manager is unique in that it runs on
                    the thin client itself.  This allows the thin client to have a lot
                    of choice as to how it will set up the connection.  A typical login
                    session goes as follows:
                </para>
                <itemizedlist>
                    <listitem>
                        <para><command>ldm</command> launches and starts up the X Windows
                            display on the thin client.
                        </para>
                    </listitem>
                    <listitem>
                        <para><command>ldm</command> starts up the greeter, which is a
                            graphical program which presents the user with a nice login
                            display and allows them to select their session, language,
                            and host they'd like to log into.
                        </para>
                    </listitem>
                    <listitem>
                        <para><command>ldm</command> collects the information from the greeter,
                            and starts an ssh session with the server.  This ssh connection
                            is used to create an ssh master socket, which is used by all
                            subsequent operations.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Now, the users selected session is started via the master
                            socket.  Depending on whether or not an encrypted connection
                            has been requested, via the LDM_DIRECTX parameter, the session
                            is either connected back to the local display via the ssh tunnel,
                            or via a regular TCP/IP connection.
                        </para>
                    </listitem>
                    <listitem>
                        <para>During the session, any memory sticks, or other local devices
                            that are plugged in, communicate their status to the server via
                            the ssh control socket.
                        </para>
                    </listitem>
                    <listitem>
                        <para>When the user exits the session, the ssh connection is closed
                            down, the X server is stopped, and <command>ldm</command> restarts
                            itself, so everything starts with a clean slate.
                        </para>
                    </listitem>
                </itemizedlist>
            </sect3>
            <sect3>
                <title>Encrypted versus unencrypted sessions</title>
                <para>By default, LTSP5 encrypts the X session between the server.  This
                    makes your session more secure, but at the cost of increased processing
                    power required on the thin client and on the server.  If processing
                    power is a concern to you, it's very easy to specify that the connection
                    for either an individual workstation, or the default setting should use
                    an unencrypted connection.  To do so, simply specify:
                </para>
                <screen>
LDM_DIRECTX=True
                </screen>
                <para>in your <filename>lts.conf</filename> file in the appropriate stanza.
                </para>
            </sect3>
            <sect3>
                <title>Auto login features</title>
                <para>This new version of LDM supports auto login of accounts, if
                    specified in the <filename>lts.conf</filename> file.  Simply
                    create a config stanza for each of the terminals you want to log
                    in automatically (you can use either MAC address, IP address, or 
                    hostname) and specify the variable <command>LDM_USERNAME</command>
                    and <command>LDM_PASSWORD</command>.  Note that you must have created
                    these accounts on the server, with the passwords specified.  An example
                    will serve to illustrate how to use this:
                </para>
                <screen>
[00:E0:81:27:D6:AE]
    LDM_USERNAME=station1
    LDM_PASSWORD=sekrit1

[00:30:48:73:FC:A3]
    LDM_USERNAME=station2
    LDM_PASSWORD=sekrit2
                </screen>
            </sect3>
            <sect3>
                <title>Load balancing features</title>
                <para>In this version of LTSP, there's a simple load-balancing solution
                    implemented that allows administrators to have multiple Edubuntu
                    servers on the network, and allow the thin client to pick which
                    one of the servers it would like to log into.
                </para>
                <para>The host selection system is simple and flexible enough to allow
                    administrators to implement their own policy on how they want
                    the load balancing to happen: either on a random, load-based, or
                    round robin system. See <xref linkend="multiple-server-setup"/>
                    for details.
                </para>
            </sect3>
        </sect2>
        <sect2>
            <title>General thin client parameters</title>
            <para>There are several variables that one can define in the lts.conf file
                which control how the thin client interacts with the server.  These
                are:
            </para>
            <variablelist>
                <varlistentry>
                    <term>
                        <command>SERVER</command>
                    </term>
                    <listitem>
                        <para>This is the server that is used for the XDM_SERVER,
                            TELNET_HOST, XFS_SERVER and SYSLOG_HOST, if any of those are not
                            specified explicitly. If you have one machine that is acting as the
                            server for everything, then you can just specify the address here
                            and omit the other server parameters. If this value is not set, it
                            will be auto detected.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>SYSLOG_HOST</command>
                    </term>
                    <listitem>
                        <para>If you want to send logging messages to a machine other than
                            the default server, then you can specify the machine here. If this
                            parameter is NOT specified, then it will use the 'SERVER' parameter
                            described above.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>NBD_SWAP</command>
                    </term>
                    <listitem>
                        <para>Set this to
                            <command>Y</command> if you want to turn on NBD swap. The default is
                            <command>Y</command>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>SWAP_SERVER</command>
                    </term>
                    <listitem>
                        <para>The NBD swap server can exist on any server on the network
                            that is capable of handling it. You can specify the IP address of
                            that server. The default is whatever the value of SERVER set
                            to.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>NBD_PORT</command>
                    </term>
                    <listitem>
                        <para>The port on which NBD swapping will occur. This is set to
                            9572 by default.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>USE_LOCAL_SWAP</command>
                    </term>
                    <listitem>
                        <para>If you have a hard drive installed in the thin client, with a
                            valid swap partition on it, this parameter will allow the thin
                            client to swap to the local hard drive. The default is
                            <command>N</command>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>DNS_SERVER</command>
                    </term>
                    <listitem>
                        <para>Used to build the resolv.conf file. Not needed by
                            default.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>SEARCH_DOMAIN</command>
                    </term>
                    <listitem>
                        <para>Used to build the resolv.conf file.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>SOUND</command>
                    </term>
                    <listitem>
                        <para>This parameter enables sound for the thin client. The default is
                            <command>Y</command>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>LOCALDEV</command>
                    </term>
                    <listitem>
                        <para>This parameter enables local devices support, like CD's and
                            USB sticks. Users plugging them in should see them on the desktop,
                            after they've been added to the fuse group on the server. You can do
                            this by going to:
                                        <menuchoice>
                                            <guimenu>System</guimenu>
                                            <guisubmenu>Administration</guisubmenu>
                                            <guimenuitem>Users and Groups</guimenuitem>
                                        </menuchoice>
                            selecting the user, clicking on "Properties", the going into the
                            "User Privileges" tab, and making sure the "Allow use of FUSE filesystems..."
                            box is checked.  The default is:
                            <command>Y</command>.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </sect2>
        <sect2>
            <title>Screen Scripts</title>
            <para>Screen scripts are how LTSP determines what type of login will run
                on what virtual screen.  Most GNU/Linux machines have 12 virtual consoles,
                which you can access by pressing Control-Alt-F1, through Control-Alt-F12.
                There is a text based getty that is started on screen 1, but you normally
                can't log into it, as there are no local users on the thin client.
            </para>
            <para>
                However, for debugging purposes, you may want to set up root to log in
                on the thin client.  You may need to do this if you're debugging problems
                with local devices, for example.  Fortunately, it's easy to do: on the server,
                just chroot into the LTSP chroot, and set the password with passwd.
            </para>
            <screen>
sudo chroot /opt/ltsp/i386
passwd
            </screen>
            <para>By default, if there's nothing else mentioned in <filename>lts.conf</filename>,
                an LDM session will be started on screen 7.
            </para>
            <variablelist>
                <title>Parameters relating to screen scripts</title>
                <varlistentry>
                    <term>
                        <command>SCREEN_01</command> thru
                        <command>SCREEN_12</command>
                    </term>
                    <listitem>
                        <para>Up to 12 screen scripts can be specified for a thin client.
                            This will give you up to 12 sessions on the thin client, each
                            accessible by pressing the Ctrl-Alt-F1 through Ctrl-Alt-F12 keys.
                            <screen>
SCREEN_07 = ldm
SCREEN_02 = shell
                            </screen>
                        </para>
                        <para>Currently, possible values include:
                            <itemizedlist>
                                <listitem>
                                    <para>
                                        <emphasis role="bold">ldm</emphasis>: This is the default display
                                        manager. It collects a username and password, and then establishes
                                        a secure, encrypted tunnel to the server via
                                        <command>ssh</command>. This should be good for most environments.
                                        Edubuntu deployments with lower-powered clients or servers
                                        may find that the extra overhead involved in encrypting the X
                                        traffic might slow their sessions, and may wish to enable the 
                                        <command>LDM_DIRECTX</command> parameter described in <xref linkend="ldm"/>
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <emphasis role="bold">sdm</emphasis>: Similar in functionality to
                                        ldm, but a little less graphically intensive.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <emphasis role="bold">startx</emphasis>: Older X connection requiring
                                        the use of XDMCP to connect to the server.  Some legacy installations
                                        may want to use it, however, the intruduction of the <command>LDM_DIRECTX</command>
                                        parameter has eliminated much of the need to run it.
                                        Enabling this will require you to turn on XDMCP for the
                                        <command>gdm</command> login manager. As an administrative user, go
                                        to
                                        <menuchoice>
                                            <guimenu>System</guimenu>
                                            <guisubmenu>Administration</guisubmenu>
                                            <guimenuitem>Login Window</guimenuitem>
                                        </menuchoice>
                                        and in the "Remote" tab, change the drop down to
                                        "Same as local". Additionally, you may wish to click on the
                                        "Configure XDMCP" button on the lower corner, and increase the
                                        "Maximum remote sessions" to something a little higher than the
                                        number of thin clients you have.
                                        <emphasis role="bold">Please note that doing this means local
                                            devices will not work for you, as they rely on the ssh
                                            tunnel that ldm provides.
                                        </emphasis>
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <emphasis role="bold">telnet</emphasis>: Text screen telnet into
                                        whatever host TELNET_HOST is set to. See below for an explanation.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <emphasis role="bold">shell</emphasis>: spawns a shell on the thin
                                        client. Useful for testing.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        <emphasis role="bold">rdesktop</emphasis>: spawns an rdesktop session
                                        to a remote windows server.  Note that you must have the <command>rdeskop</command>
                                        package installed in the chroot.
                                    </para>
                                </listitem>
                            </itemizedlist>
                            Look in the <filename class="directory">/opt/ltsp/i386/usr/lib/ltsp/screen.d</filename>
                            directory for more scripts, or write your own, and put them there.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>TELNET_HOST</command>
                    </term>
                    <listitem>
                        <para>If the thin client is setup to have a character based
                            interface, then the value of this parameter will be used as the
                            host to telnet into. If this value is NOT set, then it will use the
                            value of
                            <command>SERVER</command> above.
                        </para>
                        <para></para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </sect2>
        <sect2>
            <title>Modules and startup scripts</title>
            <para>For the most part, LTSP does a very good job of detecting what hardware's on
                your thin client.  However, it's possible that you may want to manually specify
                a kernel module to load after boot.  Alternatively, you may have a script you've
                written that you've put in the chroot, and want to make sure gets run at startup.
                LTSP provides some hooks to allow you to do this.
            </para>
            <variablelist>
                <varlistentry>
                    <term>
                        <command>MODULE_01</command> thru
                        <command>MODULE_10</command>
                    </term>
                    <listitem>
                        <para>Up to 10 kernel modules can be loaded by using these
                            configuration entries. The entire command line that you would use
                            when running insmod can be specified here. For example:
                            <screen>
MODULE_01 = uart401.o
MODULE_02 = "sb.o io=0x220 irq=5 dma=1"
MODULE_03 = opl3.o
                            </screen>
                        </para>
                        <para>If the value of this parameter is an absolute pathname, then
                            <command>insmod</command> will be used to load the module.
                            Otherwise,
                            <command>modprobe</command> will be used.
                        </para>
                        <para>In normal circumstances, you shouldn't need to specify
                            anything here, as most hardware will be auto-detected.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>RCFILE_01</command> thru
                        <command>RCFILE_10</command>
                    </term>
                    <listitem>
                        <para>Additional RC scripts can be executed by the
                            <command>ltsp-client-setup</command> script. Just put the script in the
                            <filename>/opt/ltsp/i386/etc/init.d</filename> directory, and
                            specify the name of the script in one of these entries.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </sect2>
        <sect2>
            <title>X-Windows parameters</title>
            <para>Setting up X windows on the thin client's normally a pretty easy operation.
                The thin client uses X.org's own auto configuration mode to let X determine
                what it thinks is installed in the box.  The thin client just runs the command
                <command>Xorg -configure</command>, and then uses that output, slightly
                modified, for the X config file.
            </para>
            <para>However, sometimes, this doesn't always work.  Either due to strange/buggy
                hardware, or buggy drivers in X.org, or because X detects default settings that
                you don't want.  For instance, it may detect that your monitor is capable of doing
                1280x1024, but you'd prefer it to come up in 1024x768 resolution.  Fortunately,
                you can tweak individual X settings, or, alternatively, simply provide your own
                <filename>xorg.conf</filename> to use.
            </para>
            <variablelist>
                <title>X.org configuration</title>
                <varlistentry>
                    <term>
                        <command>X_CONF</command>
                    </term>
                    <listitem>
                        <para>If you want to create your own complete X.org config file, you
                            can do so and place it in the
                            <filename class="directory">/opt/ltsp/i386/etc/X11</filename> directory. Then, whatever you
                            decide to call it needs to be entered as a value for this
                            configuration variable. For example:
                            <screen>
X_CONF = /etc/X11/my-custom-xorg.conf
                            </screen>
                            Note that for the thin client, you reference it from <filename class="directory">/etc/X11</filename>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>X_RAMPERC</command>
                    </term>
                    <listitem>
                        <para>Some programs allocate a large amount of ram in the X.org server running on your thin
                            client.  Programs like <command>Firefox</command> and <command>Evince</command> can use
                            up so much ram, that they eventually exahaust all your physical ram, and NBD swap, causing
                            your thin client to crash.  If you find your clients being booted back to a login prompt,
                            or freezing up when viewing certain PDF's or web pages, this may be the problem.
                        </para>
                        <para>The X_RAMPERC variable stands for X RAM PERCent, and is a number between 0 and 100 that
                            specifies how much of the free space on your thin client X.org is allowed to consume.  You'll
                            generally want to set it at something lower than 100 percent, if you're having problems.
                            Experimentation has shown a value between 80 and 90 will usually keep the terminal alive.
                            What will then happen is the program consuming the memory will die, as opposed to the thin client
                            itself.  If you're having unexplained terminal problems, specifying:
                            <screen>
X_RAMPERC = 80
                            </screen>
                            in your <filename>lts.conf</filename> file may improve things.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>XDM_SERVER</command>
                    </term>
                    <listitem>
                        <para>If you're using the older <command>startx</command> screen script, and need to specify a different
                            server, then you can specify the server here. If this parameter is
                            NOT specified, then it will use the 'SERVER' parameter described
                            above.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>XSERVER</command>
                    </term>
                    <listitem>
                        <para>You can use this parameter to override which X server the thin client will run. For PCI
                            and AGP video cards, this parameter should not be required. The
                            thin client should normally be able to
                            auto-detect the card.
                        </para>
                        <para>If, for some reason you do need to manually set it, here are
                            the valid values:
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>ark</para>
                            </listitem>
                            <listitem>
                                <para>ati</para>
                            </listitem>
                            <listitem>
                                <para>atimisc</para>
                            </listitem>
                            <listitem>
                                <para>chips</para>
                            </listitem>
                            <listitem>
                                <para>cirrus_alpine</para>
                            </listitem>
                            <listitem>
                                <para>cirrus</para>
                            </listitem>
                            <listitem>
                                <para>cirrus_laguna</para>
                            </listitem>
                            <listitem>
                                <para>cyrix</para>
                            </listitem>
                            <listitem>
                                <para>dummy</para>
                            </listitem>
                            <listitem>
                                <para>fbdev</para>
                            </listitem>
                            <listitem>
                                <para>fglrx</para>
                            </listitem>
                            <listitem>
                                <para>glint</para>
                            </listitem>
                            <listitem>
                                <para>i128</para>
                            </listitem>
                            <listitem>
                                <para>i740</para>
                            </listitem>
                            <listitem>
                                <para>i810</para>
                            </listitem>
                            <listitem>
                                <para>imstt</para>
                            </listitem>
                            <listitem>
                                <para>mga</para>
                            </listitem>
                            <listitem>
                                <para>neomagic</para>
                            </listitem>
                            <listitem>
                                <para>newport</para>
                            </listitem>
                            <listitem>
                                <para>nsc</para>
                            </listitem>
                            <listitem>
                                <para>nv</para>
                            </listitem>
                            <listitem>
                                <para>r128</para>
                            </listitem>
                            <listitem>
                                <para>radeon</para>
                            </listitem>
                            <listitem>
                                <para>rendition</para>
                            </listitem>
                            <listitem>
                                <para>riva128</para>
                            </listitem>
                            <listitem>
                                <para>s3</para>
                            </listitem>
                            <listitem>
                                <para>s3virge</para>
                            </listitem>
                            <listitem>
                                <para>savage</para>
                            </listitem>
                            <listitem>
                                <para>siliconmotion</para>
                            </listitem>
                            <listitem>
                                <para>sis</para>
                            </listitem>
                            <listitem>
                                <para>sisusb</para>
                            </listitem>
                            <listitem>
                                <para>tdfx</para>
                            </listitem>
                            <listitem>
                                <para>tga</para>
                            </listitem>
                            <listitem>
                                <para>trident</para>
                            </listitem>
                            <listitem>
                                <para>tseng</para>
                            </listitem>
                            <listitem>
                                <para>v4l</para>
                            </listitem>
                            <listitem>
                                <para>vesa</para>
                            </listitem>
                            <listitem>
                                <para>vga</para>
                            </listitem>
                            <listitem>
                                <para>via</para>
                            </listitem>
                            <listitem>
                                <para>vmware</para>
                            </listitem>
                            <listitem>
                                <para>voodoo</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>X_MOUSE_DEVICE</command>
                    </term>
                    <listitem>
                        <para>This is the device node that the mouse is connected to. If it
                            is a serial mouse, this would be a serial port, such as
                            <command>/dev/ttyS0</command> or
                            <command>/dev/ttyS1</command>. This is not needed for PS/2 or USB
                            mice, as they are auto-detected.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>X_MOUSE_PROTOCOL</command>
                    </term>
                    <listitem>
                        <para>Should be auto-detected. However, valid entries
                            include:
                        </para>
                        <itemizedlist>
                            <listitem>
                                <para>sunkbd</para>
                            </listitem>
                            <listitem>
                                <para>lkkbd</para>
                            </listitem>
                            <listitem>
                                <para>vsxxxaa</para>
                            </listitem>
                            <listitem>
                                <para>spaceorb</para>
                            </listitem>
                            <listitem>
                                <para>spaceball</para>
                            </listitem>
                            <listitem>
                                <para>magellan</para>
                            </listitem>
                            <listitem>
                                <para>warrior</para>
                            </listitem>
                            <listitem>
                                <para>stinger</para>
                            </listitem>
                            <listitem>
                                <para>mousesystems</para>
                            </listitem>
                            <listitem>
                                <para>sunmouse</para>
                            </listitem>
                            <listitem>
                                <para>microsoft</para>
                            </listitem>
                            <listitem>
                                <para>mshack</para>
                            </listitem>
                            <listitem>
                                <para>mouseman</para>
                            </listitem>
                            <listitem>
                                <para>intellimouse</para>
                            </listitem>
                            <listitem>
                                <para>mmwheel</para>
                            </listitem>
                            <listitem>
                                <para>iforce</para>
                            </listitem>
                            <listitem>
                                <para>h3600ts</para>
                            </listitem>
                            <listitem>
                                <para>stowawaykbd</para>
                            </listitem>
                            <listitem>
                                <para>ps2serkbd</para>
                            </listitem>
                            <listitem>
                                <para>twiddler</para>
                            </listitem>
                            <listitem>
                                <para>twiddlerjoy</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>X_MOUSE_EMULATE3BTN</command>
                    </term>
                    <listitem>
                        <para>Normally unset, may need to be set to
                            <command>Y</command> for certain 2 button mice.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>X_COLOR_DEPTH</command>
                    </term>
                    <listitem>
                        <para>This is the number of bits to use for the color depth.
                            Possible values are
                            <command>8</command>,
                            <command>16</command>,
                            <command>24</command> and
                            <command>32</command>. 8 bits will give 256 colors, 16 will give
                            65536 colors, 24 will give 16 million colors and 32 bits will give
                            4.2 billion colors! Not all X servers support all of these values.
                            The default value for this is
                            <command>24</command>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>USE_XFS</command>
                    </term>
                    <listitem>
                        <para>You have a choice of running the X Font Server (XFS) or
                            reading the fonts through the file system.  XFS has been pretty much
                            superceeded by the RENDER extention of X.org, but for special cases, you
                            can specify it.
                            The 2 values for this option are
                            <command>Y</command> and
                            <command>N</command>. The default value is
                            <command>N</command>. If you do want to use a font server, then you
                            can use the
                            <command>XFS_SERVER</command> entry to specify which host will act
                            as the font server.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>XFS_SERVER</command>
                    </term>
                    <listitem>
                        <para>If you are using an X Font Server to serve fonts, then you
                            can use this entry to specify the IP address of the host that is
                            acting as the font server. If this is not specified, it will use
                            the default server, which is specified with the
                            <command>SERVER</command> entry described above.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>X_HORZSYNC</command>
                    </term>
                    <listitem>
                        <para>This sets the X.org
                            <command>HorizSync</command> configuration parameter. This should be
                            auto-detected for your monitor, however, if you want to force a
                            lower resolution, use this parameter to do so.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>X_VERTREFRESH</command>
                    </term>
                    <listitem>
                        <para>This sets the X.org
                            <command>VertRefresh</command> configuration parameter. This should
                            be auto-detected for your monitor. If you need to force a
                            lower resolution, use this parameter to do so.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>X_MODE_0, X_MODE_1, and X_MODE_2</command>
                    </term>
                    <listitem>
                        <para>These sets the X.org
                            <command>ModeLine</command> configuration.  For example, if your
                            thin client comes up in a higher resolution than what you want,
                            say, 1280x1024, specifying:
                            <screen>
X_MODE_0 = 1024x786
                            </screen>
                            should get your desired resolution on startup.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </sect2>
        <sect2>
            <title>Printer configuration parameters</title>
            <para>Sometimes, it's convenient to hang a printer off of a thin
                client in a lab, so that the computer lab has access to local
                printing resources.  Fortunately, LTSP can accomodate printing
                on the workstation.
            </para>
            <para>LTSP can connect up to 3 printers per workstation to the network
                via a small daemon called JetPipe.  Both parallel and USB printers
                are supported. JetPipe makes the printer
                look like a standard HP Jet Direct printer interface.  You can then
                create any cups printer on your server, and point it at the printer
                via a Jet Direct connection.
            </para>
            <para>In your <filename>dhcpd.conf</filename> file that controls your
                thin client IP assignments, you'll want to assign a static IP
                for the terminal with the printers, to guarentee that it gets
                the same IP address every time it boots.  Otherwise, your printing
                won't work if the terminal leases a different IP address.
            </para>
            <variablelist>
                <title>Printing related parameters</title>
                <varlistentry>
                    <term>
                        <command>PRINTER_0_DEVICE</command>
                    </term>
                    <listitem>
                        <para>The device name of the printer. Names such as
                            <command>/dev/lp0</command>, or
                            <command>/dev/usblp0</command> are allowed.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>PRINTER_0_PORT</command>
                    </term>
                    <listitem>
                        <para>The TCP/IP Port number to use. By default, it will use '
                            <command>9100</command>', for PRINTER_0_DEVICE, '<command>9101</command>' for PRINTER_1_DEVICE, and
                            '<command>9102</command>' for PRINTER_2_DEVICE.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </sect2>
        <sect2>
            <title>Keyboard parameters</title>
            <para>All of the keyboard support files are copied into the
                /opt/ltsp/i386 hierarchy, so configuring international keyboard
                support is simply a matter of configuring X.org. There are several
                configuration parameters for this.
            </para>
            <para>The values for the above parameters are from the X.org
                documentation. Whatever is valid for X.org is valid for these
                parameters.
            </para>
            <para>We would like to add documentation to show what values are
                needed for each type of international keyboard. If you work with
                this and can configure your international keyboards, feedback to
                Edubuntu would be greatly appreciated.
            </para>
            <variablelist>
                <varlistentry>
                    <term>
                        <command>CONSOLE_KEYMAP</command>
                    </term>
                    <listitem>
                        <para>Allows you to specify a valid console keymap for TELNET_HOST
                            sessions. Default is
                            <command>en</command>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>XKBLAYOUT</command>
                    </term>
                    <listitem>
                        <para>Consult the X.org documentation for valid settings.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>XKBMODEL</command>
                    </term>
                    <listitem>
                        <para>Consult the X.org documentation for valid settings.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>XKBVARIANT</command>
                    </term>
                    <listitem>
                        <para>Consult the X.org documentation for valid settings.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>XKBRULES</command>
                    </term>
                    <listitem>
                        <para>Consult the X.org documentation for valid settings.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>XKBOPTIONS</command>
                    </term>
                    <listitem>
                        <para>Consult the X.org documentation for valid settings.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </sect2>
    </sect1>


    <!--multiple-server-setup-->
    <sect1 id="multiple-server-setup">
        <title>Multiple server setup</title>
        <para>
            A multiple server setup is useful for larger thin client networks. Instead of using one big server,
            it makes it possible to use smaller servers, and dispatch users on them. You can adjust computing
            resources as the demand grows simply by adding a new server.
            To make sure that every server behaves the same from the users point of view, new services and
            configurations that are required will be discussed. In addition, some configurations specific
            to thin clients will be presented.
        </para>
        <sect2 id="multiple-server-setup-common-services">
            <title>Infrastructure setup</title>
            <sect3>
                <title>Network topology</title>
                <para>
                    The network topology is the same as a standalone server setup, except that
                    there are more than one server on the thin client lan.
                </para>
                <para>
                    You will need to select one server to behave as the primary server. This server
                    will be used to run additional services, hold users files, and network boot thin clients.
                </para>
                <para>
                    Secondary servers will be used only to run desktop sessions. They are simpler, and will
                    be configured to use the central services from the primary server. Installing the package
                    <command>ltsp-server</command> will install required software.
                </para>
            </sect3>
            <sect3><title>Common authentication</title>
                <para>
                    A user should be able to start a session with the same login and password, no matter
                    which server it connects to. For this purpose, a central authentication mechanism must
                    be used. There are many possibilities offered. Here are the major technologies:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>LDAP authentication: On the master server, setup an OpenLDAP server.
                            Configure each servers to use this LDAP server as the authentication base,
                            with the pam_ldap plugin.
                        </para>
                    </listitem>
                    <listitem>
                        <para>NIS authentication: On the master server, setup a NIS server. Configure
                            each server to use this NIS server for the authentication.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Winbind authentication: Useful if you already have an Active Directory server.
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    For detailed instructions, see their respective manuals.
                </para>
            </sect3>
            <sect3>
                <title>Shared home directories</title>
                <para>
                    Shared home directories are easy to setup using an NFS server on the primary server.
                    To configure the share, install the package <command>nfs-kernel-server</command>.
                    Then, edit the file <filename class="directory">/etc/exports</filename> and add the following line,
                    by replacing <command>secondary_server_ip</command> by the real IP address of the server.
                    <screen>
/home   secondary_server_ip(rw,no_root_squash)
                    </screen>
                    After this modification, the service needs to be restarted.
                    <screen>
sudo invoke-rc.d nfs-kernel-server restart
                    </screen>
                    You can define the mount point on each secondary servers, by editing the file
                    <filename>/etc/fstab</filename> and adding the following line:
                    <screen>
192.168.0.1:/home /home nfs hard,intr,rsize=8192,wsize=8192,bg 0 0
                    </screen>
                </para>
                <para>
                    With the default setup, the home directory of the user must exist before the
                    first login. To create the home directory on the fly on the first login,
                    you can use the pam_mkhomedir plugin. The NFS export option
                    <command>no_root_squash</command> allows any secondary server to create
                    directories on the primary server.
                </para>
            </sect3>
            <sect3>
                <title>Shared printers</title>
                <para>For printers to be accessible on each server, the cups server must be
                    configured to share printers. Refer to the CUPS manual for detailed instructions.
                </para>
            </sect3>
            <sect3>
                <title>Synchronization of packages</title>
                <para>Once you install one desktop application on one server, then you must
                    install it on all the  other servers, as well. Otherwise, users may not be able to
                    use the same set of applications. First, make sure that
                    <command>/etc/apt/sources.list</command> file is the same on each server.
                    Then, list packages of the reference server. Using the primary server for
                    this purpose is not recommended, since it may install other server packages
                    that are not necessary on secondary servers. To build the package list:
                    <screen>dpkg --get-selections > deblist </screen>
                    Then, copy this file on the target server you want to sync applications,
                    and perform the following steps:
                    <screen>
sudo dpkg --set-selections &lt; deblist
sudo apt-get dselect-upgrade
                    </screen>
                    Apt will install additional packages that are not already installed on the target machine.
                </para>
            </sect3>
            <sect3>
                <title>Managing the SSH known hosts file</title>
                <para>
                    For security reasons, a thin client won't connect to an untrusted server. You
                    must add the keys of secondary servers inside the client root on the primary
                    server. To do this, first export the key file of the secondary server to add:
                    <screen>
sudo ltsp-update-sshkeys --export ssh_known_hosts.myhostname
                    </screen>
                    Then, copy the file on the primary server, in the directory
                    <filename class="directory">/etc/ltsp/</filename>, and run <command>ltsp-update-sshkeys</command>
                    on the primary server. Then, thin clients will trust the freshly added server,
                    and will be able to connect to it.
                </para>
                <para>
                    If a secondary server changes it's IP address, then this procedure must be repeated.
                </para>
            </sect3>
            <sect3>
                <title>Setting network forwarding</title>
                <para>Primary server will act as an network gateway for other servers. With this
                    configuration, other workstations will be able to access the network behind
                    the primary server. Here is an example of script that setup the network forwarding.
                    We put it in <command>/etc/network/if-up.d/forward.sh</command>, and make it
                    executable. The script will run at each network start. In this example, the
                    primary server private IP is <command>192.168.0.1</command>. It must be
                    adapted for the IP address used.
                </para>
                <screen>
#!/bin/bash

echo 1 > /proc/sys/net/ipv4/ip_forward

echo Setting up the forwarding

LAN_IP_NET="192.168.0.1/24"
LAN_NIC="eth1"
OUT_NIC="eth0"

iptables -t nat -A POSTROUTING -s $LAN_IP_NET -o $OUT_NIC -j MASQUERADE
iptables -A FORWARD -j ACCEPT -i $LAN_NIC -s $LAN_IP_NET
iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT
                </screen>
            </sect3>
            <sect3>
                <title>Replication of desktop profiles</title>
                <para>If you customize user's desktop, then custom desktop profiles should be
                    copied to every server. Gnome desktop profiles created with Sabayon are
                    located in <command>/etc/desktop-profiles</command>
                </para>
            </sect3>
        </sect2>
        <sect2 id="multiple-server-setup-config">
            <title>Session dispatching</title>
            <sect3>
                <title>Define the server list</title>
                <para>
                    LDM is a login manager for thin clients. Users can select a server
                    from the available ones in the host selection dialog box.
                </para>
                <para>
                    The displayed server list is defined by the <command>LDM_SERVER</command>
                    parameter. This parameter accepts a list of server IP address or host names,
                    separated by space. If you use host names, then your DNS resolution must work
                    on the thin client. If defined in the <filename>lts.conf</filename> file, the
                    list order will be static, and the first server in the list will be selected
                    by default.
                </para>
                <para>
                    You can also compute a new order for the server list, by creating the script
                    <command>/opt/ltsp/i386/usr/lib/ltsp/get_hosts</command>. The parameter
                    <command>LDM_SERVER</command> overrides the script. In consequence, this
                    parameter must not be defined if the <command>get_hosts</command> is going
                    to be used. The <command>get_hosts</command> script writes on the standard
                    output each server IP address or host names, in the chosen order.
                </para>
            </sect3>
            <sect3>
                <title>Dispatching method</title>
                <para>
                    You can change this behavior by using a script to rearrange the
                    list. The simplest way to do it is by randomizing the list. First, define
                    a custom variable in the file <command>lts.conf</command>, for example
                    <command>MY_SERVER_LIST</command>, that will contain the list of servers,
                    the same way as <command>LDM_SERVER</command> Then, put the following
                    script in <command>/opt/ltsp/i386/usr/lib/ltsp/get_hosts</command>.
                    <screen>
#!/bin/bash
# Randomize the server list contained in MY_SERVER_LIST parameter

TMP_LIST=""
SHUFFLED_LIST=""

for i in $MY_SERVER_LIST; do
rank=$RANDOM
let "rank %= 100"
TMP_LIST="$TMP_LIST\n${rank}_$i"
done

TMP_LIST=$(echo -e $TMP_LIST | sort)
for i in $TMP_LIST; do
SHUFFLED_LIST="$SHUFFLED_LIST $(echo $i | cut -d_ -f2)"
done

echo $SHUFFLED_LIST
                    </screen>
                </para>
                <para>
                    More advanced load balancing algorithms can be written. For example,
                    load balancing can be done by querying ldminfod for the server rating.
                    By querying ldminfod, you can get the current rating state of the server.
                    This rating goes from 0 to 100, higher is better. Here is an example of
                    such a query:
                    <screen>
nc localhost 9571 | grep rating | cut -d: -f2
                    </screen>
                </para>
            </sect3>
        </sect2>
    </sect1>

    <!-- Network Swap -->
    <sect1>
        <title>Network Swap</title>
        <subtitle>Helping thin clients with smaller amounts of ram</subtitle>
        <para>Just like on a full fledged workstation, it helps to have swap defined
            for your thin client.  "Swap" is an area of disk space set aside to allow
            you to transfer information out of ram, and temporarily store it on a hard
            drive until it's needed again.  It makes the workstation look like it has
            more memory than it actually does.  For instance, if your workstation has
            64 Megabytes of ram and you configure 64 Megabytes of swap, it's theoretically
            possible to load a 128 Megabyte program.
        </para>
        <para>I say, "theoretically", because in practice, you want to avoid swapping
            as much as possible.  A hard drive is several orders of magnatude slower
            than ram, and, of course, on a thin client, you don't even have a hard drive!
            You have to first push the data through the network to the server's hard drive,
            thus making your swapping even slower.  In practice, it's best to make sure
            you have enough ram in your thin client to handle all your average memory
            needs.
        </para>
        <para>However, sometimes that's not possible.  Sometimes, you're re-using old
            hardware, or you've simply got a program that isn't normally used, but does
            consume a lot of ram on the thin client when it does.  Fortunately, LTSP
            supports swapping over the network via NBD, or Network Block Devices.  We include
            a small shell script called nbdswapd, which is started via inetd.  It handles
            creating the swap file, and setting up the swapping, and removing the swap file
            when it's no longer needed, after the terminal shuts down.
        </para>
        <para>By default, swap files are 32 Megabytes in size.  This was chosen to give your
            workstation a little extra ram, but not use up too much disk space.  If you get some
            random odd behaviour, such as Firefox crashing when viewing web pages with a lot
            of large pictures, you may want to try increasing the size of the swap files.  You can
            do so by creating a file in the directory <filename class="directory">/etc/ltsp</filename>
            on the Edubuntu server, called <filename>nbdswapd.conf</filename>.  In it, you can set the
            SIZE variable to the number of Megabytes you wish the file to be sized to.  For instance,
            to create 128 Megabyte files, you'll want:
            <screen>
SIZE=128
            </screen>
            in the <filename>nbdswapd.conf</filename> file.
        </para>
        <para>Please note that this is a global setting for all swap files.  If your server has 40 thin
            clients, each using 128 Megs of memory, you'll need 128 * 40 = 5120, or a little over 5
            Gigabytes of space in your <filename class="directory">/tmp</filename> directory, where
            the swapfiles are stored.
        </para>
    </sect1>

    <!-- dhcp -->
    <sect1>
        <title>Managing DHCP</title>
        <para>DHCP stands for Dynamic Host Configuration Protocol and is the very first thing your
            thin client uses to obtain an IP address from the network, in order to allow it to start
            booting.  In Edubuntu, the dhcpd file is located in <filename class="directory">/etc/ltsp</filename>.  Any changes
            you want to make to booting behaviour should be made there.
        </para>
        <para>By default, Edubuntu ships a <filename>dhcpd.conf</filename> that serves thin clients
            in a dynamic range (i.e. it will hand out ip addresses to anyone who asks for them) from
            192.168.0.20 to 192.168.0.250.  The default dhcpd.conf file looks like:
            <screen>
#
# Default LTSP dhcpd.conf config file.
#

authoritative;

subnet 192.168.0.0 netmask 255.255.255.0 {
    range 192.168.0.20 192.168.0.250;
    option domain-name "example.com";
    option domain-name-servers 192.168.0.1;
    option broadcast-address 192.168.0.255;
    option routers 192.168.0.1;
#    next-server 192.168.0.254;
#    get-lease-hostnames true;
    option subnet-mask 255.255.255.0;
    option root-path "/opt/ltsp/i386";
    if substring( option vendor-class-identifier, 0, 9 ) = "PXEClient" {
        filename "/ltsp/i386/pxelinux.0";
    } else {
        filename "/ltsp/i386/nbi.img";
    }
}
            </screen>
            This <filename>dhcpd.conf</filename> should handle most situations.
        </para>
        <para>By default, Edubuntu will detect an unused network interface and configure it to be 192.168.0.254.
            Edubuntu's recommended single server installation is to use a separate network interface for the thin
            clients.  If, however, you're not using two network interfaces, or you already have an interface
            in the 192.168.0 range, then you might have to configure the thin client interface differently, which
            means you may have to adjust the <filename>dhcpd.conf</filename> accordingly.
        </para>
        <para>If the network interface that you're going to connect the thin clients to has, say, a TCP/IP address
            of 10.0.20.254, you'll want to replace every occurance of 192.168.0 with 10.0.20 in the
            <filename>dhcpd.conf</filename> file.
        </para>
        <para>Always remember, you'll need to re-start the dhcp server if you make any changes.  You can do this
            by issuing the command:
            <screen>
sudo invoke-rc.d dhcp3-server restart
            </screen>
            at the command prompt.
        </para>
        <sect2>
            <title>Adding static entries to the dhcpd.conf</title>
            <para>Sometimes, you may need to have a certain terminal boot with a guaranteed fixed TCP/IP address
                every time.  Say, if you're connecting a printer to the terminal, and need to make sure the
                print server can find it at a fixed address.  To create a fixed address, use a low number
                in the range of 2-19, or otherwise, if you change the range statement in the <filename>dhcpd.conf</filename>.
            </para>
            <para>To create a static entry, simply add the following after the "option root-path" line:
                <screen>
host hostname {
    hardware ethernet     MA:CA:DD:RE:SS:00;
    fixed-address         192.168.0.2;
}
                </screen>
                Substitude the mac address for the mac address of the thin client you wish to fix the address of.  The
                fixed-addres will be the TCP/IP address you want, and "hostname" is the name you wish to give the host.
            </para>
        </sect2>
    </sect1>

    <sect1>
        <title>Lockdown with Sabayon and Pessulus</title>
        <para>A common requirement in both schools and businesses is having the ability to lock down the desktop
            and provide certain default configurations.
        </para>
        <para>In Edubuntu, the applications you'll want to use are Sabayon and Pessulus.  You'll want to add them from 
            the <command>synaptic</command> package manager.  After you've added them both, then you can start them from
             <menuchoice>
                 <guimenu>System</guimenu>
                 <guisubmenu>Administration</guisubmenu>
                 <guimenuitem>User Profile Editor</guimenuitem>
             </menuchoice>
        </para>
        <para>The Sabayon profile editor looks like a window that contains a smaller sized picture of your desktop.  Within
            this window, you can create a default layout: add icons to panels and the desktop, lock down the panels
            so they can't be modified, remove access to the command line, etc.
        </para>
        <para>Once you're done, you can save your profile.  You have the option of applying your profile to either individual
            users, or all users on the system.  Please consult the manual included with Sabayon for all the details.
        </para>
    </sect1>

    <!-- Thin Client Manager -->
    <sect1 id="ltsp-tcm">
        <title>Edubuntu Thin Client Manager</title>
        <sect2>
            <title>Using Thin Client Manager</title>
            <subtitle>Managing an LTSP setup effectivly</subtitle>
            <para>Thin Client Manager (TCM) is a system administration utility to
                enable a teacher to easily control the machines in their class, by
                utilising the following features:
            </para>
            <itemizedlist>
                <listitem>
                    <para>Remote program execution</para>
                </listitem>
                <listitem>
                    <para>Simple message sending</para>
                </listitem>
                <listitem>
                    <para>Remote application closure</para>
                </listitem>
                <listitem>
                    <para>Quick access to the lockdown editor</para>
                </listitem>
                <listitem>
                    <para>Remote logout execution</para>
                </listitem>
                <listitem>
                    <para>Process listings for each user</para>
                </listitem>
                <listitem>
                    <para>Plugin framework to expand functionality</para>
                </listitem>
            </itemizedlist>
            <para>When first loaded, TCM shows the clients currently logged
                onto the server on the right hand side, along with their IP address
                and username, as in Fig 1. This list is dynamically updated and
                will change as users log into and out of the system. Clicking on an
                entry in this list will highlight it, and enable certain functions
                in the user interface. Clicking on a user will also fill the window
                on the right with all the processes that are running in that users
                session.
            </para>
            <para>
                <inlinemediaobject>
                    <imageobject>
                        <imagedata fileref="../../images/C/scpmain.png" format="PNG" />
                    </imageobject>
                    <textobject>
                        <phrase>Main Window</phrase>
                    </textobject>
                </inlinemediaobject>
            </para>
        </sect2>
        <sect2>
            <title>Operations</title>
            <sect3>
                <title>Process Management</title>
                <para>You can end a users applications by first choosing a user,
                    selecting a process from the right hand side, and then clicking on
                    the "End Process" button. You will then be asked to confirm your
                    actions and, upon confirmation, a message is sent to the clients
                    session asking for the program to terminate. (Note: You can select
                    multiple users here)
                </para>
                <para>
                    <inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="../../images/C/scpprocs.png" format="PNG" />
                        </imageobject>
                        <textobject>
                            <phrase>Processes Window</phrase>
                        </textobject>
                    </inlinemediaobject>
                </para>
            </sect3>
            <sect3>
                <title>Logging Users Out</title>
                <para>If desired, you can log a user out of their session, by first
                    selecting a user and click on the "Disconnect" button. You will
                    then be asked to confirm your actions and, upon confirmation, a
                    message is sent to end the users session. This will log the user
                    out of their current session. (Note: You can select multiple users
                    here)
                </para>
            </sect3>
            <sect3>
                <title>Sending A Message</title>
                <para>You are able to send short messages to users, for example,
                    "You have 5 minutes left of this lesson". To do this, first select
                    a user and then click on the send message button. You will then be
                    presented with a box to type in your message. Upon clicking "Ok",
                    the message will be sent to the selected user. (Note: You can
                    select multiple users here)
                </para>
                <para>
                    <inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="../../images/C/scpmess.png" format="PNG" />
                        </imageobject>
                        <textobject>
                            <phrase>Message Window</phrase>
                        </textobject>
                    </inlinemediaobject>
                </para>
            </sect3>
            <sect3>
                <title>Starting A Program</title>
                <para>It is also possible to start an application or process in a
                    clients session from TCM. To do this simply select the user, and
                    click on the "Execute" button. You will then be presented with a
                    dialog box to enter a command to be run in the users session. Upon
                    clicking "Ok", a message will be sent to the users session asking
                    for the chosen command to be run. (Note: You can select multiple
                    users here)
                </para>
                <para>
                    <inlinemediaobject>
                        <imageobject>
                            <imagedata fileref="../../images/C/scpexec.png" format="PNG" />
                        </imageobject>
                        <textobject>
                            <phrase>Execute Window</phrase>
                        </textobject>
                    </inlinemediaobject>
                </para>
            </sect3>
            <sect3>
                <title>Lockdown Editor</title>
                <para>By choosing a single user and right clicking on that users name, you will open up the context menu.  From here you can choose "Lockdown", which will allow you to set options to restrict a particular user.  Clicking this menu item will invoke the "Pessulus" program, which is the Gnome lockdown editor.  Ticking and unticking options in Pessulus will enable and disable certain functions for that particular user.  There is a padlock next to each option in Pessulus.  Ticking this will make the option unchangeable by the user.  This is called a mandatory setting.  Pessulus has been altered for integration with Thin Client Manager so that mandatory keys are now per user, instead of per system.  For further help with Pessulus, please refer to the Pessulus documentation.</para>
            </sect3>
            <sect3>
                <title>Managing users with groups</title>
                <para>The latest version of Thin Client Manager comes with a user group and filtering system.  Right clicking in the user list, will present you with a menu which has an option called Groups.  From this menu you can create new groups, delete old groups and assign users to groups.</para>
                <para>
                    To assign users to a group simply select the users required from the user list and then right click to enter context menu.  Now you can move through the menu,
                    <menuchoice>
                        <guimenu>Groups</guimenu><guisubmenu>Add user to group</guisubmenu><guimenuitem>&lt;Group Name&gt;</guimenuitem>.
                    </menuchoice>
                    The process for removing members from a group is exceedingly similar.
                </para>
                <para>
                    Once you have assigned your users into groups, you can use the filter combo box above the user list to show only members of that particular group.  Groups and members are persistent across Thin Client Manager sessions and are automatically saved once you have altered them.  If you ever need to manually access the file which stores this information, it is located at <filename>/etc/tcm/users.conf</filename>.
                </para>
            </sect3>
            <sect3>
                <title>Plugins</title>
                <para>
                    The plugin framework allows you to expand the way TCM works.  By selecting one or more users in the left hand panel you can right click in the left hand area and be presented with the context menu.  This menu has an option called "Plugins" and from that there is a list of all the plugins installed in TCM.  On a fresh installation, this will consist of a single plugin, which is used purely as an example.  For the more advanced user, please see the example plugin file located at <filename>/usr/lib/python2.4/site-packages/studentcontrolpanel/plugins/cheap_plugin</filename>.  A plugin consists simply of a class and a registration function.  The plugin is provided with a list of users, which you can use to write a code to perform functions based on that list.
                </para>
            </sect3>
            <sect3>
                <title>Screen Viewing</title>
                <para>
                    <emphasis role="bold">This functionality requires some set up by the system administrator, please see the Ubuntu wiki for more information.</emphasis>
                </para>
                <para>By clicking on the Screen Viewer tab, you can view four client screens at a time.  By using the buttons at the bottom of the screen you can move between the currently logged in users.  If a user becomes disconnected, you can use the refresh option to reconnect all screens.  Connections are closed when switching to the Process Viewer to save bandwidth, but are reconnected again upon switching to the Screen Viewer tab.</para>
            </sect3>
        </sect2>
    </sect1>
    <!-- UPDATES -->
    <sect1 id="ltsp-updates">
        <title>Keeping your Edubuntu server in shape</title>
        <para>Security, as it's often been said, is a process, and not an
            end result.  Fortunately, Ubuntu makes it easy to keep up to date
            with the latest security patches.
        </para>
        <sect2>
            <title>Edubuntu Server Management</title>
            <para>When logging onto the LTSP network as an administrator you
                will sometimes find a bubble appear in the top right informing you
                that there are updates available for your computer.
            </para>

            <para>
                <informalfigure>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../images/C/updateavailable.png" format="PNG" />
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </para>

            <para> Any updates you
                apply here will automatically be applied to all clients, though
                they may require a reboot. This is because LTSP clients all use the
                same set of applications on the server. When this prompt appears
                click the small red icon, and enter your password
                to display the following application.
            </para>
            <para>
                <informalfigure>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../images/C/updatemanager.png" format="PNG" />
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </para>
            <para>This application allows you to apply all available updates
                for your computer quickly and easily. Clicking on the <emphasis role="bold">Check</emphasis>
                button, checks to see if there are any more updates since the
                computer last checked. If you are going to perform the updates,
                it's a good idea to click this button. Once the check is completed,
                you are ready to update your system.
            </para>
            <para>Be sure to check how much information is going to be
                downloaded, if you are low on bandwidth, or using a slow
                connection. Click on the <emphasis role="bold">Update</emphasis> button, to set the computer
                downloading and installing updates. Once clicked, if there are any
                verification issues, these will be shown. If you are happy that the
                packages come from a trusted source, you can click <keycap>OK</keycap> to continue.
                First, your computer will download all available packages and
                display a screen similar to that below.
            </para>
            <para>
                <informalfigure>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../images/C/updatedownload.png" format="PNG" />
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </para>
            <para>After all packages have finished downloading, you will be
                presented with the progress box, which shows how far the computer
                has come in updating. If you wish you can click the word
                <emphasis role="bold">terminal</emphasis> to show more detailed information about the updates
                as shown below.
            </para>
            <para>
                <informalfigure float="left">
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../../images/C/updateinstall.png" format="PNG" />
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </para>
            <para>After the updates have completed, the computer will inform
                you if you need to restart in order for the updates to come into
                effect. You can either shutdown when you wish, or click the small
                blue icon in the top righthand corner, and you will
                be presented with this question.
            </para>
            <para>
                <important>
                    <para>If you restart your computer without shutting down your
                        clients, their computers will stop responding and they may lose
                        data. Be sure all clients are logged out before restarting the
                        server.
                    </para>
                </important>
            </para>
        </sect2>
        <sect2>
            <title>Updating your LTSP chroot</title>
            <para>At some point in the future, updates will become available
                for your LTSP server. You must remember that altough you may have
                applied all the updates to the server itself, as in the
                instructions....HERE it is likely that the LTSP chroot will also
                need updating. To do this you must open up a terminal and use the
                following commands.
            </para>
            <para>First make sure the Client environment has the same Package
                lists as the Server, to achieve that, you will copy the
                sources.list file from the Server to the Client environment.
            </para>
            <screen>
sudo cp /etc/apt/sources.list /opt/ltsp/i386/etc/apt/
            </screen>
            <para>Now issue the command below.</para>
            <screen>sudo chroot /opt/ltsp/i386</screen>
            <para>This will change your root directory to be the LTSP clients
                root directory. In essence, anything you now do inside here, will
                be applied to the LTSP clients NFS root. This is a separate small
                set of files that are used to boot the clients into a usable, and
                enable them to contact the LTSP server. Once inside this shell, we
                must type the following command to obtain the latest list of
                packages from the apt servers.
            </para>
            <screen>apt-get update</screen>
            <para>Once this has completed you will have to upgrade the software
                in the chroot by running the following command:
            </para>
            <screen>apt-get upgrade</screen>
            <para>Once all upgrades have finished, you must leave the chroot by
                either typing <emphasis role="bold">exit</emphasis> or by using the key combination Ctrl+D.
                This will return you to the root of the server.
            </para>
            <para>If your kernel has been upgraded you must run the LTSP kernel
                upgrade script, to ensure that your LTSP chroot uses the latest
                version. This is performed by running the command below:
            </para>
            <screen>sudo ltsp-update-kernels</screen>
            <para>All of your clients will now use the latest kernel upon their
                next reboot.
            </para>
            <para>Finally, you must remember to rebuild the NBD boot image from your
                chroot with the following command:
            </para>
            <screen>sudo ltsp-update-image</screen>
            <para>Be advised that this may take a few minutes, depending on the speed of your server.
            </para>
        </sect2>
        <sect2>
            <title>Changing the IP of your LTSP server</title>
            <para>At some point in time, it may become necessary to change the
                IP address of your LTSP server. Normally this does not present an
                issue, but LTSP servers and clients communicate over and encrypted
                channel and require all SSL certificates to be updated. Without
                this update, <emphasis role="bold">no LTSP clients will be able to log in</emphasis>. This is
                done by simply opening a terminal and running the following
                command.
            </para>
            <screen>sudo ltsp-update-sshkeys</screen>
        </sect2>
    </sect1>

    <!-- BACKUP -->
    <sect1 id="server-backup">
        <title>Backing Up</title>
        <para>
            Now that you have your Edubuntu server working, and are keeping it updated,
            you're going to want to back up your users' data.
        </para>

        <para>There are a variety of options available for external backup media.
            SCSI tape drives, DVD RAM or ROM's, or even CD/R's may all be used to back
            up your server on a regular basis.
        </para>

        <sect2 id="backupwhat">
            <title>What needs to be backed up?</title>
            <para>When backing up a server, there are typically two approaches:</para>
            <itemizedlist>
                <listitem>
                    <para>Back up everything.</para>
                </listitem>
                <listitem>
                    <para>Back up config files, and user data.</para>
                </listitem>
            </itemizedlist>
            <para>We'll look at each briefly.</para>

            <sect3>
                <title>Back up everything</title>
                <para>Typically, by backing up everything, the administrator is looking to
                    do a restore of the entire operating system, as well as user data.
                </para>
                <para>Typically, you'll want to use a SCSI tape drive, and a program like
                    <command>amanda</command> (available in the universe repository) to do this
                    kind of backup strategy.
                </para>
            </sect3>
            <sect3>
                <title>Back up configs and data</title>
                <para>Backing up only config files and data is an acceptable strategy for sites
                    on a budget.  On a typical Edubuntu system, without a lot of customization,
                    backing up the following files and directories should capture most of what's
                    on your system.  Following a disaster, you'll need to re-install Edubuntu from
                    the CD, re-install any programs you added, and re-apply all updates.  At that
                    point, you can pull the config files and user data from your backup.
                </para>
                <screen>
/etc
/home
/var/lib/tftpboot/ltsp/i386/lts.conf
                </screen>
            </sect3>
        </sect2>
    </sect1>
</chapter>
