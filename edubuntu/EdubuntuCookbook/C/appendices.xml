<chapter id="chap16-appendices">
	<title>Appendices</title>
   <para>...</para>
   <sect1 id="chap16-sect01">
   	<title>Resources</title>
   	<para>...</para>
   </sect1>
	<sect1 id="chap16-sect02">
		<title>Edubuntu School Criteria</title>
		<para>...</para>
	</sect1>
	<sect1 id="chap16-sect03">
		<title>Credits</title>
		<para>...</para>
	</sect1>
	<sect1 id="chap16-sect04">
		<title>Glossary</title>
		<variablelist>
        <varlistentry>
          <term>Asymmetric Digital Subscriber Line ( 
          <acronym>ADSL</acronym>)</term>
          <listitem>
            <para>
            <acronym>ADSL</acronym> is a technology for transmitting digital
            data across normal copper phone lines at high speeds. It is a
            short-range technology, requiring subscribers to be within a few
            kilometres of the exchange providing the service. It is called 
            <emphasis>Asymmetric</emphasis> because download speeds are
            configured to be far higher than upload speeds (you can receive
            more quickly than you can send).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Application Programming Interface (API)</term>
          <listitem>
            <para>Just as a program has a range of menus, icons and buttons
            with which a user can control it, it can have a set of method calls
            and data structures that can be used by other programs to control
            it. This is the 
            <emphasis>API</emphasis>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Basic In/Out System ( 
          <acronym>BIOS</acronym>)</term>
          <listitem>
            <para>A small program in non-volatile storage that is executed
            immediately after a computer is powered up. Normally, it passes
            control to the boot loader of the selected boot media as soon as
            possible. However, it also displays some diagnostic information
            while executing, including a prompt to enter configuration mode.
            While in configuration mode, you may set various basic properties
            of the computer, such as the time of the system clock and the
            selected boot media (e.g. CD-ROM, hard disk, or network).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>boot</term>
          <listitem>
            <para>When a computer is powered up, control immediately passes to
            the 
            <acronym>BIOS</acronym>. The 
            <acronym>BIOS</acronym> finds the program code that should be
            executed to continue the startup process, until the operating
            system is up and running. The whole procedure is called 
            <emphasis>booting up</emphasis>, from the expression "pulling
            yourself up by your bootlaces". Picture a cartoon figure on flat
            land, grabbing hold of his bootlaces and pulling himself up into
            the air until he's flying. A computer manages something similar,
            when it changes from an inert lump of plastic to a running
            system.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Central Processing Unit ( 
          <acronym>CPU</acronym>)</term>
          <listitem>
            <para>The 
            <acronym>CPU</acronym> is the core of the computer. It's one of the
            smaller pieces, consisting of a flat square of silicon, but it
            contains most of the computer's complexity, in the form of millions
            of transistors. When the computer is executing programs, all of the
            instructions as well as the data are fetched from 
            <acronym>RAM</acronym> and processed by the 
            <acronym>CPU</acronym>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Common Gateway Interface (CGI)</term>
          <listitem>
            <para>This is a specification for calling scripts that are
            triggered through the web. The CGI standard specifies what data
            must be passed to the script.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>daemon</term>
          <listitem>
            <para>A program that runs on a server, waiting for requests and
            servicing them. The program runs permanently, as long as the
            service should be offered.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Document Object Model ( 
          <acronym>DOM</acronym>)</term>
          <listitem>
            <para>When a web browser parses an HTML page, it doesn't just write
            out text to the screen and have done with it. It needs to hold on
            to the entire structure in order to be able to rewrite it using
            Javascript, changing parts of the page in-place and reflowing the
            resulting document immediately. This internal structure is called
            the 
            <emphasis>Document Object Model</emphasis>. You can read all about
            it at the World Wide Web Consortium's 
            <ulink url="http://www.w3.org/DOM/"> Document Object Model
            page</ulink>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Domain Name System ( 
          <acronym>DNS</acronym>)</term>
          <listitem>
            <para>The Domain Name System is part of the core infrastructure of
            the internet. It consists of a massive globally distributed
            database that matches IP addresses (e.g. 
            <literal>216.239.57.99</literal>) to domain names that humans like
            to remember (e.g. 
            <literal>google.com</literal>). As long as they keep to the rules,
            anyone can run a 
            <acronym>DNS</acronym> server to resolve local address and to cache
            global addresses. No 
            <acronym>DNS</acronym> server needs to store 
            <emphasis>all</emphasis> the domain names on earth: the job is
            distributed among ISPs who each take responsibility for different
            sections of the namespace. If your local nameserver doesn't know an
            IP address, it knows who to ask to get an answer.</para>
            <para>If 
            <acronym>DNS</acronym> is unavailable, all the services that depend
            on it (such as web browsing and email) don't work.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Dynamic Host Configuration Protocol ( 
          <acronym>DHCP</acronym>)</term>
          <listitem>
            <para>See ...</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Etherboot</term>
          <listitem>
            <para>See 
            <acronym>PXE</acronym> in 
            <xref linkend="chap16-sect04" />.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Internet Service Provider ( 
          <acronym>ISP</acronym>)</term>
          <listitem>
            <para>A business which provides internet access to its customers.
            The nature of this service may vary widely, from dialup access and
            email for home users to wireless broadband and website hosting for
            big media companies and everything in between.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>platform independence</term>
          <listitem>
            <para>A 
            <emphasis>platform</emphasis> is a short name for the entire
            software environment which a specific program requires in order to
            run. Programs may target an operating system (the Windows, Linux or
            Macintosh platforms), or a virtual machine (the Java platform,
            which is available across operating systems). Increasingly, web
            applications such as Google's 
            <ulink url="http://gmail.com"> Gmail</ulink> email service target the
            
            <emphasis>web browser</emphasis> as platform.</para>
            <para>When a program is capable of being run on many different
            platforms, it is called 
            <emphasis>cross-platform</emphasis>. In this case, it either needs
            to be rather self-contained, not making use of any special
            capabilities of any specific platform, or it needs to contain
            alternative implementations for all the platforms it caters
            for.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Power On Self Test ( 
          <acronym>POST</acronym>)</term>
          <listitem>
            <para>The 
            <acronym>POST</acronym> is a series of hardcoded self-tests that a
            computer's 
            <acronym>BIOS</acronym> performs to see whether basic resources such
            as its 
            <acronym>CPU</acronym>, memory, and keyboard are present and
            functional.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Pre-boot eXecution Environment ( 
          <acronym>PXE</acronym>)</term>
          <listitem>
            <para>A small program on the network card that allows a computer to
            boot from the network. The 
            <acronym>PXE</acronym> takes care of finding a server from which to
            boot, and transferring the boot loader from the server to the
            client across the network.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Programmable 
          <acronym>ROM</acronym> ( 
          <acronym>PROM</acronym>)</term>
          <listitem>
            <para>This is a kind of memory that can be written exactly once.
            After it's been written, its contents is fixed. It's generally used
            for things like network cards with the facility to boot from the
            network. Such cards can be used in many different environments,
            requiring different software. However, once deployed in some
            environment, it normally stays there. Therefor the required
            software can be written to a 
            <acronym>PROM</acronym> on the card, effectively locking down the
            card to the deployed environment.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Media Access Control address ( 
          <acronym>MAC</acronym> address)</term>
          <listitem>
            <para>In computer networking, a 
            <acronym>MAC</acronym> address is a code on most forms of networking
            equipment that allows for that device to be uniquely
            identified.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Network File System ( 
          <acronym>NFS</acronym>)</term>
          <listitem>
            <para>A local filesystem reads data from a hard disk. 
            <acronym>NFS</acronym> is a protocol that allows a remote filesystem
            to be mounted on a path of the local filesystem, so that data read
            from files on that path is not read from a local disk, but from a
            server on the network.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>netmask</term>
          <listitem>
            <para>In 
            <xref linkend="chap08-sect04" /> networking, the 
            <emphasis>netmask</emphasis> specifies all the IP addresses that
            belong to a particular network.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
          <acronym>RAM</acronym> disk</term>
          <listitem>
            <para>A physical hard disk stores data on magnetic platters. A 
            <acronym>RAM</acronym> disk emulates a hard disk using the
            computer's memory. Whereas a hard disk stores data permanently
            until it is rewritten, a 
            <acronym>RAM</acronym> disk only exists as a running program, and
            goes away when the program stops or the computer is powered
            down.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Random Access Memory ( 
          <acronym>RAM</acronym>)</term>
          <listitem>
            <para>Memory that stores code and data only as long as the computer
            is powered up. At the first hint of a power interruption, 
            <acronym>RAM</acronym> becomes as blank as a beach washed clean by
            the tide. 
            <acronym>RAM</acronym> can be written to, and during execution,
            programs are continuously rewriting its contents.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Read Only Memory ( 
          <acronym>ROM</acronym>)</term>
          <listitem>
            <para>Memory that stores code and data permanently, whether or not
            the workstation is powered up. It cannot be written to: every time
            it's read, it's exactly the same.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Read the FINE Manual ( 
          <acronym>RTFM</acronym>)</term>
          <listitem>
            <para>Linux is a 
            <emphasis>self-documenting</emphasis> system. All Linux programs
            come with technical documentation, and most commands accept a 
            <literal>--help</literal> option that will start you off. The
            information is sometimes cryptic, or just very dense, but if you
            don't read it two, three, four or five times, you'll find yourself
            asking the same questions again and again, and never progressing
            beyond the basics.</para>
            <para>You'll also find that people answer your questions with a
            terse " 
            <acronym>RTFM</acronym>!", meaning that the answer is right there
            in the manual. Don't take offence, look it up.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>root</term>
          <listitem>
            <para>Linux systems loosely use a 
            <emphasis>tree</emphasis> metaphor to explain some aspects of their
            structure. So, for example, the user who is the system
            administrator, with all privileges to make or break the system, is
            the 
            <emphasis role="strong">root</emphasis> user. The 
            <literal>root</literal> user can create other users and groups with
            more limited privileges, like the branches of a tree that are
            separate and thinner than the trunk.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>root filesystem</term>
          <listitem>
            <para>The filesystem is an hierarchical tree structure. The
            directory which contains all the others is called the 
            <emphasis role="strong">root</emphasis>, and is written like this: 
            <filename>/</filename>. This is a subdirectory of the root
            directory: 
            <filename>/etc</filename>. This is a file in that subdirectory: 
            <filename>/etc/hosts</filename>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>shell</term>
          <listitem>
            <para>Another metaphor used to express the structure of a Linux
            system is that of a nut containing a kernel. The kernel is hidden
            inside, it is surrounded by a 
            <emphasis>shell</emphasis>. As user you can't interact with the
            kernel directly, you interact with a 
            <emphasis>shell</emphasis> program. This is a program which accepts
            commands and gives feedback, all via a textual command line
            interface. The shell has a number of builtin commands, but it also
            does job control, starting and stopping programs that run under its
            control.</para>
            <para>The shell has a full complement of flow control structures,
            so that it can be used to write programs. These are called shell
            scripts. Shell scripts are most often used to coordinate the
            execution of other programs.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Simple Mail Transfer Protocol ( 
          <acronym>SMTP</acronym>)</term>
          <listitem>
            <para>When you send an email, your mail server looks at the headers
            of the mail to see where it should be delivered. It then uses DNS
            to look up the IP address of the mail server on the receiving end.
            When it knows whom to contact, it starts an 
            <acronym>SMTP</acronym> conversation with the remote mailserver. It
            asks the server what version of the protocol it supports (so that
            it knows how to encode the mail, if necessary) and whether the
            server is accepting mail for the user you want to reach. When the
            two servers have gotten to know one another, the mail is
            transferred and queued for the remote user to read.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>symbolic links</term>
          <listitem>
            <para>A file can only be stored in one place on a disk. If you want
            it to appear to be in other places as well, you can make a 
            <emphasis>symbolic link</emphasis> from there to the real location
            of the file. By most commands, the link will be transparent: it
            will be treated exactly as though the file really exists in that
            location.</para>
          </listitem>
        </varlistentry>
      </variablelist>
	</sect1>
</chapter>