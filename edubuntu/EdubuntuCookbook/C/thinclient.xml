<chapter id="chap06-thinclient" status="draft">
	<title>Thin-client Computing</title>
   <para>An Edubuntu computer laboratory consists of a classroom full of thin client workstations communicating with a classroom server. The specific implementation of thin client computing used in Edubuntu is discussed in <xref linkend="chap06-sect02" />.</para>
	<sect1 id="chap06-sect01" status="draft">
		<title>What is Thin Client Computing?</title>
		<para><emphasis>Thin client</emphasis> and <emphasis>fat client</emphasis> (also called &quot;thick&quot; or &quot;rich&quot; client) are mostly marketing terms for different configurations of computer. A thin client asks a central server to do most of its processing, and keeps as little hardware and software as possible on the workstation side. Ideally, the user of a thin client should have only a screen, keyboard, mouse and enough computing power to handle display and network communications --- you don't even need (or want) a hard drive. The less you have, the less there can go wrong.</para>
		<para>A fat client does as much processing as possible itself and only passes data required for communications and storage on to the server. A standalone PC is the typical fat client with which everyone is familiar.</para>
		<!-- Insert image fatclient.gif here -->
		<para>Fat client</para>
		<para>A thin client may be a software program executing on a generic PC, or it may be a hardware device, called a terminal, designed to provide only user input and display functions. Because old PCs (whether retired, written off, obsolete or just out of fashion) are easier to find than specialised thin client hardware, Edubuntu uses them as thin clients, with the appropriate software. Because they don't do much work themselves, the hardware requirements for these "old" PCs are very basic. Since every client in a thin client network asks a central server to do its work, all the individual workstations look the same: they all share the same server, and they all behave exactly like the server would if you were using it directly.</para>
		<para>In addition, although everyone who uses the lab can have their own computing environment stored on the server, with their own files, desktop, and so on, the individual workstations can't get viruses or be misconfigured by curious learners --- there simply isn't anything to configure! The thin client doesn't have enough brains to get confused.</para>
		<para>This means that the lab computers are trivial to keep up and maintenance is restricted to the server in the back room.</para>
		<para>Thin clients are cheaper and require less administration than fat clients. On the other hand, they tend to require far greater network bandwidth, as display data will probably need to be passed to the thin clients. They can't do a single thing on their own --- for each and every action, they need to talk to the server. This means that a server for a room full of thin clients must be much more capable than a server used by fat clients.</para>
		<para>One of the advantages that this configuration entails, is that all the software resides on the server, and so you only have to upgrade it once. In a fat client configuration, every workstation has its own copies of the software, and so any upgrade needs to be rolled out to every workstation.</para>
		<!-- Insert image thinclient.gif here -->
	</sect1>
	<sect1 id="chap06-sect02" status="draft">
		<title>Linux Terminal Server Project</title>
		<para>The Linux Terminal Server Project (LTSP) is a configuration of Linux that allows you to connect lots of low-powered thin client terminals to a Linux server. The LTSP provides a simple way to utilize low cost workstations as either graphical or character-based terminals on a GNU/Linux server.</para>
		<para>K12LTSP is based on the Fedora Project and the LTSP terminal server packages (see <xref linkend="chap07-sect01.01" />). It's easy to install and configure. It's distributed under the GNU General Public License. That means it's free and it's based on Open Source software.</para>
		<para>Once installed, K12LTSP lets you boot (see <xref linkend="chap16-sect04" />) diskless workstations from an application server.</para>
	</sect1>
	<sect1 id="chap06-sect03" status="draft">
		<title>How the lab works</title>
		<para>There is a shorter version of this in <xref linkend="chap13-sect02.02" />.</para>
		<orderedlist numeration="arabic">
			<listitem>
				<para><emphasis role="bold">&quot;Power On Self Test&quot; (POST).</emphasis> When you turn on the workstation, it will go through its Power On Self Test (POST; for this and other acronyms, see <xref linkend="chap16-sect04" />).</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Find the boot ROM.</emphasis> During the self test, the BIOS will search for expansion ROMs. The network card contains an Etherboot boot-ROM, which is an expansion ROM. The BIOS will detect the ROM on the network card (it doesn't know about the network card, it only notices the ROM).</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Boot.</emphasis> Once the POST is complete, execution will jump into the Etherboot code.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Find the network card.</emphasis> The Etherboot code will scan for a network card. Once it detects the card, the card will be initialized.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">DHCP request.</emphasis> The Etherboot code will then broadcast a DHCP request to the local network. The request will include the MAC address of the network card.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">DHCP request received.</emphasis> The dhcpd daemon on the server will see the broadcast request from the workstation, and look in its configuration file for an entry that matches the MAC address of that workstation.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">DHCP request reply.</emphasis> The <emphasis role="bold">dhcpd</emphasis> daemon will construct a reply packet, containing several pieces of information. This packet will be sent back to the workstation. The reply information includes:</para>
					<itemizedlist>
						<listitem>
							<para>an IP address for the workstation,</para>
						</listitem>
						<listitem>
							<para>the netmask setting (see <xref linkend="chap16-sect04" />) for the local network,</para>
						</listitem>
						<listitem>
							<para>the pathname of the kernel to download (this is a filesystem path on the server),</para>
						</listitem>
						<listitem>
							<para>the pathname of the root filesystem (see <xref linkend="chap16-sect04" />) to mount as the root of the client filesystem,</para>
						</listitem>
						<listitem>
							<para>optional parameters to be passed to the kernel, via the kernel command line.</para>
						</listitem>
					</itemizedlist>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Boot ROM configures TCP/IP interface.</emphasis> The Etherboot code will receive the reply from the server, and it will configure the TCP/IP interface in the network card with the parameters that were supplied. Once this is done, the client computer has an IP address on the network.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Download the kernel using TFTP.</emphasis> Using TFTP (Trivial File Transfer Protocol), the Etherboot code will contact the server and begin downloading the kernel.</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Kernel downloaded.</emphasis> Once the kernel has been completely downloaded to the workstation, the Etherboot code will place the kernel into the correct location in memory.</para>
			</listitem>
		</orderedlist>
	</sect1>
	<sect1 id="chap06-sect04" status="draft">
		<title>Benefits</title>
		<sect2 id="chap06-sect04.01" status="draft">
			<title>Easy Maintenance</title>
			<para>If a user reconfigures a workstation in a fat client computer lab, all the other users of that workstation will have to cope with these changes. This means that if someone inadvertently sets the workstation to use black type on a black background, for example, then no-one will be able to see what's going on.</para>
			<para>In contrast, in a thin client lab, every user has their own files, their own email, and their own desktop environment that they can change to their liking without influencing anyone else, all stored on the classroom server. A configuration slipup will inconvenience only themselves.</para>
		</sect2>
		<sect2 id="chap06-sect04.02" status="draft">
			<title>Cheap hardware</title>
			<para>Most of the equipment in a computer lab are workstations for learners to use. There may be one or two printers, network switches and a server, but they are far outnumbered by between 20 and 40 client workstations.</para>
			<para>In an Edubuntu lab, these can all be really old, used, previous-generation computers. This is because the demands on these machines is so slight that almost anything will do. All those stacks of old computers everywhere that no one knows what to do with are suddenly useful, and saving schools vast amounts of cash that they would normally have to outlay on relatively new equipment so they can run contemporary software.</para>
			<para>The thin client paradigm also means that requirements for uniformity among terminals is relaxed. As long as they conform to a couple of basic requirements (network boot, SVGA graphics card, enough RAM) it doesn&apos;t matter if they have idiosyncratic hardware. Only the server configuration needs to be maintained. Heterogenous hardware doesn't make life difficult for the admin.</para>
			<para>The thin-client network in the lab ensures that each terminal, no matter what its own computing characteristics, behaves with all the speed and capability of the server, so each user has an experience of top quality, smooth, fast computing. Unfortunately, this does mean that if some of your client workstations are powerful, modern machines, they may not be fully utilised in a default Edubuntu configuration, as they will still be letting the server do all the work.</para>
		</sect2>
		<sect2 id="chap06-sect04.03" status="draft">
			<title>Less theft</title>
			<para>In an Edubuntu lab, the most accessible hardware is also the easiest to replace and the hardest to use outside the lab. An Edubuntu client workstation on its own, without the classroom server, is more or less useless. It&apos;s too bulky for a doorstop, and it can&apos;t run modern software. It doesn&apos;t even have a hard drive.</para>
		</sect2>
		<sect2 id="chap06-sect04.04" status="draft">
			<title>Mobile desktops</title>
			<para>As the terminals only serve to display a session from the classroom server, it doesn't matter which one you use. If one breaks while you&apos;re using it, you can move to the next one, log on, and pick up where you left off. If someone is using the workstation where you were working, go to another one and log in there to regain access to your desktop.</para>
		</sect2>
		<sect2 id="chap06-sect04.05" status="draft">
			<title>Data easy to back up</title>
			<para>All the data in Edubuntu resides on the disk array of the classroom server. Instead of having to backup 20 or 40 individual hard drives, it&apos;s possible to backup only one, and still get a complete backup of everyone&apos;s data.</para>
		</sect2>
	</sect1>
	<sect1 id="chap06-sect05" status="draft">
		<title>Drawbacks</title>
		<para>Every solution will have some drawbacks, and Edubuntu is no exception.</para>
		<variablelist>
        <varlistentry>
          <term><emphasis role="bold">Online games will be laggy</emphasis></term>
          <listitem>
            <para>Graphics-intensive applications such as games will not perform well, as all the display information will have to be pushed over the network by the server. This is hundreds of times slower than driving a local graphics card. But then, playing online games (as well as other games for that matter), is not a goal of the Edubuntu project.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">All the clients run the same Operating System</emphasis></term>
          <listitem>
            <para>Since it&apos;s really only one instance of Edubuntu serving all the desktops and applications, all the clients in the lab will necessarily offer an Edubuntu environment. It is possible for the server to run software such as Wine (which enables many Windows programs to run under Linux) or VMWare (which allows the server to run instances of other operating systems), but in these cases the underlying system will still be Edubuntu, and the server will still be doing all the work.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">Single point of failure</emphasis></term>
          <listitem>
            <para>While it&apos;s very convenient that the thin-client workstations are interchangeable and that you can access your desktop from anywhere, it does mean that a catastrophic failure of the server will put <emphasis>all</emphasis> client workstations out of commission.</para>
          </listitem>
        </varlistentry>
      </variablelist>
	</sect1>
	<sect1 id="chap06-sect06" status="draft">
		<title>Hardware</title>
		<sect2 id="chap06-sect06.01">
			<title>Minimum specifications</title>
			 <variablelist>
          <varlistentry>
            <term><emphasis role="bold">Server</emphasis></term>
            <listitem>
              <para>
              <emphasis role="bold">Memory:</emphasis> The server should
              have 2Gb 
              <acronym>RAM</acronym> or more (512Mb for the base system, and
              50Mb for each additional client). As long as you're using it all
              up, more 
              <acronym>RAM</acronym> means more speed (it doesn't help to have 
              <acronym>RAM</acronym> that you don&apos;t use). Too little 
              <acronym>RAM</acronym> will bring your server to a crawl as it
              starts swapping memory to the hard drive. If you run out of
              memory, performance will be unacceptable.</para>
              <para>
              <emphasis role="bold">Hard Disk Drive:</emphasis> SCSI is faster than IDE: We&apos;ve seen <acronym>LTSP</acronym> servers slow to a crawl when more than 10 clients are running from IDE drives. SCSI drives are better equipped to handle the multiple read/write requests.</para>
              <para>
              <emphasis role="bold">Network:</emphasis> Your server will
              have at least one ethernet card to create a private network ( 
              <literal>192.168.0.x</literal>). This card connects to a switch
              for terminals. If there is a school network to which you need to
              connect, or if the school has a Internet connection via the
              server, it will have a second ethernet card, which will get an IP
              address on the second network.</para>
            </listitem>
          </varlistentry>
           <varlistentry>
            <term><emphasis role="bold">Clients</emphasis></term>
            <listitem>
              <para>
              <emphasis role="bold">Memory:</emphasis> Client workstations
              should have at least 32Mb of 
              <acronym>RAM</acronym>. Clients aren't that dependent on swap
              space for extra memory capacity, since memory usage on them is
              reasonably constant because they don't execute applications: they
              only display them.</para>
              <para>
              <emphasis role="bold">Hard Disk Drive:</emphasis> Client
              workstations should not have hard drives.</para>
              <para>
              <emphasis role="bold">Network:</emphasis> Each client
              workstation should have one network card with a boot 
              <acronym>ROM</acronym> to enable booting from the network.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><emphasis role="bold">Switch</emphasis></term>
            <listitem>
              <para>An Ethernet hub is not acceptable (see 
              <xref linkend="chap08-sect02.01" />), it&apos;s too slow for network boot
              and 
              <acronym>NFS</acronym>. Having a fast Ethernet switch will make
              your life better and more colorful.</para>
              <para>The number of ports on the switch must be enough for your
              clients and server. If you have more than 24 NICs, 2 or more
              12-port/16-port fast Ethernet switches are recommended. The
              client ports should be 100 megabit, and there should be a gigabit
              port for the server. Since all clients get their display from the
              server, a slow link to the server would be a bottleneck for the
              whole lab.</para>
              <!-- Insert switch-front-blinkenlights.gif here -->
              
              <!-- <mediaobject>
                <imageobject>
                  <imagedata fileref="illustrations/switch-front-blinkenlights.gif" />
                </imageobject>
                <caption>The front panel of the switch shows a light for every
                network cable that's been plugged in. The light shows whether
                the link is up, whether there is traffic and what its speed 
                is.</caption>
              </mediaobject> -->
              
              <!-- Insert switch-cables.gif here -->
              
              <!-- <mediaobject>
                <imageobject>
                  <imagedata fileref="illustrations/switch-cables.gif" /> 
                </imageobject>
                <caption>The cables from the workstations all terminate at the
                switch. If you don't label them, they get very hard to tell
                apart!</caption>
              </mediaobject> -->
            </listitem>
          </varlistentry>
          </variablelist>
		</sect2>
		<sect2 id="chap06-sect06.02" status="draft">
			<title>Things to look out for</title>
			<variablelist>
          <varlistentry>
            <term><emphasis role="bold">Monitors</emphasis></term>
            <listitem>
              <para>The display size should be at least 15", and the monitor
              must be capable of SVGA video modes. It should also be compatible
              with the video card of the client.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><emphasis role="bold">Uniform equipment</emphasis></term>
            <listitem>
              <para>If you use the same equipment throughout your Edubuntu lab, it
              becomes easier to buy in bulk and to swap out components. It also
              makes it easier for other Edubuntu users to assist each other with skills and
              equipment.</para>
              <para>Heterogenous boxes, in comparison, are harder to keep
              running, and more likely to be "throw-away" - not worth trying
              to resurrect. As long as they don&apos;t cost you anything, this is
              worth it, but you have to guard against them becoming a drain on
              your time and resources.</para>
            </listitem>
          </varlistentry>
        </variablelist>
		</sect2>
		<!-- <sect2 id="chap06-sect06.03">
			<title>Sources for second hand equipment</title>
			<para>...</para>
		</sect2> -->
	</sect1>
	<sect1 id="chap06-sect07" status="draft">
		<title>Thin Client configuration</title>
		<para>While there is little to do for the installation of the thin client workstations, there are a couple of things you can pay attention to.</para>
		 <variablelist>
        <varlistentry>
          <term><emphasis role="bold">Network cards</emphasis></term>
          <listitem>
            <para>All the client computers need to get a network card with
            space for a boot 
            <acronym>PROM</acronym> (see 
            <xref linkend="chap16-sect04" />), so that they can start looking for
            the server on the classroom network as soon as they are switched
            on. The server also needs a network card, and it needs to be a fast
            one (gigabit ethernet), as the link between the server and the
            switch is ten times quicker than the link between the switch and
            the client workstations.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">Boot PROMs</emphasis></term>
          <listitem>
            <para>Depending on the network cards you managed to get, the
            correct etherboot image may need to be written to the network
            cards. The 
            <ulink url="http://drbl.sourceforge.net/"> Diskless Remote Boot in
            Linux</ulink> project has made available an 
            <ulink url="http://www.k12os.org/modules.php?op=modload&amp;name=News&amp;file=article&amp;sid=46&amp;mode=thread&amp;order=0&amp;thold=0">
            Etherboot NIC Detection Disk</ulink> which can help you to determine
            what you need to write to the card.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">Dual-booting</emphasis></term>
          <listitem>
            <para>The 
            <acronym>BIOS</acronym> in the client workstations normally needs to
            be configured to boot from the network. To do this, watch the
            workstation screen after turning the power on - for a couple of
            seconds, the 
            <acronym>BIOS</acronym> will display a notice that you may press a
            key (such as 
            <keycap>DEL</keycap> or 
            <keycap>F8</keycap>, depending on the 
            <acronym>BIOS</acronym>) to enter setup mode. This will enable you
            to specify where the computer should look for boot records during
            startup; for example on a 
            <acronym>CD</acronym>, a floppy disk, a hard disk, or the network
            card. In the event that you have a relatively capable workstation
            with a hard drive, you may want to boot the workstation as a
            standalone computer from time to time. To do this, you may
            configure the 
            <acronym>BIOS</acronym> to look for a boot record on a floppy disk
            before trying the network card.</para>
            <para>One kind of scenario where this may be useful, is where you
            have an existing computer lab with software installed at each
            workstation. Boot from hard disk to access the standalone
            workstations, and boot from the network to have Edubuntu! It is
            even possible for the standalone workstations to access the Edubuntu
            network, and to use the classroom server as a fileserver. Since Edubuntu is implemented
            using standard protocols, this will work no matter what operating
            system is installed on the workstation computers.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><emphasis role="bold">Other resources</emphasis></term>
          <listitem>
            <para>This cookbook can do no more than scratch the surface. Some
            of the other resources regarding thin-client computing available on
            the web include:</para>
            <itemizedlist>
              <listitem>
                <para>
                  <ulink url="http://drbl.sourceforge.net/redhat/"> Diskless
                  Remote Boot in Linux (DRBL) for Redhat 8.0, 9, Fedora Core 1,
                  2, Mandrake 9.2, 10</ulink>
                </para>
              </listitem>
              <listitem>
                <para>
                <ulink url="http://www.tldp.org/HOWTO/Diskless-root-NFS-HOWTO.html">
                Root over 
                <acronym>NFS</acronym> clients &amp; server HOWTO.</ulink>.. if
                your workstations have disks, and you don't want to delegate
                processing to the classroom server.</para>
              </listitem>
              <listitem>
                <para>
                <ulink url="http://www.tldp.org/HOWTO/Network-boot-HOWTO/index.html">
                Network Boot and Exotic Root HOWTO</ulink> This document
                explains how to quickly setup a Linux server to provide what
                diskless Linux clients require to get up and running, using an
                IP network. It is based on the Diskless-HOWTO, the
                Diskless-root-NFS-HOWTO, the Linux kernel documentation, the
                etherboot project's documentation, the Linux Terminal Server
                Project's homepage, and the author (Brieuc Jeunhomme)'s
                personal experience.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>
	</sect1>
</chapter>